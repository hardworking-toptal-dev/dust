"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/pino";
exports.ids = ["vendor-chunks/pino"];
exports.modules = {

/***/ "(ssr)/../node_modules/pino/lib/caller.js":
/*!******************************************!*\
  !*** ../node_modules/pino/lib/caller.js ***!
  \******************************************/
/***/ ((module) => {

eval("\nfunction noOpPrepareStackTrace(_, stack) {\n    return stack;\n}\nmodule.exports = function getCallers() {\n    const originalPrepare = Error.prepareStackTrace;\n    Error.prepareStackTrace = noOpPrepareStackTrace;\n    const stack = new Error().stack;\n    Error.prepareStackTrace = originalPrepare;\n    if (!Array.isArray(stack)) {\n        return undefined;\n    }\n    const entries = stack.slice(2);\n    const fileNames = [];\n    for (const entry of entries){\n        if (!entry) {\n            continue;\n        }\n        fileNames.push(entry.getFileName());\n    }\n    return fileNames;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL3Bpbm8vbGliL2NhbGxlci5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLFNBQVNBLHNCQUF1QkMsQ0FBQyxFQUFFQyxLQUFLO0lBQ3RDLE9BQU9BO0FBQ1Q7QUFFQUMsT0FBT0MsT0FBTyxHQUFHLFNBQVNDO0lBQ3hCLE1BQU1DLGtCQUFrQkMsTUFBTUMsaUJBQWlCO0lBQy9DRCxNQUFNQyxpQkFBaUIsR0FBR1I7SUFDMUIsTUFBTUUsUUFBUSxJQUFJSyxRQUFRTCxLQUFLO0lBQy9CSyxNQUFNQyxpQkFBaUIsR0FBR0Y7SUFFMUIsSUFBSSxDQUFDRyxNQUFNQyxPQUFPLENBQUNSLFFBQVE7UUFDekIsT0FBT1M7SUFDVDtJQUVBLE1BQU1DLFVBQVVWLE1BQU1XLEtBQUssQ0FBQztJQUU1QixNQUFNQyxZQUFZLEVBQUU7SUFFcEIsS0FBSyxNQUFNQyxTQUFTSCxRQUFTO1FBQzNCLElBQUksQ0FBQ0csT0FBTztZQUNWO1FBQ0Y7UUFFQUQsVUFBVUUsSUFBSSxDQUFDRCxNQUFNRSxXQUFXO0lBQ2xDO0lBRUEsT0FBT0g7QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvcGluby9saWIvY2FsbGVyLmpzPzdjYWYiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmZ1bmN0aW9uIG5vT3BQcmVwYXJlU3RhY2tUcmFjZSAoXywgc3RhY2spIHtcbiAgcmV0dXJuIHN0YWNrXG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2V0Q2FsbGVycyAoKSB7XG4gIGNvbnN0IG9yaWdpbmFsUHJlcGFyZSA9IEVycm9yLnByZXBhcmVTdGFja1RyYWNlXG4gIEVycm9yLnByZXBhcmVTdGFja1RyYWNlID0gbm9PcFByZXBhcmVTdGFja1RyYWNlXG4gIGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2tcbiAgRXJyb3IucHJlcGFyZVN0YWNrVHJhY2UgPSBvcmlnaW5hbFByZXBhcmVcblxuICBpZiAoIUFycmF5LmlzQXJyYXkoc3RhY2spKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZFxuICB9XG5cbiAgY29uc3QgZW50cmllcyA9IHN0YWNrLnNsaWNlKDIpXG5cbiAgY29uc3QgZmlsZU5hbWVzID0gW11cblxuICBmb3IgKGNvbnN0IGVudHJ5IG9mIGVudHJpZXMpIHtcbiAgICBpZiAoIWVudHJ5KSB7XG4gICAgICBjb250aW51ZVxuICAgIH1cblxuICAgIGZpbGVOYW1lcy5wdXNoKGVudHJ5LmdldEZpbGVOYW1lKCkpXG4gIH1cblxuICByZXR1cm4gZmlsZU5hbWVzXG59XG4iXSwibmFtZXMiOlsibm9PcFByZXBhcmVTdGFja1RyYWNlIiwiXyIsInN0YWNrIiwibW9kdWxlIiwiZXhwb3J0cyIsImdldENhbGxlcnMiLCJvcmlnaW5hbFByZXBhcmUiLCJFcnJvciIsInByZXBhcmVTdGFja1RyYWNlIiwiQXJyYXkiLCJpc0FycmF5IiwidW5kZWZpbmVkIiwiZW50cmllcyIsInNsaWNlIiwiZmlsZU5hbWVzIiwiZW50cnkiLCJwdXNoIiwiZ2V0RmlsZU5hbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/pino/lib/caller.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/pino/lib/deprecations.js":
/*!************************************************!*\
  !*** ../node_modules/pino/lib/deprecations.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst warning = __webpack_require__(/*! process-warning */ \"(ssr)/../node_modules/process-warning/index.js\")();\nmodule.exports = warning;\nconst warnName = \"PinoWarning\";\nwarning.create(warnName, \"PINODEP008\", \"prettyPrint is deprecated, look at https://github.com/pinojs/pino-pretty for alternatives.\");\nwarning.create(warnName, \"PINODEP009\", \"The use of pino.final is discouraged in Node.js v14+ and not required. It will be removed in the next major version\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL3Bpbm8vbGliL2RlcHJlY2F0aW9ucy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE1BQU1BLFVBQVVDLG1CQUFPQSxDQUFDO0FBQ3hCQyxPQUFPQyxPQUFPLEdBQUdIO0FBRWpCLE1BQU1JLFdBQVc7QUFFakJKLFFBQVFLLE1BQU0sQ0FBQ0QsVUFBVSxjQUFjO0FBRXZDSixRQUFRSyxNQUFNLENBQUNELFVBQVUsY0FBYyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvcGluby9saWIvZGVwcmVjYXRpb25zLmpzPzQ0MzAiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IHdhcm5pbmcgPSByZXF1aXJlKCdwcm9jZXNzLXdhcm5pbmcnKSgpXG5tb2R1bGUuZXhwb3J0cyA9IHdhcm5pbmdcblxuY29uc3Qgd2Fybk5hbWUgPSAnUGlub1dhcm5pbmcnXG5cbndhcm5pbmcuY3JlYXRlKHdhcm5OYW1lLCAnUElOT0RFUDAwOCcsICdwcmV0dHlQcmludCBpcyBkZXByZWNhdGVkLCBsb29rIGF0IGh0dHBzOi8vZ2l0aHViLmNvbS9waW5vanMvcGluby1wcmV0dHkgZm9yIGFsdGVybmF0aXZlcy4nKVxuXG53YXJuaW5nLmNyZWF0ZSh3YXJuTmFtZSwgJ1BJTk9ERVAwMDknLCAnVGhlIHVzZSBvZiBwaW5vLmZpbmFsIGlzIGRpc2NvdXJhZ2VkIGluIE5vZGUuanMgdjE0KyBhbmQgbm90IHJlcXVpcmVkLiBJdCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgdmVyc2lvbicpXG4iXSwibmFtZXMiOlsid2FybmluZyIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwid2Fybk5hbWUiLCJjcmVhdGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/pino/lib/deprecations.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/pino/lib/levels.js":
/*!******************************************!*\
  !*** ../node_modules/pino/lib/levels.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n/* eslint no-prototype-builtins: 0 */ const { lsCacheSym, levelValSym, useOnlyCustomLevelsSym, streamSym, formattersSym, hooksSym } = __webpack_require__(/*! ./symbols */ \"(ssr)/../node_modules/pino/lib/symbols.js\");\nconst { noop, genLog } = __webpack_require__(/*! ./tools */ \"(ssr)/../node_modules/pino/lib/tools.js\");\nconst levels = {\n    trace: 10,\n    debug: 20,\n    info: 30,\n    warn: 40,\n    error: 50,\n    fatal: 60\n};\nconst levelMethods = {\n    fatal: (hook)=>{\n        const logFatal = genLog(levels.fatal, hook);\n        return function(...args) {\n            const stream = this[streamSym];\n            logFatal.call(this, ...args);\n            if (typeof stream.flushSync === \"function\") {\n                try {\n                    stream.flushSync();\n                } catch (e) {\n                // https://github.com/pinojs/pino/pull/740#discussion_r346788313\n                }\n            }\n        };\n    },\n    error: (hook)=>genLog(levels.error, hook),\n    warn: (hook)=>genLog(levels.warn, hook),\n    info: (hook)=>genLog(levels.info, hook),\n    debug: (hook)=>genLog(levels.debug, hook),\n    trace: (hook)=>genLog(levels.trace, hook)\n};\nconst nums = Object.keys(levels).reduce((o, k)=>{\n    o[levels[k]] = k;\n    return o;\n}, {});\nconst initialLsCache = Object.keys(nums).reduce((o, k)=>{\n    o[k] = '{\"level\":' + Number(k);\n    return o;\n}, {});\nfunction genLsCache(instance) {\n    const formatter = instance[formattersSym].level;\n    const { labels } = instance.levels;\n    const cache = {};\n    for(const label in labels){\n        const level = formatter(labels[label], Number(label));\n        cache[label] = JSON.stringify(level).slice(0, -1);\n    }\n    instance[lsCacheSym] = cache;\n    return instance;\n}\nfunction isStandardLevel(level, useOnlyCustomLevels) {\n    if (useOnlyCustomLevels) {\n        return false;\n    }\n    switch(level){\n        case \"fatal\":\n        case \"error\":\n        case \"warn\":\n        case \"info\":\n        case \"debug\":\n        case \"trace\":\n            return true;\n        default:\n            return false;\n    }\n}\nfunction setLevel(level) {\n    const { labels, values } = this.levels;\n    if (typeof level === \"number\") {\n        if (labels[level] === undefined) throw Error(\"unknown level value\" + level);\n        level = labels[level];\n    }\n    if (values[level] === undefined) throw Error(\"unknown level \" + level);\n    const preLevelVal = this[levelValSym];\n    const levelVal = this[levelValSym] = values[level];\n    const useOnlyCustomLevelsVal = this[useOnlyCustomLevelsSym];\n    const hook = this[hooksSym].logMethod;\n    for(const key in values){\n        if (levelVal > values[key]) {\n            this[key] = noop;\n            continue;\n        }\n        this[key] = isStandardLevel(key, useOnlyCustomLevelsVal) ? levelMethods[key](hook) : genLog(values[key], hook);\n    }\n    this.emit(\"level-change\", level, levelVal, labels[preLevelVal], preLevelVal);\n}\nfunction getLevel(level) {\n    const { levels, levelVal } = this;\n    // protection against potential loss of Pino scope from serializers (edge case with circular refs - https://github.com/pinojs/pino/issues/833)\n    return levels && levels.labels ? levels.labels[levelVal] : \"\";\n}\nfunction isLevelEnabled(logLevel) {\n    const { values } = this.levels;\n    const logLevelVal = values[logLevel];\n    return logLevelVal !== undefined && logLevelVal >= this[levelValSym];\n}\nfunction mappings(customLevels = null, useOnlyCustomLevels = false) {\n    const customNums = customLevels ? Object.keys(customLevels).reduce((o, k)=>{\n        o[customLevels[k]] = k;\n        return o;\n    }, {}) : null;\n    /* eslint-enable */ const labels = Object.assign(Object.create(Object.prototype, {\n        Infinity: {\n            value: \"silent\"\n        }\n    }), useOnlyCustomLevels ? null : nums, customNums);\n    const values = Object.assign(Object.create(Object.prototype, {\n        silent: {\n            value: Infinity\n        }\n    }), useOnlyCustomLevels ? null : levels, customLevels);\n    return {\n        labels,\n        values\n    };\n}\nfunction assertDefaultLevelFound(defaultLevel, customLevels, useOnlyCustomLevels) {\n    if (typeof defaultLevel === \"number\") {\n        const values = [].concat(Object.keys(customLevels || {}).map((key)=>customLevels[key]), useOnlyCustomLevels ? [] : Object.keys(nums).map((level)=>+level), Infinity);\n        if (!values.includes(defaultLevel)) {\n            throw Error(`default level:${defaultLevel} must be included in custom levels`);\n        }\n        return;\n    }\n    const labels = Object.assign(Object.create(Object.prototype, {\n        silent: {\n            value: Infinity\n        }\n    }), useOnlyCustomLevels ? null : levels, customLevels);\n    if (!(defaultLevel in labels)) {\n        throw Error(`default level:${defaultLevel} must be included in custom levels`);\n    }\n}\nfunction assertNoLevelCollisions(levels, customLevels) {\n    const { labels, values } = levels;\n    for(const k in customLevels){\n        if (k in values) {\n            throw Error(\"levels cannot be overridden\");\n        }\n        if (customLevels[k] in labels) {\n            throw Error(\"pre-existing level values cannot be used for new levels\");\n        }\n    }\n}\nmodule.exports = {\n    initialLsCache,\n    genLsCache,\n    levelMethods,\n    getLevel,\n    setLevel,\n    isLevelEnabled,\n    mappings,\n    levels,\n    assertNoLevelCollisions,\n    assertDefaultLevelFound\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/pino/lib/levels.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/pino/lib/meta.js":
/*!****************************************!*\
  !*** ../node_modules/pino/lib/meta.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { version } = __webpack_require__(/*! ../package.json */ \"(ssr)/../node_modules/pino/package.json\");\nmodule.exports = {\n    version\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL3Bpbm8vbGliL21ldGEuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNLEVBQUVBLE9BQU8sRUFBRSxHQUFHQyxtQkFBT0EsQ0FBQztBQUU1QkMsT0FBT0MsT0FBTyxHQUFHO0lBQUVIO0FBQVEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3Bpbm8vbGliL21ldGEuanM/OGNiZiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3QgeyB2ZXJzaW9uIH0gPSByZXF1aXJlKCcuLi9wYWNrYWdlLmpzb24nKVxuXG5tb2R1bGUuZXhwb3J0cyA9IHsgdmVyc2lvbiB9XG4iXSwibmFtZXMiOlsidmVyc2lvbiIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/pino/lib/meta.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/pino/lib/multistream.js":
/*!***********************************************!*\
  !*** ../node_modules/pino/lib/multistream.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst metadata = Symbol.for(\"pino.metadata\");\nconst { levels } = __webpack_require__(/*! ./levels */ \"(ssr)/../node_modules/pino/lib/levels.js\");\nconst defaultLevels = Object.create(levels);\ndefaultLevels.silent = Infinity;\nconst DEFAULT_INFO_LEVEL = levels.info;\nfunction multistream(streamsArray, opts) {\n    let counter = 0;\n    streamsArray = streamsArray || [];\n    opts = opts || {\n        dedupe: false\n    };\n    let levels = defaultLevels;\n    if (opts.levels && typeof opts.levels === \"object\") {\n        levels = opts.levels;\n    }\n    const res = {\n        write,\n        add,\n        flushSync,\n        end,\n        minLevel: 0,\n        streams: [],\n        clone,\n        [metadata]: true\n    };\n    if (Array.isArray(streamsArray)) {\n        streamsArray.forEach(add, res);\n    } else {\n        add.call(res, streamsArray);\n    }\n    // clean this object up\n    // or it will stay allocated forever\n    // as it is closed on the following closures\n    streamsArray = null;\n    return res;\n    // we can exit early because the streams are ordered by level\n    function write(data) {\n        let dest;\n        const level = this.lastLevel;\n        const { streams } = this;\n        let stream;\n        for(let i = 0; i < streams.length; i++){\n            dest = streams[i];\n            if (dest.level <= level) {\n                stream = dest.stream;\n                if (stream[metadata]) {\n                    const { lastTime, lastMsg, lastObj, lastLogger } = this;\n                    stream.lastLevel = level;\n                    stream.lastTime = lastTime;\n                    stream.lastMsg = lastMsg;\n                    stream.lastObj = lastObj;\n                    stream.lastLogger = lastLogger;\n                }\n                if (!opts.dedupe || dest.level === level) {\n                    stream.write(data);\n                }\n            } else {\n                break;\n            }\n        }\n    }\n    function flushSync() {\n        for (const { stream } of this.streams){\n            if (typeof stream.flushSync === \"function\") {\n                stream.flushSync();\n            }\n        }\n    }\n    function add(dest) {\n        if (!dest) {\n            return res;\n        }\n        // Check that dest implements either StreamEntry or DestinationStream\n        const isStream = typeof dest.write === \"function\" || dest.stream;\n        const stream_ = dest.write ? dest : dest.stream;\n        // This is necessary to provide a meaningful error message, otherwise it throws somewhere inside write()\n        if (!isStream) {\n            throw Error(\"stream object needs to implement either StreamEntry or DestinationStream interface\");\n        }\n        const { streams } = this;\n        let level;\n        if (typeof dest.levelVal === \"number\") {\n            level = dest.levelVal;\n        } else if (typeof dest.level === \"string\") {\n            level = levels[dest.level];\n        } else if (typeof dest.level === \"number\") {\n            level = dest.level;\n        } else {\n            level = DEFAULT_INFO_LEVEL;\n        }\n        const dest_ = {\n            stream: stream_,\n            level,\n            levelVal: undefined,\n            id: counter++\n        };\n        streams.unshift(dest_);\n        streams.sort(compareByLevel);\n        this.minLevel = streams[0].level;\n        return res;\n    }\n    function end() {\n        for (const { stream } of this.streams){\n            if (typeof stream.flushSync === \"function\") {\n                stream.flushSync();\n            }\n            stream.end();\n        }\n    }\n    function clone(level) {\n        const streams = new Array(this.streams.length);\n        for(let i = 0; i < streams.length; i++){\n            streams[i] = {\n                level: level,\n                stream: this.streams[i].stream\n            };\n        }\n        return {\n            write,\n            add,\n            minLevel: level,\n            streams,\n            clone,\n            flushSync,\n            [metadata]: true\n        };\n    }\n}\nfunction compareByLevel(a, b) {\n    return a.level - b.level;\n}\nmodule.exports = multistream;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/pino/lib/multistream.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/pino/lib/proto.js":
/*!*****************************************!*\
  !*** ../node_modules/pino/lib/proto.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n/* eslint no-prototype-builtins: 0 */ const { EventEmitter } = __webpack_require__(/*! events */ \"events\");\nconst { lsCacheSym, levelValSym, setLevelSym, getLevelSym, chindingsSym, parsedChindingsSym, mixinSym, asJsonSym, writeSym, mixinMergeStrategySym, timeSym, timeSliceIndexSym, streamSym, serializersSym, formattersSym, useOnlyCustomLevelsSym, needsMetadataGsym, redactFmtSym, stringifySym, formatOptsSym, stringifiersSym } = __webpack_require__(/*! ./symbols */ \"(ssr)/../node_modules/pino/lib/symbols.js\");\nconst { getLevel, setLevel, isLevelEnabled, mappings, initialLsCache, genLsCache, assertNoLevelCollisions } = __webpack_require__(/*! ./levels */ \"(ssr)/../node_modules/pino/lib/levels.js\");\nconst { asChindings, asJson, buildFormatters, stringify } = __webpack_require__(/*! ./tools */ \"(ssr)/../node_modules/pino/lib/tools.js\");\nconst { version } = __webpack_require__(/*! ./meta */ \"(ssr)/../node_modules/pino/lib/meta.js\");\nconst redaction = __webpack_require__(/*! ./redaction */ \"(ssr)/../node_modules/pino/lib/redaction.js\");\n// note: use of class is satirical\n// https://github.com/pinojs/pino/pull/433#pullrequestreview-127703127\nconst constructor = class Pino {\n};\nconst prototype = {\n    constructor,\n    child,\n    bindings,\n    setBindings,\n    flush,\n    isLevelEnabled,\n    version,\n    get level () {\n        return this[getLevelSym]();\n    },\n    set level (lvl){\n        this[setLevelSym](lvl);\n    },\n    get levelVal () {\n        return this[levelValSym];\n    },\n    set levelVal (n){\n        throw Error(\"levelVal is read-only\");\n    },\n    [lsCacheSym]: initialLsCache,\n    [writeSym]: write,\n    [asJsonSym]: asJson,\n    [getLevelSym]: getLevel,\n    [setLevelSym]: setLevel\n};\nObject.setPrototypeOf(prototype, EventEmitter.prototype);\n// exporting and consuming the prototype object using factory pattern fixes scoping issues with getters when serializing\nmodule.exports = function() {\n    return Object.create(prototype);\n};\nconst resetChildingsFormatter = (bindings)=>bindings;\nfunction child(bindings, options) {\n    if (!bindings) {\n        throw Error(\"missing bindings for child Pino\");\n    }\n    options = options || {} // default options to empty object\n    ;\n    const serializers = this[serializersSym];\n    const formatters = this[formattersSym];\n    const instance = Object.create(this);\n    if (options.hasOwnProperty(\"serializers\") === true) {\n        instance[serializersSym] = Object.create(null);\n        for(const k in serializers){\n            instance[serializersSym][k] = serializers[k];\n        }\n        const parentSymbols = Object.getOwnPropertySymbols(serializers);\n        /* eslint no-var: off */ for(var i = 0; i < parentSymbols.length; i++){\n            const ks = parentSymbols[i];\n            instance[serializersSym][ks] = serializers[ks];\n        }\n        for(const bk in options.serializers){\n            instance[serializersSym][bk] = options.serializers[bk];\n        }\n        const bindingsSymbols = Object.getOwnPropertySymbols(options.serializers);\n        for(var bi = 0; bi < bindingsSymbols.length; bi++){\n            const bks = bindingsSymbols[bi];\n            instance[serializersSym][bks] = options.serializers[bks];\n        }\n    } else instance[serializersSym] = serializers;\n    if (options.hasOwnProperty(\"formatters\")) {\n        const { level, bindings: chindings, log } = options.formatters;\n        instance[formattersSym] = buildFormatters(level || formatters.level, chindings || resetChildingsFormatter, log || formatters.log);\n    } else {\n        instance[formattersSym] = buildFormatters(formatters.level, resetChildingsFormatter, formatters.log);\n    }\n    if (options.hasOwnProperty(\"customLevels\") === true) {\n        assertNoLevelCollisions(this.levels, options.customLevels);\n        instance.levels = mappings(options.customLevels, instance[useOnlyCustomLevelsSym]);\n        genLsCache(instance);\n    }\n    // redact must place before asChindings and only replace if exist\n    if (typeof options.redact === \"object\" && options.redact !== null || Array.isArray(options.redact)) {\n        instance.redact = options.redact // replace redact directly\n        ;\n        const stringifiers = redaction(instance.redact, stringify);\n        const formatOpts = {\n            stringify: stringifiers[redactFmtSym]\n        };\n        instance[stringifySym] = stringify;\n        instance[stringifiersSym] = stringifiers;\n        instance[formatOptsSym] = formatOpts;\n    }\n    instance[chindingsSym] = asChindings(instance, bindings);\n    const childLevel = options.level || this.level;\n    instance[setLevelSym](childLevel);\n    return instance;\n}\nfunction bindings() {\n    const chindings = this[chindingsSym];\n    const chindingsJson = `{${chindings.substr(1)}}` // at least contains ,\"pid\":7068,\"hostname\":\"myMac\"\n    ;\n    const bindingsFromJson = JSON.parse(chindingsJson);\n    delete bindingsFromJson.pid;\n    delete bindingsFromJson.hostname;\n    return bindingsFromJson;\n}\nfunction setBindings(newBindings) {\n    const chindings = asChindings(this, newBindings);\n    this[chindingsSym] = chindings;\n    delete this[parsedChindingsSym];\n}\n/**\n * Default strategy for creating `mergeObject` from arguments and the result from `mixin()`.\n * Fields from `mergeObject` have higher priority in this strategy.\n *\n * @param {Object} mergeObject The object a user has supplied to the logging function.\n * @param {Object} mixinObject The result of the `mixin` method.\n * @return {Object}\n */ function defaultMixinMergeStrategy(mergeObject, mixinObject) {\n    return Object.assign(mixinObject, mergeObject);\n}\nfunction write(_obj, msg, num) {\n    const t = this[timeSym]();\n    const mixin = this[mixinSym];\n    const mixinMergeStrategy = this[mixinMergeStrategySym] || defaultMixinMergeStrategy;\n    let obj;\n    if (_obj === undefined || _obj === null) {\n        obj = {};\n    } else if (_obj instanceof Error) {\n        obj = {\n            err: _obj\n        };\n        if (msg === undefined) {\n            msg = _obj.message;\n        }\n    } else {\n        obj = _obj;\n        if (msg === undefined && _obj.err) {\n            msg = _obj.err.message;\n        }\n    }\n    if (mixin) {\n        obj = mixinMergeStrategy(obj, mixin(obj, num));\n    }\n    const s = this[asJsonSym](obj, msg, num, t);\n    const stream = this[streamSym];\n    if (stream[needsMetadataGsym] === true) {\n        stream.lastLevel = num;\n        stream.lastObj = obj;\n        stream.lastMsg = msg;\n        stream.lastTime = t.slice(this[timeSliceIndexSym]);\n        stream.lastLogger = this // for child loggers\n        ;\n    }\n    stream.write(s);\n}\nfunction noop() {}\nfunction flush() {\n    const stream = this[streamSym];\n    if (\"flush\" in stream) stream.flush(noop);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/pino/lib/proto.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/pino/lib/redaction.js":
/*!*********************************************!*\
  !*** ../node_modules/pino/lib/redaction.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst fastRedact = __webpack_require__(/*! fast-redact */ \"(ssr)/../node_modules/fast-redact/index.js\");\nconst { redactFmtSym, wildcardFirstSym } = __webpack_require__(/*! ./symbols */ \"(ssr)/../node_modules/pino/lib/symbols.js\");\nconst { rx, validator } = fastRedact;\nconst validate = validator({\n    ERR_PATHS_MUST_BE_STRINGS: ()=>\"pino – redacted paths must be strings\",\n    ERR_INVALID_PATH: (s)=>`pino – redact paths array contains an invalid path (${s})`\n});\nconst CENSOR = \"[Redacted]\";\nconst strict = false // TODO should this be configurable?\n;\nfunction redaction(opts, serialize) {\n    const { paths, censor } = handle(opts);\n    const shape = paths.reduce((o, str)=>{\n        rx.lastIndex = 0;\n        const first = rx.exec(str);\n        const next = rx.exec(str);\n        // ns is the top-level path segment, brackets + quoting removed.\n        let ns = first[1] !== undefined ? first[1].replace(/^(?:\"|'|`)(.*)(?:\"|'|`)$/, \"$1\") : first[0];\n        if (ns === \"*\") {\n            ns = wildcardFirstSym;\n        }\n        // top level key:\n        if (next === null) {\n            o[ns] = null;\n            return o;\n        }\n        // path with at least two segments:\n        // if ns is already redacted at the top level, ignore lower level redactions\n        if (o[ns] === null) {\n            return o;\n        }\n        const { index } = next;\n        const nextPath = `${str.substr(index, str.length - 1)}`;\n        o[ns] = o[ns] || [];\n        // shape is a mix of paths beginning with literal values and wildcard\n        // paths [ \"a.b.c\", \"*.b.z\" ] should reduce to a shape of\n        // { \"a\": [ \"b.c\", \"b.z\" ], *: [ \"b.z\" ] }\n        // note: \"b.z\" is in both \"a\" and * arrays because \"a\" matches the wildcard.\n        // (* entry has wildcardFirstSym as key)\n        if (ns !== wildcardFirstSym && o[ns].length === 0) {\n            // first time ns's get all '*' redactions so far\n            o[ns].push(...o[wildcardFirstSym] || []);\n        }\n        if (ns === wildcardFirstSym) {\n            // new * path gets added to all previously registered literal ns's.\n            Object.keys(o).forEach(function(k) {\n                if (o[k]) {\n                    o[k].push(nextPath);\n                }\n            });\n        }\n        o[ns].push(nextPath);\n        return o;\n    }, {});\n    // the redactor assigned to the format symbol key\n    // provides top level redaction for instances where\n    // an object is interpolated into the msg string\n    const result = {\n        [redactFmtSym]: fastRedact({\n            paths,\n            censor,\n            serialize,\n            strict\n        })\n    };\n    const topCensor = (...args)=>{\n        return typeof censor === \"function\" ? serialize(censor(...args)) : serialize(censor);\n    };\n    return [\n        ...Object.keys(shape),\n        ...Object.getOwnPropertySymbols(shape)\n    ].reduce((o, k)=>{\n        // top level key:\n        if (shape[k] === null) {\n            o[k] = (value)=>topCensor(value, [\n                    k\n                ]);\n        } else {\n            const wrappedCensor = typeof censor === \"function\" ? (value, path)=>{\n                return censor(value, [\n                    k,\n                    ...path\n                ]);\n            } : censor;\n            o[k] = fastRedact({\n                paths: shape[k],\n                censor: wrappedCensor,\n                serialize,\n                strict\n            });\n        }\n        return o;\n    }, result);\n}\nfunction handle(opts) {\n    if (Array.isArray(opts)) {\n        opts = {\n            paths: opts,\n            censor: CENSOR\n        };\n        validate(opts);\n        return opts;\n    }\n    let { paths, censor = CENSOR, remove } = opts;\n    if (Array.isArray(paths) === false) {\n        throw Error(\"pino – redact must contain an array of strings\");\n    }\n    if (remove === true) censor = undefined;\n    validate({\n        paths,\n        censor\n    });\n    return {\n        paths,\n        censor\n    };\n}\nmodule.exports = redaction;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL3Bpbm8vbGliL3JlZGFjdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE1BQU1BLGFBQWFDLG1CQUFPQSxDQUFDO0FBQzNCLE1BQU0sRUFBRUMsWUFBWSxFQUFFQyxnQkFBZ0IsRUFBRSxHQUFHRixtQkFBT0EsQ0FBQztBQUNuRCxNQUFNLEVBQUVHLEVBQUUsRUFBRUMsU0FBUyxFQUFFLEdBQUdMO0FBRTFCLE1BQU1NLFdBQVdELFVBQVU7SUFDekJFLDJCQUEyQixJQUFNO0lBQ2pDQyxrQkFBa0IsQ0FBQ0MsSUFBTSxDQUFDLG9EQUFvRCxFQUFFQSxFQUFFLENBQUMsQ0FBQztBQUN0RjtBQUVBLE1BQU1DLFNBQVM7QUFDZixNQUFNQyxTQUFTLE1BQU0sb0NBQW9DOztBQUV6RCxTQUFTQyxVQUFXQyxJQUFJLEVBQUVDLFNBQVM7SUFDakMsTUFBTSxFQUFFQyxLQUFLLEVBQUVDLE1BQU0sRUFBRSxHQUFHQyxPQUFPSjtJQUVqQyxNQUFNSyxRQUFRSCxNQUFNSSxNQUFNLENBQUMsQ0FBQ0MsR0FBR0M7UUFDN0JqQixHQUFHa0IsU0FBUyxHQUFHO1FBQ2YsTUFBTUMsUUFBUW5CLEdBQUdvQixJQUFJLENBQUNIO1FBQ3RCLE1BQU1JLE9BQU9yQixHQUFHb0IsSUFBSSxDQUFDSDtRQUVyQixnRUFBZ0U7UUFDaEUsSUFBSUssS0FBS0gsS0FBSyxDQUFDLEVBQUUsS0FBS0ksWUFDbEJKLEtBQUssQ0FBQyxFQUFFLENBQUNLLE9BQU8sQ0FBQyw0QkFBNEIsUUFDN0NMLEtBQUssQ0FBQyxFQUFFO1FBRVosSUFBSUcsT0FBTyxLQUFLO1lBQ2RBLEtBQUt2QjtRQUNQO1FBRUEsaUJBQWlCO1FBQ2pCLElBQUlzQixTQUFTLE1BQU07WUFDakJMLENBQUMsQ0FBQ00sR0FBRyxHQUFHO1lBQ1IsT0FBT047UUFDVDtRQUVBLG1DQUFtQztRQUNuQyw0RUFBNEU7UUFDNUUsSUFBSUEsQ0FBQyxDQUFDTSxHQUFHLEtBQUssTUFBTTtZQUNsQixPQUFPTjtRQUNUO1FBRUEsTUFBTSxFQUFFUyxLQUFLLEVBQUUsR0FBR0o7UUFDbEIsTUFBTUssV0FBVyxDQUFDLEVBQUVULElBQUlVLE1BQU0sQ0FBQ0YsT0FBT1IsSUFBSVcsTUFBTSxHQUFHLEdBQUcsQ0FBQztRQUV2RFosQ0FBQyxDQUFDTSxHQUFHLEdBQUdOLENBQUMsQ0FBQ00sR0FBRyxJQUFJLEVBQUU7UUFFbkIscUVBQXFFO1FBQ3JFLHlEQUF5RDtRQUN6RCwwQ0FBMEM7UUFDMUMsNEVBQTRFO1FBQzVFLHdDQUF3QztRQUN4QyxJQUFJQSxPQUFPdkIsb0JBQW9CaUIsQ0FBQyxDQUFDTSxHQUFHLENBQUNNLE1BQU0sS0FBSyxHQUFHO1lBQ2pELGdEQUFnRDtZQUNoRFosQ0FBQyxDQUFDTSxHQUFHLENBQUNPLElBQUksSUFBS2IsQ0FBQyxDQUFDakIsaUJBQWlCLElBQUksRUFBRTtRQUMxQztRQUVBLElBQUl1QixPQUFPdkIsa0JBQWtCO1lBQzNCLG1FQUFtRTtZQUNuRStCLE9BQU9DLElBQUksQ0FBQ2YsR0FBR2dCLE9BQU8sQ0FBQyxTQUFVQyxDQUFDO2dCQUNoQyxJQUFJakIsQ0FBQyxDQUFDaUIsRUFBRSxFQUFFO29CQUNSakIsQ0FBQyxDQUFDaUIsRUFBRSxDQUFDSixJQUFJLENBQUNIO2dCQUNaO1lBQ0Y7UUFDRjtRQUVBVixDQUFDLENBQUNNLEdBQUcsQ0FBQ08sSUFBSSxDQUFDSDtRQUNYLE9BQU9WO0lBQ1QsR0FBRyxDQUFDO0lBRUosaURBQWlEO0lBQ2pELG1EQUFtRDtJQUNuRCxnREFBZ0Q7SUFDaEQsTUFBTWtCLFNBQVM7UUFDYixDQUFDcEMsYUFBYSxFQUFFRixXQUFXO1lBQUVlO1lBQU9DO1lBQVFGO1lBQVdIO1FBQU87SUFDaEU7SUFFQSxNQUFNNEIsWUFBWSxDQUFDLEdBQUdDO1FBQ3BCLE9BQU8sT0FBT3hCLFdBQVcsYUFBYUYsVUFBVUUsVUFBVXdCLFNBQVMxQixVQUFVRTtJQUMvRTtJQUVBLE9BQU87V0FBSWtCLE9BQU9DLElBQUksQ0FBQ2pCO1dBQVdnQixPQUFPTyxxQkFBcUIsQ0FBQ3ZCO0tBQU8sQ0FBQ0MsTUFBTSxDQUFDLENBQUNDLEdBQUdpQjtRQUNoRixpQkFBaUI7UUFDakIsSUFBSW5CLEtBQUssQ0FBQ21CLEVBQUUsS0FBSyxNQUFNO1lBQ3JCakIsQ0FBQyxDQUFDaUIsRUFBRSxHQUFHLENBQUNLLFFBQVVILFVBQVVHLE9BQU87b0JBQUNMO2lCQUFFO1FBQ3hDLE9BQU87WUFDTCxNQUFNTSxnQkFBZ0IsT0FBTzNCLFdBQVcsYUFDcEMsQ0FBQzBCLE9BQU9FO2dCQUNOLE9BQU81QixPQUFPMEIsT0FBTztvQkFBQ0w7dUJBQU1PO2lCQUFLO1lBQ25DLElBQ0E1QjtZQUNKSSxDQUFDLENBQUNpQixFQUFFLEdBQUdyQyxXQUFXO2dCQUNoQmUsT0FBT0csS0FBSyxDQUFDbUIsRUFBRTtnQkFDZnJCLFFBQVEyQjtnQkFDUjdCO2dCQUNBSDtZQUNGO1FBQ0Y7UUFDQSxPQUFPUztJQUNULEdBQUdrQjtBQUNMO0FBRUEsU0FBU3JCLE9BQVFKLElBQUk7SUFDbkIsSUFBSWdDLE1BQU1DLE9BQU8sQ0FBQ2pDLE9BQU87UUFDdkJBLE9BQU87WUFBRUUsT0FBT0Y7WUFBTUcsUUFBUU47UUFBTztRQUNyQ0osU0FBU087UUFDVCxPQUFPQTtJQUNUO0lBQ0EsSUFBSSxFQUFFRSxLQUFLLEVBQUVDLFNBQVNOLE1BQU0sRUFBRXFDLE1BQU0sRUFBRSxHQUFHbEM7SUFDekMsSUFBSWdDLE1BQU1DLE9BQU8sQ0FBQy9CLFdBQVcsT0FBTztRQUFFLE1BQU1pQyxNQUFNO0lBQWtEO0lBQ3BHLElBQUlELFdBQVcsTUFBTS9CLFNBQVNXO0lBQzlCckIsU0FBUztRQUFFUztRQUFPQztJQUFPO0lBRXpCLE9BQU87UUFBRUQ7UUFBT0M7SUFBTztBQUN6QjtBQUVBaUMsT0FBT0MsT0FBTyxHQUFHdEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3Bpbm8vbGliL3JlZGFjdGlvbi5qcz8wNzIxIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5jb25zdCBmYXN0UmVkYWN0ID0gcmVxdWlyZSgnZmFzdC1yZWRhY3QnKVxuY29uc3QgeyByZWRhY3RGbXRTeW0sIHdpbGRjYXJkRmlyc3RTeW0gfSA9IHJlcXVpcmUoJy4vc3ltYm9scycpXG5jb25zdCB7IHJ4LCB2YWxpZGF0b3IgfSA9IGZhc3RSZWRhY3RcblxuY29uc3QgdmFsaWRhdGUgPSB2YWxpZGF0b3Ioe1xuICBFUlJfUEFUSFNfTVVTVF9CRV9TVFJJTkdTOiAoKSA9PiAncGlubyDigJMgcmVkYWN0ZWQgcGF0aHMgbXVzdCBiZSBzdHJpbmdzJyxcbiAgRVJSX0lOVkFMSURfUEFUSDogKHMpID0+IGBwaW5vIOKAkyByZWRhY3QgcGF0aHMgYXJyYXkgY29udGFpbnMgYW4gaW52YWxpZCBwYXRoICgke3N9KWBcbn0pXG5cbmNvbnN0IENFTlNPUiA9ICdbUmVkYWN0ZWRdJ1xuY29uc3Qgc3RyaWN0ID0gZmFsc2UgLy8gVE9ETyBzaG91bGQgdGhpcyBiZSBjb25maWd1cmFibGU/XG5cbmZ1bmN0aW9uIHJlZGFjdGlvbiAob3B0cywgc2VyaWFsaXplKSB7XG4gIGNvbnN0IHsgcGF0aHMsIGNlbnNvciB9ID0gaGFuZGxlKG9wdHMpXG5cbiAgY29uc3Qgc2hhcGUgPSBwYXRocy5yZWR1Y2UoKG8sIHN0cikgPT4ge1xuICAgIHJ4Lmxhc3RJbmRleCA9IDBcbiAgICBjb25zdCBmaXJzdCA9IHJ4LmV4ZWMoc3RyKVxuICAgIGNvbnN0IG5leHQgPSByeC5leGVjKHN0cilcblxuICAgIC8vIG5zIGlzIHRoZSB0b3AtbGV2ZWwgcGF0aCBzZWdtZW50LCBicmFja2V0cyArIHF1b3RpbmcgcmVtb3ZlZC5cbiAgICBsZXQgbnMgPSBmaXJzdFsxXSAhPT0gdW5kZWZpbmVkXG4gICAgICA/IGZpcnN0WzFdLnJlcGxhY2UoL14oPzpcInwnfGApKC4qKSg/OlwifCd8YCkkLywgJyQxJylcbiAgICAgIDogZmlyc3RbMF1cblxuICAgIGlmIChucyA9PT0gJyonKSB7XG4gICAgICBucyA9IHdpbGRjYXJkRmlyc3RTeW1cbiAgICB9XG5cbiAgICAvLyB0b3AgbGV2ZWwga2V5OlxuICAgIGlmIChuZXh0ID09PSBudWxsKSB7XG4gICAgICBvW25zXSA9IG51bGxcbiAgICAgIHJldHVybiBvXG4gICAgfVxuXG4gICAgLy8gcGF0aCB3aXRoIGF0IGxlYXN0IHR3byBzZWdtZW50czpcbiAgICAvLyBpZiBucyBpcyBhbHJlYWR5IHJlZGFjdGVkIGF0IHRoZSB0b3AgbGV2ZWwsIGlnbm9yZSBsb3dlciBsZXZlbCByZWRhY3Rpb25zXG4gICAgaWYgKG9bbnNdID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gb1xuICAgIH1cblxuICAgIGNvbnN0IHsgaW5kZXggfSA9IG5leHRcbiAgICBjb25zdCBuZXh0UGF0aCA9IGAke3N0ci5zdWJzdHIoaW5kZXgsIHN0ci5sZW5ndGggLSAxKX1gXG5cbiAgICBvW25zXSA9IG9bbnNdIHx8IFtdXG5cbiAgICAvLyBzaGFwZSBpcyBhIG1peCBvZiBwYXRocyBiZWdpbm5pbmcgd2l0aCBsaXRlcmFsIHZhbHVlcyBhbmQgd2lsZGNhcmRcbiAgICAvLyBwYXRocyBbIFwiYS5iLmNcIiwgXCIqLmIuelwiIF0gc2hvdWxkIHJlZHVjZSB0byBhIHNoYXBlIG9mXG4gICAgLy8geyBcImFcIjogWyBcImIuY1wiLCBcImIuelwiIF0sICo6IFsgXCJiLnpcIiBdIH1cbiAgICAvLyBub3RlOiBcImIuelwiIGlzIGluIGJvdGggXCJhXCIgYW5kICogYXJyYXlzIGJlY2F1c2UgXCJhXCIgbWF0Y2hlcyB0aGUgd2lsZGNhcmQuXG4gICAgLy8gKCogZW50cnkgaGFzIHdpbGRjYXJkRmlyc3RTeW0gYXMga2V5KVxuICAgIGlmIChucyAhPT0gd2lsZGNhcmRGaXJzdFN5bSAmJiBvW25zXS5sZW5ndGggPT09IDApIHtcbiAgICAgIC8vIGZpcnN0IHRpbWUgbnMncyBnZXQgYWxsICcqJyByZWRhY3Rpb25zIHNvIGZhclxuICAgICAgb1tuc10ucHVzaCguLi4ob1t3aWxkY2FyZEZpcnN0U3ltXSB8fCBbXSkpXG4gICAgfVxuXG4gICAgaWYgKG5zID09PSB3aWxkY2FyZEZpcnN0U3ltKSB7XG4gICAgICAvLyBuZXcgKiBwYXRoIGdldHMgYWRkZWQgdG8gYWxsIHByZXZpb3VzbHkgcmVnaXN0ZXJlZCBsaXRlcmFsIG5zJ3MuXG4gICAgICBPYmplY3Qua2V5cyhvKS5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7XG4gICAgICAgIGlmIChvW2tdKSB7XG4gICAgICAgICAgb1trXS5wdXNoKG5leHRQYXRoKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cblxuICAgIG9bbnNdLnB1c2gobmV4dFBhdGgpXG4gICAgcmV0dXJuIG9cbiAgfSwge30pXG5cbiAgLy8gdGhlIHJlZGFjdG9yIGFzc2lnbmVkIHRvIHRoZSBmb3JtYXQgc3ltYm9sIGtleVxuICAvLyBwcm92aWRlcyB0b3AgbGV2ZWwgcmVkYWN0aW9uIGZvciBpbnN0YW5jZXMgd2hlcmVcbiAgLy8gYW4gb2JqZWN0IGlzIGludGVycG9sYXRlZCBpbnRvIHRoZSBtc2cgc3RyaW5nXG4gIGNvbnN0IHJlc3VsdCA9IHtcbiAgICBbcmVkYWN0Rm10U3ltXTogZmFzdFJlZGFjdCh7IHBhdGhzLCBjZW5zb3IsIHNlcmlhbGl6ZSwgc3RyaWN0IH0pXG4gIH1cblxuICBjb25zdCB0b3BDZW5zb3IgPSAoLi4uYXJncykgPT4ge1xuICAgIHJldHVybiB0eXBlb2YgY2Vuc29yID09PSAnZnVuY3Rpb24nID8gc2VyaWFsaXplKGNlbnNvciguLi5hcmdzKSkgOiBzZXJpYWxpemUoY2Vuc29yKVxuICB9XG5cbiAgcmV0dXJuIFsuLi5PYmplY3Qua2V5cyhzaGFwZSksIC4uLk9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc2hhcGUpXS5yZWR1Y2UoKG8sIGspID0+IHtcbiAgICAvLyB0b3AgbGV2ZWwga2V5OlxuICAgIGlmIChzaGFwZVtrXSA9PT0gbnVsbCkge1xuICAgICAgb1trXSA9ICh2YWx1ZSkgPT4gdG9wQ2Vuc29yKHZhbHVlLCBba10pXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHdyYXBwZWRDZW5zb3IgPSB0eXBlb2YgY2Vuc29yID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gKHZhbHVlLCBwYXRoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gY2Vuc29yKHZhbHVlLCBbaywgLi4ucGF0aF0pXG4gICAgICAgICAgfVxuICAgICAgICA6IGNlbnNvclxuICAgICAgb1trXSA9IGZhc3RSZWRhY3Qoe1xuICAgICAgICBwYXRoczogc2hhcGVba10sXG4gICAgICAgIGNlbnNvcjogd3JhcHBlZENlbnNvcixcbiAgICAgICAgc2VyaWFsaXplLFxuICAgICAgICBzdHJpY3RcbiAgICAgIH0pXG4gICAgfVxuICAgIHJldHVybiBvXG4gIH0sIHJlc3VsdClcbn1cblxuZnVuY3Rpb24gaGFuZGxlIChvcHRzKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KG9wdHMpKSB7XG4gICAgb3B0cyA9IHsgcGF0aHM6IG9wdHMsIGNlbnNvcjogQ0VOU09SIH1cbiAgICB2YWxpZGF0ZShvcHRzKVxuICAgIHJldHVybiBvcHRzXG4gIH1cbiAgbGV0IHsgcGF0aHMsIGNlbnNvciA9IENFTlNPUiwgcmVtb3ZlIH0gPSBvcHRzXG4gIGlmIChBcnJheS5pc0FycmF5KHBhdGhzKSA9PT0gZmFsc2UpIHsgdGhyb3cgRXJyb3IoJ3Bpbm8g4oCTIHJlZGFjdCBtdXN0IGNvbnRhaW4gYW4gYXJyYXkgb2Ygc3RyaW5ncycpIH1cbiAgaWYgKHJlbW92ZSA9PT0gdHJ1ZSkgY2Vuc29yID0gdW5kZWZpbmVkXG4gIHZhbGlkYXRlKHsgcGF0aHMsIGNlbnNvciB9KVxuXG4gIHJldHVybiB7IHBhdGhzLCBjZW5zb3IgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlZGFjdGlvblxuIl0sIm5hbWVzIjpbImZhc3RSZWRhY3QiLCJyZXF1aXJlIiwicmVkYWN0Rm10U3ltIiwid2lsZGNhcmRGaXJzdFN5bSIsInJ4IiwidmFsaWRhdG9yIiwidmFsaWRhdGUiLCJFUlJfUEFUSFNfTVVTVF9CRV9TVFJJTkdTIiwiRVJSX0lOVkFMSURfUEFUSCIsInMiLCJDRU5TT1IiLCJzdHJpY3QiLCJyZWRhY3Rpb24iLCJvcHRzIiwic2VyaWFsaXplIiwicGF0aHMiLCJjZW5zb3IiLCJoYW5kbGUiLCJzaGFwZSIsInJlZHVjZSIsIm8iLCJzdHIiLCJsYXN0SW5kZXgiLCJmaXJzdCIsImV4ZWMiLCJuZXh0IiwibnMiLCJ1bmRlZmluZWQiLCJyZXBsYWNlIiwiaW5kZXgiLCJuZXh0UGF0aCIsInN1YnN0ciIsImxlbmd0aCIsInB1c2giLCJPYmplY3QiLCJrZXlzIiwiZm9yRWFjaCIsImsiLCJyZXN1bHQiLCJ0b3BDZW5zb3IiLCJhcmdzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwidmFsdWUiLCJ3cmFwcGVkQ2Vuc29yIiwicGF0aCIsIkFycmF5IiwiaXNBcnJheSIsInJlbW92ZSIsIkVycm9yIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/pino/lib/redaction.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/pino/lib/symbols.js":
/*!*******************************************!*\
  !*** ../node_modules/pino/lib/symbols.js ***!
  \*******************************************/
/***/ ((module) => {

eval("\nconst setLevelSym = Symbol(\"pino.setLevel\");\nconst getLevelSym = Symbol(\"pino.getLevel\");\nconst levelValSym = Symbol(\"pino.levelVal\");\nconst useLevelLabelsSym = Symbol(\"pino.useLevelLabels\");\nconst useOnlyCustomLevelsSym = Symbol(\"pino.useOnlyCustomLevels\");\nconst mixinSym = Symbol(\"pino.mixin\");\nconst lsCacheSym = Symbol(\"pino.lsCache\");\nconst chindingsSym = Symbol(\"pino.chindings\");\nconst parsedChindingsSym = Symbol(\"pino.parsedChindings\");\nconst asJsonSym = Symbol(\"pino.asJson\");\nconst writeSym = Symbol(\"pino.write\");\nconst redactFmtSym = Symbol(\"pino.redactFmt\");\nconst timeSym = Symbol(\"pino.time\");\nconst timeSliceIndexSym = Symbol(\"pino.timeSliceIndex\");\nconst streamSym = Symbol(\"pino.stream\");\nconst stringifySym = Symbol(\"pino.stringify\");\nconst stringifySafeSym = Symbol(\"pino.stringifySafe\");\nconst stringifiersSym = Symbol(\"pino.stringifiers\");\nconst endSym = Symbol(\"pino.end\");\nconst formatOptsSym = Symbol(\"pino.formatOpts\");\nconst messageKeySym = Symbol(\"pino.messageKey\");\nconst nestedKeySym = Symbol(\"pino.nestedKey\");\nconst nestedKeyStrSym = Symbol(\"pino.nestedKeyStr\");\nconst mixinMergeStrategySym = Symbol(\"pino.mixinMergeStrategy\");\nconst wildcardFirstSym = Symbol(\"pino.wildcardFirst\");\n// public symbols, no need to use the same pino\n// version for these\nconst serializersSym = Symbol.for(\"pino.serializers\");\nconst formattersSym = Symbol.for(\"pino.formatters\");\nconst hooksSym = Symbol.for(\"pino.hooks\");\nconst needsMetadataGsym = Symbol.for(\"pino.metadata\");\nmodule.exports = {\n    setLevelSym,\n    getLevelSym,\n    levelValSym,\n    useLevelLabelsSym,\n    mixinSym,\n    lsCacheSym,\n    chindingsSym,\n    parsedChindingsSym,\n    asJsonSym,\n    writeSym,\n    serializersSym,\n    redactFmtSym,\n    timeSym,\n    timeSliceIndexSym,\n    streamSym,\n    stringifySym,\n    stringifySafeSym,\n    stringifiersSym,\n    endSym,\n    formatOptsSym,\n    messageKeySym,\n    nestedKeySym,\n    wildcardFirstSym,\n    needsMetadataGsym,\n    useOnlyCustomLevelsSym,\n    formattersSym,\n    hooksSym,\n    nestedKeyStrSym,\n    mixinMergeStrategySym\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL3Bpbm8vbGliL3N5bWJvbHMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNQSxjQUFjQyxPQUFPO0FBQzNCLE1BQU1DLGNBQWNELE9BQU87QUFDM0IsTUFBTUUsY0FBY0YsT0FBTztBQUMzQixNQUFNRyxvQkFBb0JILE9BQU87QUFDakMsTUFBTUkseUJBQXlCSixPQUFPO0FBQ3RDLE1BQU1LLFdBQVdMLE9BQU87QUFFeEIsTUFBTU0sYUFBYU4sT0FBTztBQUMxQixNQUFNTyxlQUFlUCxPQUFPO0FBQzVCLE1BQU1RLHFCQUFxQlIsT0FBTztBQUVsQyxNQUFNUyxZQUFZVCxPQUFPO0FBQ3pCLE1BQU1VLFdBQVdWLE9BQU87QUFDeEIsTUFBTVcsZUFBZVgsT0FBTztBQUU1QixNQUFNWSxVQUFVWixPQUFPO0FBQ3ZCLE1BQU1hLG9CQUFvQmIsT0FBTztBQUNqQyxNQUFNYyxZQUFZZCxPQUFPO0FBQ3pCLE1BQU1lLGVBQWVmLE9BQU87QUFDNUIsTUFBTWdCLG1CQUFtQmhCLE9BQU87QUFDaEMsTUFBTWlCLGtCQUFrQmpCLE9BQU87QUFDL0IsTUFBTWtCLFNBQVNsQixPQUFPO0FBQ3RCLE1BQU1tQixnQkFBZ0JuQixPQUFPO0FBQzdCLE1BQU1vQixnQkFBZ0JwQixPQUFPO0FBQzdCLE1BQU1xQixlQUFlckIsT0FBTztBQUM1QixNQUFNc0Isa0JBQWtCdEIsT0FBTztBQUMvQixNQUFNdUIsd0JBQXdCdkIsT0FBTztBQUVyQyxNQUFNd0IsbUJBQW1CeEIsT0FBTztBQUVoQywrQ0FBK0M7QUFDL0Msb0JBQW9CO0FBQ3BCLE1BQU15QixpQkFBaUJ6QixPQUFPMEIsR0FBRyxDQUFDO0FBQ2xDLE1BQU1DLGdCQUFnQjNCLE9BQU8wQixHQUFHLENBQUM7QUFDakMsTUFBTUUsV0FBVzVCLE9BQU8wQixHQUFHLENBQUM7QUFDNUIsTUFBTUcsb0JBQW9CN0IsT0FBTzBCLEdBQUcsQ0FBQztBQUVyQ0ksT0FBT0MsT0FBTyxHQUFHO0lBQ2ZoQztJQUNBRTtJQUNBQztJQUNBQztJQUNBRTtJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBZTtJQUNBZDtJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBRztJQUNBSztJQUNBekI7SUFDQXVCO0lBQ0FDO0lBQ0FOO0lBQ0FDO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3Bpbm8vbGliL3N5bWJvbHMuanM/NGUyZCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3Qgc2V0TGV2ZWxTeW0gPSBTeW1ib2woJ3Bpbm8uc2V0TGV2ZWwnKVxuY29uc3QgZ2V0TGV2ZWxTeW0gPSBTeW1ib2woJ3Bpbm8uZ2V0TGV2ZWwnKVxuY29uc3QgbGV2ZWxWYWxTeW0gPSBTeW1ib2woJ3Bpbm8ubGV2ZWxWYWwnKVxuY29uc3QgdXNlTGV2ZWxMYWJlbHNTeW0gPSBTeW1ib2woJ3Bpbm8udXNlTGV2ZWxMYWJlbHMnKVxuY29uc3QgdXNlT25seUN1c3RvbUxldmVsc1N5bSA9IFN5bWJvbCgncGluby51c2VPbmx5Q3VzdG9tTGV2ZWxzJylcbmNvbnN0IG1peGluU3ltID0gU3ltYm9sKCdwaW5vLm1peGluJylcblxuY29uc3QgbHNDYWNoZVN5bSA9IFN5bWJvbCgncGluby5sc0NhY2hlJylcbmNvbnN0IGNoaW5kaW5nc1N5bSA9IFN5bWJvbCgncGluby5jaGluZGluZ3MnKVxuY29uc3QgcGFyc2VkQ2hpbmRpbmdzU3ltID0gU3ltYm9sKCdwaW5vLnBhcnNlZENoaW5kaW5ncycpXG5cbmNvbnN0IGFzSnNvblN5bSA9IFN5bWJvbCgncGluby5hc0pzb24nKVxuY29uc3Qgd3JpdGVTeW0gPSBTeW1ib2woJ3Bpbm8ud3JpdGUnKVxuY29uc3QgcmVkYWN0Rm10U3ltID0gU3ltYm9sKCdwaW5vLnJlZGFjdEZtdCcpXG5cbmNvbnN0IHRpbWVTeW0gPSBTeW1ib2woJ3Bpbm8udGltZScpXG5jb25zdCB0aW1lU2xpY2VJbmRleFN5bSA9IFN5bWJvbCgncGluby50aW1lU2xpY2VJbmRleCcpXG5jb25zdCBzdHJlYW1TeW0gPSBTeW1ib2woJ3Bpbm8uc3RyZWFtJylcbmNvbnN0IHN0cmluZ2lmeVN5bSA9IFN5bWJvbCgncGluby5zdHJpbmdpZnknKVxuY29uc3Qgc3RyaW5naWZ5U2FmZVN5bSA9IFN5bWJvbCgncGluby5zdHJpbmdpZnlTYWZlJylcbmNvbnN0IHN0cmluZ2lmaWVyc1N5bSA9IFN5bWJvbCgncGluby5zdHJpbmdpZmllcnMnKVxuY29uc3QgZW5kU3ltID0gU3ltYm9sKCdwaW5vLmVuZCcpXG5jb25zdCBmb3JtYXRPcHRzU3ltID0gU3ltYm9sKCdwaW5vLmZvcm1hdE9wdHMnKVxuY29uc3QgbWVzc2FnZUtleVN5bSA9IFN5bWJvbCgncGluby5tZXNzYWdlS2V5JylcbmNvbnN0IG5lc3RlZEtleVN5bSA9IFN5bWJvbCgncGluby5uZXN0ZWRLZXknKVxuY29uc3QgbmVzdGVkS2V5U3RyU3ltID0gU3ltYm9sKCdwaW5vLm5lc3RlZEtleVN0cicpXG5jb25zdCBtaXhpbk1lcmdlU3RyYXRlZ3lTeW0gPSBTeW1ib2woJ3Bpbm8ubWl4aW5NZXJnZVN0cmF0ZWd5JylcblxuY29uc3Qgd2lsZGNhcmRGaXJzdFN5bSA9IFN5bWJvbCgncGluby53aWxkY2FyZEZpcnN0JylcblxuLy8gcHVibGljIHN5bWJvbHMsIG5vIG5lZWQgdG8gdXNlIHRoZSBzYW1lIHBpbm9cbi8vIHZlcnNpb24gZm9yIHRoZXNlXG5jb25zdCBzZXJpYWxpemVyc1N5bSA9IFN5bWJvbC5mb3IoJ3Bpbm8uc2VyaWFsaXplcnMnKVxuY29uc3QgZm9ybWF0dGVyc1N5bSA9IFN5bWJvbC5mb3IoJ3Bpbm8uZm9ybWF0dGVycycpXG5jb25zdCBob29rc1N5bSA9IFN5bWJvbC5mb3IoJ3Bpbm8uaG9va3MnKVxuY29uc3QgbmVlZHNNZXRhZGF0YUdzeW0gPSBTeW1ib2wuZm9yKCdwaW5vLm1ldGFkYXRhJylcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldExldmVsU3ltLFxuICBnZXRMZXZlbFN5bSxcbiAgbGV2ZWxWYWxTeW0sXG4gIHVzZUxldmVsTGFiZWxzU3ltLFxuICBtaXhpblN5bSxcbiAgbHNDYWNoZVN5bSxcbiAgY2hpbmRpbmdzU3ltLFxuICBwYXJzZWRDaGluZGluZ3NTeW0sXG4gIGFzSnNvblN5bSxcbiAgd3JpdGVTeW0sXG4gIHNlcmlhbGl6ZXJzU3ltLFxuICByZWRhY3RGbXRTeW0sXG4gIHRpbWVTeW0sXG4gIHRpbWVTbGljZUluZGV4U3ltLFxuICBzdHJlYW1TeW0sXG4gIHN0cmluZ2lmeVN5bSxcbiAgc3RyaW5naWZ5U2FmZVN5bSxcbiAgc3RyaW5naWZpZXJzU3ltLFxuICBlbmRTeW0sXG4gIGZvcm1hdE9wdHNTeW0sXG4gIG1lc3NhZ2VLZXlTeW0sXG4gIG5lc3RlZEtleVN5bSxcbiAgd2lsZGNhcmRGaXJzdFN5bSxcbiAgbmVlZHNNZXRhZGF0YUdzeW0sXG4gIHVzZU9ubHlDdXN0b21MZXZlbHNTeW0sXG4gIGZvcm1hdHRlcnNTeW0sXG4gIGhvb2tzU3ltLFxuICBuZXN0ZWRLZXlTdHJTeW0sXG4gIG1peGluTWVyZ2VTdHJhdGVneVN5bVxufVxuIl0sIm5hbWVzIjpbInNldExldmVsU3ltIiwiU3ltYm9sIiwiZ2V0TGV2ZWxTeW0iLCJsZXZlbFZhbFN5bSIsInVzZUxldmVsTGFiZWxzU3ltIiwidXNlT25seUN1c3RvbUxldmVsc1N5bSIsIm1peGluU3ltIiwibHNDYWNoZVN5bSIsImNoaW5kaW5nc1N5bSIsInBhcnNlZENoaW5kaW5nc1N5bSIsImFzSnNvblN5bSIsIndyaXRlU3ltIiwicmVkYWN0Rm10U3ltIiwidGltZVN5bSIsInRpbWVTbGljZUluZGV4U3ltIiwic3RyZWFtU3ltIiwic3RyaW5naWZ5U3ltIiwic3RyaW5naWZ5U2FmZVN5bSIsInN0cmluZ2lmaWVyc1N5bSIsImVuZFN5bSIsImZvcm1hdE9wdHNTeW0iLCJtZXNzYWdlS2V5U3ltIiwibmVzdGVkS2V5U3ltIiwibmVzdGVkS2V5U3RyU3ltIiwibWl4aW5NZXJnZVN0cmF0ZWd5U3ltIiwid2lsZGNhcmRGaXJzdFN5bSIsInNlcmlhbGl6ZXJzU3ltIiwiZm9yIiwiZm9ybWF0dGVyc1N5bSIsImhvb2tzU3ltIiwibmVlZHNNZXRhZGF0YUdzeW0iLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/pino/lib/symbols.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/pino/lib/time.js":
/*!****************************************!*\
  !*** ../node_modules/pino/lib/time.js ***!
  \****************************************/
/***/ ((module) => {

eval("\nconst nullTime = ()=>\"\";\nconst epochTime = ()=>`,\"time\":${Date.now()}`;\nconst unixTime = ()=>`,\"time\":${Math.round(Date.now() / 1000.0)}`;\nconst isoTime = ()=>`,\"time\":\"${new Date(Date.now()).toISOString()}\"` // using Date.now() for testability\n;\nmodule.exports = {\n    nullTime,\n    epochTime,\n    unixTime,\n    isoTime\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL3Bpbm8vbGliL3RpbWUuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNQSxXQUFXLElBQU07QUFFdkIsTUFBTUMsWUFBWSxJQUFNLENBQUMsUUFBUSxFQUFFQyxLQUFLQyxHQUFHLEdBQUcsQ0FBQztBQUUvQyxNQUFNQyxXQUFXLElBQU0sQ0FBQyxRQUFRLEVBQUVDLEtBQUtDLEtBQUssQ0FBQ0osS0FBS0MsR0FBRyxLQUFLLFFBQVEsQ0FBQztBQUVuRSxNQUFNSSxVQUFVLElBQU0sQ0FBQyxTQUFTLEVBQUUsSUFBSUwsS0FBS0EsS0FBS0MsR0FBRyxJQUFJSyxXQUFXLEdBQUcsQ0FBQyxDQUFDLENBQUMsbUNBQW1DOztBQUUzR0MsT0FBT0MsT0FBTyxHQUFHO0lBQUVWO0lBQVVDO0lBQVdHO0lBQVVHO0FBQVEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3Bpbm8vbGliL3RpbWUuanM/N2ViMSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3QgbnVsbFRpbWUgPSAoKSA9PiAnJ1xuXG5jb25zdCBlcG9jaFRpbWUgPSAoKSA9PiBgLFwidGltZVwiOiR7RGF0ZS5ub3coKX1gXG5cbmNvbnN0IHVuaXhUaW1lID0gKCkgPT4gYCxcInRpbWVcIjoke01hdGgucm91bmQoRGF0ZS5ub3coKSAvIDEwMDAuMCl9YFxuXG5jb25zdCBpc29UaW1lID0gKCkgPT4gYCxcInRpbWVcIjpcIiR7bmV3IERhdGUoRGF0ZS5ub3coKSkudG9JU09TdHJpbmcoKX1cImAgLy8gdXNpbmcgRGF0ZS5ub3coKSBmb3IgdGVzdGFiaWxpdHlcblxubW9kdWxlLmV4cG9ydHMgPSB7IG51bGxUaW1lLCBlcG9jaFRpbWUsIHVuaXhUaW1lLCBpc29UaW1lIH1cbiJdLCJuYW1lcyI6WyJudWxsVGltZSIsImVwb2NoVGltZSIsIkRhdGUiLCJub3ciLCJ1bml4VGltZSIsIk1hdGgiLCJyb3VuZCIsImlzb1RpbWUiLCJ0b0lTT1N0cmluZyIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/pino/lib/time.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/pino/lib/tools.js":
/*!*****************************************!*\
  !*** ../node_modules/pino/lib/tools.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n/* eslint no-prototype-builtins: 0 */ const format = __webpack_require__(/*! quick-format-unescaped */ \"(ssr)/../node_modules/quick-format-unescaped/index.js\");\nconst { mapHttpRequest, mapHttpResponse } = __webpack_require__(/*! pino-std-serializers */ \"(ssr)/../node_modules/pino-std-serializers/index.js\");\nconst SonicBoom = __webpack_require__(/*! sonic-boom */ \"(ssr)/../node_modules/sonic-boom/index.js\");\nconst warning = __webpack_require__(/*! ./deprecations */ \"(ssr)/../node_modules/pino/lib/deprecations.js\");\nconst { lsCacheSym, chindingsSym, parsedChindingsSym, writeSym, serializersSym, formatOptsSym, endSym, stringifiersSym, stringifySym, stringifySafeSym, wildcardFirstSym, needsMetadataGsym, redactFmtSym, streamSym, nestedKeySym, formattersSym, messageKeySym, nestedKeyStrSym } = __webpack_require__(/*! ./symbols */ \"(ssr)/../node_modules/pino/lib/symbols.js\");\nconst { isMainThread } = __webpack_require__(/*! worker_threads */ \"worker_threads\");\nconst transport = __webpack_require__(/*! ./transport */ \"(ssr)/../node_modules/pino/lib/transport.js\");\nfunction noop() {}\nfunction genLog(level, hook) {\n    if (!hook) return LOG;\n    return function hookWrappedLog(...args) {\n        hook.call(this, args, LOG, level);\n    };\n    function LOG(o, ...n) {\n        if (typeof o === \"object\") {\n            let msg = o;\n            if (o !== null) {\n                if (o.method && o.headers && o.socket) {\n                    o = mapHttpRequest(o);\n                } else if (typeof o.setHeader === \"function\") {\n                    o = mapHttpResponse(o);\n                }\n            }\n            let formatParams;\n            if (msg === null && n.length === 0) {\n                formatParams = [\n                    null\n                ];\n            } else {\n                msg = n.shift();\n                formatParams = n;\n            }\n            this[writeSym](o, format(msg, formatParams, this[formatOptsSym]), level);\n        } else {\n            this[writeSym](null, format(o, n, this[formatOptsSym]), level);\n        }\n    }\n}\n// magically escape strings for json\n// relying on their charCodeAt\n// everything below 32 needs JSON.stringify()\n// 34 and 92 happens all the time, so we\n// have a fast case for them\nfunction asString(str) {\n    let result = \"\";\n    let last = 0;\n    let found = false;\n    let point = 255;\n    const l = str.length;\n    if (l > 100) {\n        return JSON.stringify(str);\n    }\n    for(var i = 0; i < l && point >= 32; i++){\n        point = str.charCodeAt(i);\n        if (point === 34 || point === 92) {\n            result += str.slice(last, i) + \"\\\\\";\n            last = i;\n            found = true;\n        }\n    }\n    if (!found) {\n        result = str;\n    } else {\n        result += str.slice(last);\n    }\n    return point < 32 ? JSON.stringify(str) : '\"' + result + '\"';\n}\nfunction asJson(obj, msg, num, time) {\n    const stringify = this[stringifySym];\n    const stringifySafe = this[stringifySafeSym];\n    const stringifiers = this[stringifiersSym];\n    const end = this[endSym];\n    const chindings = this[chindingsSym];\n    const serializers = this[serializersSym];\n    const formatters = this[formattersSym];\n    const messageKey = this[messageKeySym];\n    let data = this[lsCacheSym][num] + time;\n    // we need the child bindings added to the output first so instance logged\n    // objects can take precedence when JSON.parse-ing the resulting log line\n    data = data + chindings;\n    let value;\n    if (formatters.log) {\n        obj = formatters.log(obj);\n    }\n    const wildcardStringifier = stringifiers[wildcardFirstSym];\n    let propStr = \"\";\n    for(const key in obj){\n        value = obj[key];\n        if (Object.prototype.hasOwnProperty.call(obj, key) && value !== undefined) {\n            value = serializers[key] ? serializers[key](value) : value;\n            const stringifier = stringifiers[key] || wildcardStringifier;\n            switch(typeof value){\n                case \"undefined\":\n                case \"function\":\n                    continue;\n                case \"number\":\n                    /* eslint no-fallthrough: \"off\" */ if (Number.isFinite(value) === false) {\n                        value = null;\n                    }\n                // this case explicitly falls through to the next one\n                case \"boolean\":\n                    if (stringifier) value = stringifier(value);\n                    break;\n                case \"string\":\n                    value = (stringifier || asString)(value);\n                    break;\n                default:\n                    value = (stringifier || stringify)(value, stringifySafe);\n            }\n            if (value === undefined) continue;\n            propStr += ',\"' + key + '\":' + value;\n        }\n    }\n    let msgStr = \"\";\n    if (msg !== undefined) {\n        value = serializers[messageKey] ? serializers[messageKey](msg) : msg;\n        const stringifier = stringifiers[messageKey] || wildcardStringifier;\n        switch(typeof value){\n            case \"function\":\n                break;\n            case \"number\":\n                /* eslint no-fallthrough: \"off\" */ if (Number.isFinite(value) === false) {\n                    value = null;\n                }\n            // this case explicitly falls through to the next one\n            case \"boolean\":\n                if (stringifier) value = stringifier(value);\n                msgStr = ',\"' + messageKey + '\":' + value;\n                break;\n            case \"string\":\n                value = (stringifier || asString)(value);\n                msgStr = ',\"' + messageKey + '\":' + value;\n                break;\n            default:\n                value = (stringifier || stringify)(value, stringifySafe);\n                msgStr = ',\"' + messageKey + '\":' + value;\n        }\n    }\n    if (this[nestedKeySym] && propStr) {\n        // place all the obj properties under the specified key\n        // the nested key is already formatted from the constructor\n        return data + this[nestedKeyStrSym] + propStr.slice(1) + \"}\" + msgStr + end;\n    } else {\n        return data + propStr + msgStr + end;\n    }\n}\nfunction asChindings(instance, bindings) {\n    let value;\n    let data = instance[chindingsSym];\n    const stringify = instance[stringifySym];\n    const stringifySafe = instance[stringifySafeSym];\n    const stringifiers = instance[stringifiersSym];\n    const wildcardStringifier = stringifiers[wildcardFirstSym];\n    const serializers = instance[serializersSym];\n    const formatter = instance[formattersSym].bindings;\n    bindings = formatter(bindings);\n    for(const key in bindings){\n        value = bindings[key];\n        const valid = key !== \"level\" && key !== \"serializers\" && key !== \"formatters\" && key !== \"customLevels\" && bindings.hasOwnProperty(key) && value !== undefined;\n        if (valid === true) {\n            value = serializers[key] ? serializers[key](value) : value;\n            value = (stringifiers[key] || wildcardStringifier || stringify)(value, stringifySafe);\n            if (value === undefined) continue;\n            data += ',\"' + key + '\":' + value;\n        }\n    }\n    return data;\n}\nfunction getPrettyStream(opts, prettifier, dest, instance) {\n    if (prettifier && typeof prettifier === \"function\") {\n        prettifier = prettifier.bind(instance);\n        return prettifierMetaWrapper(prettifier(opts), dest, opts);\n    }\n    try {\n        const prettyFactory = Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'pino-pretty'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }());\n        prettyFactory.asMetaWrapper = prettifierMetaWrapper;\n        return prettifierMetaWrapper(prettyFactory(opts), dest, opts);\n    } catch (e) {\n        if (e.message.startsWith(\"Cannot find module 'pino-pretty'\")) {\n            throw Error(\"Missing `pino-pretty` module: `pino-pretty` must be installed separately\");\n        }\n        ;\n        throw e;\n    }\n}\nfunction prettifierMetaWrapper(pretty, dest, opts) {\n    opts = Object.assign({\n        suppressFlushSyncWarning: false\n    }, opts);\n    let warned = false;\n    return {\n        [needsMetadataGsym]: true,\n        lastLevel: 0,\n        lastMsg: null,\n        lastObj: null,\n        lastLogger: null,\n        flushSync () {\n            if (opts.suppressFlushSyncWarning || warned) {\n                return;\n            }\n            warned = true;\n            setMetadataProps(dest, this);\n            dest.write(pretty(Object.assign({\n                level: 40,\n                msg: \"pino.final with prettyPrint does not support flushing\",\n                time: Date.now()\n            }, this.chindings())));\n        },\n        chindings () {\n            const lastLogger = this.lastLogger;\n            let chindings = null;\n            // protection against flushSync being called before logging\n            // anything\n            if (!lastLogger) {\n                return null;\n            }\n            if (lastLogger.hasOwnProperty(parsedChindingsSym)) {\n                chindings = lastLogger[parsedChindingsSym];\n            } else {\n                chindings = JSON.parse(\"{\" + lastLogger[chindingsSym].substr(1) + \"}\");\n                lastLogger[parsedChindingsSym] = chindings;\n            }\n            return chindings;\n        },\n        write (chunk) {\n            const lastLogger = this.lastLogger;\n            const chindings = this.chindings();\n            let time = this.lastTime;\n            /* istanbul ignore next */ if (typeof time === \"number\") {\n            // do nothing!\n            } else if (time.match(/^\\d+/)) {\n                time = parseInt(time);\n            } else {\n                time = time.slice(1, -1);\n            }\n            const lastObj = this.lastObj;\n            const lastMsg = this.lastMsg;\n            const errorProps = null;\n            const formatters = lastLogger[formattersSym];\n            const formattedObj = formatters.log ? formatters.log(lastObj) : lastObj;\n            const messageKey = lastLogger[messageKeySym];\n            if (lastMsg && formattedObj && !Object.prototype.hasOwnProperty.call(formattedObj, messageKey)) {\n                formattedObj[messageKey] = lastMsg;\n            }\n            const obj = Object.assign({\n                level: this.lastLevel,\n                time\n            }, formattedObj, errorProps);\n            const serializers = lastLogger[serializersSym];\n            const keys = Object.keys(serializers);\n            for(var i = 0; i < keys.length; i++){\n                const key = keys[i];\n                if (obj[key] !== undefined) {\n                    obj[key] = serializers[key](obj[key]);\n                }\n            }\n            for(const key in chindings){\n                if (!obj.hasOwnProperty(key)) {\n                    obj[key] = chindings[key];\n                }\n            }\n            const stringifiers = lastLogger[stringifiersSym];\n            const redact = stringifiers[redactFmtSym];\n            const formatted = pretty(typeof redact === \"function\" ? redact(obj) : obj);\n            if (formatted === undefined) return;\n            setMetadataProps(dest, this);\n            dest.write(formatted);\n        }\n    };\n}\nfunction hasBeenTampered(stream) {\n    return stream.write !== stream.constructor.prototype.write;\n}\nfunction buildSafeSonicBoom(opts) {\n    const stream = new SonicBoom(opts);\n    stream.on(\"error\", filterBrokenPipe);\n    // if we are sync: false, we must flush on exit\n    if (!opts.sync && isMainThread) {\n        setupOnExit(stream);\n    }\n    return stream;\n    function filterBrokenPipe(err) {\n        // TODO verify on Windows\n        if (err.code === \"EPIPE\") {\n            // If we get EPIPE, we should stop logging here\n            // however we have no control to the consumer of\n            // SonicBoom, so we just overwrite the write method\n            stream.write = noop;\n            stream.end = noop;\n            stream.flushSync = noop;\n            stream.destroy = noop;\n            return;\n        }\n        stream.removeListener(\"error\", filterBrokenPipe);\n        stream.emit(\"error\", err);\n    }\n}\nfunction setupOnExit(stream) {\n    /* istanbul ignore next */ if (global.WeakRef && global.WeakMap && global.FinalizationRegistry) {\n        // This is leak free, it does not leave event handlers\n        const onExit = __webpack_require__(/*! on-exit-leak-free */ \"(ssr)/../node_modules/on-exit-leak-free/index.js\");\n        onExit.register(stream, autoEnd);\n        stream.on(\"close\", function() {\n            onExit.unregister(stream);\n        });\n    }\n}\nfunction autoEnd(stream, eventName) {\n    // This check is needed only on some platforms\n    /* istanbul ignore next */ if (stream.destroyed) {\n        return;\n    }\n    if (eventName === \"beforeExit\") {\n        // We still have an event loop, let's use it\n        stream.flush();\n        stream.on(\"drain\", function() {\n            stream.end();\n        });\n    } else {\n        // We do not have an event loop, so flush synchronously\n        stream.flushSync();\n    }\n}\nfunction createArgsNormalizer(defaultOptions) {\n    return function normalizeArgs(instance, caller, opts = {}, stream) {\n        // support stream as a string\n        if (typeof opts === \"string\") {\n            stream = buildSafeSonicBoom({\n                dest: opts,\n                sync: true\n            });\n            opts = {};\n        } else if (typeof stream === \"string\") {\n            if (opts && opts.transport) {\n                throw Error(\"only one of option.transport or stream can be specified\");\n            }\n            stream = buildSafeSonicBoom({\n                dest: stream,\n                sync: true\n            });\n        } else if (opts instanceof SonicBoom || opts.writable || opts._writableState) {\n            stream = opts;\n            opts = {};\n        } else if (opts.transport) {\n            if (opts.transport instanceof SonicBoom || opts.transport.writable || opts.transport._writableState) {\n                throw Error(\"option.transport do not allow stream, please pass to option directly. e.g. pino(transport)\");\n            }\n            if (opts.transport.targets && opts.transport.targets.length && opts.formatters && typeof opts.formatters.level === \"function\") {\n                throw Error(\"option.transport.targets do not allow custom level formatters\");\n            }\n            let customLevels;\n            if (opts.customLevels) {\n                customLevels = opts.useOnlyCustomLevels ? opts.customLevels : Object.assign({}, opts.levels, opts.customLevels);\n            }\n            stream = transport({\n                caller,\n                ...opts.transport,\n                levels: customLevels\n            });\n        }\n        opts = Object.assign({}, defaultOptions, opts);\n        opts.serializers = Object.assign({}, defaultOptions.serializers, opts.serializers);\n        opts.formatters = Object.assign({}, defaultOptions.formatters, opts.formatters);\n        if (\"onTerminated\" in opts) {\n            throw Error(\"The onTerminated option has been removed, use pino.final instead\");\n        }\n        if (\"changeLevelName\" in opts) {\n            process.emitWarning(\"The changeLevelName option is deprecated and will be removed in v7. Use levelKey instead.\", {\n                code: \"changeLevelName_deprecation\"\n            });\n            opts.levelKey = opts.changeLevelName;\n            delete opts.changeLevelName;\n        }\n        const { enabled, prettyPrint, prettifier, messageKey } = opts;\n        if (enabled === false) opts.level = \"silent\";\n        stream = stream || process.stdout;\n        if (stream === process.stdout && stream.fd >= 0 && !hasBeenTampered(stream)) {\n            stream = buildSafeSonicBoom({\n                fd: stream.fd,\n                sync: true\n            });\n        }\n        if (prettyPrint) {\n            warning.emit(\"PINODEP008\");\n            const prettyOpts = Object.assign({\n                messageKey\n            }, prettyPrint);\n            stream = getPrettyStream(prettyOpts, prettifier, stream, instance);\n        }\n        return {\n            opts,\n            stream\n        };\n    };\n}\nfunction final(logger, handler) {\n    const major = Number(process.versions.node.split(\".\")[0]);\n    if (major >= 14) warning.emit(\"PINODEP009\");\n    if (typeof logger === \"undefined\" || typeof logger.child !== \"function\") {\n        throw Error(\"expected a pino logger instance\");\n    }\n    const hasHandler = typeof handler !== \"undefined\";\n    if (hasHandler && typeof handler !== \"function\") {\n        throw Error(\"if supplied, the handler parameter should be a function\");\n    }\n    const stream = logger[streamSym];\n    if (typeof stream.flushSync !== \"function\") {\n        throw Error(\"final requires a stream that has a flushSync method, such as pino.destination\");\n    }\n    const finalLogger = new Proxy(logger, {\n        get: (logger, key)=>{\n            if (key in logger.levels.values) {\n                return (...args)=>{\n                    logger[key](...args);\n                    stream.flushSync();\n                };\n            }\n            return logger[key];\n        }\n    });\n    if (!hasHandler) {\n        try {\n            stream.flushSync();\n        } catch  {\n        // it's too late to wait for the stream to be ready\n        // because this is a final tick scenario.\n        // in practice there shouldn't be a situation where it isn't\n        // however, swallow the error just in case (and for easier testing)\n        }\n        return finalLogger;\n    }\n    return (err = null, ...args)=>{\n        try {\n            stream.flushSync();\n        } catch (e) {\n        // it's too late to wait for the stream to be ready\n        // because this is a final tick scenario.\n        // in practice there shouldn't be a situation where it isn't\n        // however, swallow the error just in case (and for easier testing)\n        }\n        return handler(err, finalLogger, ...args);\n    };\n}\nfunction stringify(obj, stringifySafeFn) {\n    try {\n        return JSON.stringify(obj);\n    } catch (_) {\n        try {\n            const stringify = stringifySafeFn || this[stringifySafeSym];\n            return stringify(obj);\n        } catch (_) {\n            return '\"[unable to serialize, circular reference is too complex to analyze]\"';\n        }\n    }\n}\nfunction buildFormatters(level, bindings, log) {\n    return {\n        level,\n        bindings,\n        log\n    };\n}\nfunction setMetadataProps(dest, that) {\n    if (dest[needsMetadataGsym] === true) {\n        dest.lastLevel = that.lastLevel;\n        dest.lastMsg = that.lastMsg;\n        dest.lastObj = that.lastObj;\n        dest.lastTime = that.lastTime;\n        dest.lastLogger = that.lastLogger;\n    }\n}\n/**\n * Convert a string integer file descriptor to a proper native integer\n * file descriptor.\n *\n * @param {string} destination The file descriptor string to attempt to convert.\n *\n * @returns {Number}\n */ function normalizeDestFileDescriptor(destination) {\n    const fd = Number(destination);\n    if (typeof destination === \"string\" && Number.isFinite(fd)) {\n        return fd;\n    }\n    return destination;\n}\nmodule.exports = {\n    noop,\n    buildSafeSonicBoom,\n    getPrettyStream,\n    asChindings,\n    asJson,\n    genLog,\n    createArgsNormalizer,\n    final,\n    stringify,\n    buildFormatters,\n    normalizeDestFileDescriptor\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/pino/lib/tools.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/pino/lib/transport.js":
/*!*********************************************!*\
  !*** ../node_modules/pino/lib/transport.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { createRequire } = __webpack_require__(/*! module */ \"module\");\nconst getCallers = __webpack_require__(/*! ./caller */ \"(ssr)/../node_modules/pino/lib/caller.js\");\nconst { join, isAbsolute } = __webpack_require__(/*! path */ \"path\");\nconst sleep = __webpack_require__(/*! atomic-sleep */ \"(ssr)/../node_modules/atomic-sleep/index.js\");\nlet onExit;\nif (global.WeakRef && global.WeakMap && global.FinalizationRegistry) {\n    // This require MUST be top level otherwise the transport would\n    // not work from within Jest as it hijacks require.\n    onExit = __webpack_require__(/*! on-exit-leak-free */ \"(ssr)/../node_modules/on-exit-leak-free/index.js\");\n}\nconst ThreadStream = __webpack_require__(/*! thread-stream */ \"(ssr)/../node_modules/thread-stream/index.js\");\nfunction setupOnExit(stream) {\n    /* istanbul ignore next */ if (onExit) {\n        // This is leak free, it does not leave event handlers\n        onExit.register(stream, autoEnd);\n        stream.on(\"close\", function() {\n            onExit.unregister(stream);\n        });\n    } else {\n        const fn = autoEnd.bind(null, stream);\n        process.once(\"beforeExit\", fn);\n        process.once(\"exit\", fn);\n        stream.on(\"close\", function() {\n            process.removeListener(\"beforeExit\", fn);\n            process.removeListener(\"exit\", fn);\n        });\n    }\n}\nfunction buildStream(filename, workerData, workerOpts) {\n    const stream = new ThreadStream({\n        filename,\n        workerData,\n        workerOpts\n    });\n    stream.on(\"ready\", onReady);\n    stream.on(\"close\", function() {\n        process.removeListener(\"exit\", onExit);\n    });\n    process.on(\"exit\", onExit);\n    function onReady() {\n        process.removeListener(\"exit\", onExit);\n        stream.unref();\n        if (workerOpts.autoEnd !== false) {\n            setupOnExit(stream);\n        }\n    }\n    function onExit() {\n        if (stream.closed) {\n            return;\n        }\n        stream.flushSync();\n        // Apparently there is a very sporadic race condition\n        // that in certain OS would prevent the messages to be flushed\n        // because the thread might not have been created still.\n        // Unfortunately we need to sleep(100) in this case.\n        sleep(100);\n        stream.end();\n    }\n    return stream;\n}\nfunction autoEnd(stream) {\n    stream.ref();\n    stream.flushSync();\n    stream.end();\n    stream.once(\"close\", function() {\n        stream.unref();\n    });\n}\nfunction transport(fullOptions) {\n    const { pipeline, targets, levels, options = {}, worker = {}, caller = getCallers() } = fullOptions;\n    // Backwards compatibility\n    const callers = typeof caller === \"string\" ? [\n        caller\n    ] : caller;\n    // This will be eventually modified by bundlers\n    const bundlerOverrides = \"__bundlerPathsOverrides\" in globalThis ? globalThis.__bundlerPathsOverrides : {};\n    let target = fullOptions.target;\n    if (target && targets) {\n        throw new Error(\"only one of target or targets can be specified\");\n    }\n    if (targets) {\n        target = bundlerOverrides[\"pino-worker\"] || join(__dirname, \"worker.js\");\n        options.targets = targets.map((dest)=>{\n            return {\n                ...dest,\n                target: fixTarget(dest.target)\n            };\n        });\n    } else if (pipeline) {\n        target = bundlerOverrides[\"pino-pipeline-worker\"] || join(__dirname, \"worker-pipeline.js\");\n        options.targets = pipeline.map((dest)=>{\n            return {\n                ...dest,\n                target: fixTarget(dest.target)\n            };\n        });\n    }\n    if (levels) {\n        options.levels = levels;\n    }\n    return buildStream(fixTarget(target), options, worker);\n    function fixTarget(origin) {\n        origin = bundlerOverrides[origin] || origin;\n        if (isAbsolute(origin) || origin.indexOf(\"file://\") === 0) {\n            return origin;\n        }\n        if (origin === \"pino/file\") {\n            return join(__dirname, \"..\", \"file.js\");\n        }\n        let fixTarget;\n        for (const filePath of callers){\n            try {\n                fixTarget = createRequire(filePath).resolve(origin);\n                break;\n            } catch (err) {\n                continue;\n            }\n        }\n        if (!fixTarget) {\n            throw new Error(`unable to determine transport target for \"${origin}\"`);\n        }\n        return fixTarget;\n    }\n}\nmodule.exports = transport;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/pino/lib/transport.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/pino/pino.js":
/*!************************************!*\
  !*** ../node_modules/pino/pino.js ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n/* eslint no-prototype-builtins: 0 */ const os = __webpack_require__(/*! os */ \"os\");\nconst stdSerializers = __webpack_require__(/*! pino-std-serializers */ \"(ssr)/../node_modules/pino-std-serializers/index.js\");\nconst caller = __webpack_require__(/*! ./lib/caller */ \"(ssr)/../node_modules/pino/lib/caller.js\");\nconst redaction = __webpack_require__(/*! ./lib/redaction */ \"(ssr)/../node_modules/pino/lib/redaction.js\");\nconst time = __webpack_require__(/*! ./lib/time */ \"(ssr)/../node_modules/pino/lib/time.js\");\nconst proto = __webpack_require__(/*! ./lib/proto */ \"(ssr)/../node_modules/pino/lib/proto.js\");\nconst symbols = __webpack_require__(/*! ./lib/symbols */ \"(ssr)/../node_modules/pino/lib/symbols.js\");\nconst { configure } = __webpack_require__(/*! safe-stable-stringify */ \"(ssr)/../node_modules/safe-stable-stringify/index.js\");\nconst { assertDefaultLevelFound, mappings, genLsCache, levels } = __webpack_require__(/*! ./lib/levels */ \"(ssr)/../node_modules/pino/lib/levels.js\");\nconst { createArgsNormalizer, asChindings, final, buildSafeSonicBoom, buildFormatters, stringify, normalizeDestFileDescriptor, noop } = __webpack_require__(/*! ./lib/tools */ \"(ssr)/../node_modules/pino/lib/tools.js\");\nconst { version } = __webpack_require__(/*! ./lib/meta */ \"(ssr)/../node_modules/pino/lib/meta.js\");\nconst { chindingsSym, redactFmtSym, serializersSym, timeSym, timeSliceIndexSym, streamSym, stringifySym, stringifySafeSym, stringifiersSym, setLevelSym, endSym, formatOptsSym, messageKeySym, nestedKeySym, mixinSym, useOnlyCustomLevelsSym, formattersSym, hooksSym, nestedKeyStrSym, mixinMergeStrategySym } = symbols;\nconst { epochTime, nullTime } = time;\nconst { pid } = process;\nconst hostname = os.hostname();\nconst defaultErrorSerializer = stdSerializers.err;\nconst defaultOptions = {\n    level: \"info\",\n    levels,\n    messageKey: \"msg\",\n    nestedKey: null,\n    enabled: true,\n    prettyPrint: false,\n    base: {\n        pid,\n        hostname\n    },\n    serializers: Object.assign(Object.create(null), {\n        err: defaultErrorSerializer\n    }),\n    formatters: Object.assign(Object.create(null), {\n        bindings (bindings) {\n            return bindings;\n        },\n        level (label, number) {\n            return {\n                level: number\n            };\n        }\n    }),\n    hooks: {\n        logMethod: undefined\n    },\n    timestamp: epochTime,\n    name: undefined,\n    redact: null,\n    customLevels: null,\n    useOnlyCustomLevels: false,\n    depthLimit: 5,\n    edgeLimit: 100\n};\nconst normalize = createArgsNormalizer(defaultOptions);\nconst serializers = Object.assign(Object.create(null), stdSerializers);\nfunction pino(...args) {\n    const instance = {};\n    const { opts, stream } = normalize(instance, caller(), ...args);\n    const { redact, crlf, serializers, timestamp, messageKey, nestedKey, base, name, level, customLevels, mixin, mixinMergeStrategy, useOnlyCustomLevels, formatters, hooks, depthLimit, edgeLimit } = opts;\n    const stringifySafe = configure({\n        maximumDepth: depthLimit,\n        maximumBreadth: edgeLimit\n    });\n    const allFormatters = buildFormatters(formatters.level, formatters.bindings, formatters.log);\n    const stringifiers = redact ? redaction(redact, stringify) : {};\n    const stringifyFn = stringify.bind({\n        [stringifySafeSym]: stringifySafe\n    });\n    const formatOpts = redact ? {\n        stringify: stringifiers[redactFmtSym]\n    } : {\n        stringify: stringifyFn\n    };\n    const end = \"}\" + (crlf ? \"\\r\\n\" : \"\\n\");\n    const coreChindings = asChindings.bind(null, {\n        [chindingsSym]: \"\",\n        [serializersSym]: serializers,\n        [stringifiersSym]: stringifiers,\n        [stringifySym]: stringify,\n        [stringifySafeSym]: stringifySafe,\n        [formattersSym]: allFormatters\n    });\n    let chindings = \"\";\n    if (base !== null) {\n        if (name === undefined) {\n            chindings = coreChindings(base);\n        } else {\n            chindings = coreChindings(Object.assign({}, base, {\n                name\n            }));\n        }\n    }\n    const time = timestamp instanceof Function ? timestamp : timestamp ? epochTime : nullTime;\n    const timeSliceIndex = time().indexOf(\":\") + 1;\n    if (useOnlyCustomLevels && !customLevels) throw Error(\"customLevels is required if useOnlyCustomLevels is set true\");\n    if (mixin && typeof mixin !== \"function\") throw Error(`Unknown mixin type \"${typeof mixin}\" - expected \"function\"`);\n    assertDefaultLevelFound(level, customLevels, useOnlyCustomLevels);\n    const levels = mappings(customLevels, useOnlyCustomLevels);\n    Object.assign(instance, {\n        levels,\n        [useOnlyCustomLevelsSym]: useOnlyCustomLevels,\n        [streamSym]: stream,\n        [timeSym]: time,\n        [timeSliceIndexSym]: timeSliceIndex,\n        [stringifySym]: stringify,\n        [stringifySafeSym]: stringifySafe,\n        [stringifiersSym]: stringifiers,\n        [endSym]: end,\n        [formatOptsSym]: formatOpts,\n        [messageKeySym]: messageKey,\n        [nestedKeySym]: nestedKey,\n        // protect against injection\n        [nestedKeyStrSym]: nestedKey ? `,${JSON.stringify(nestedKey)}:{` : \"\",\n        [serializersSym]: serializers,\n        [mixinSym]: mixin,\n        [mixinMergeStrategySym]: mixinMergeStrategy,\n        [chindingsSym]: chindings,\n        [formattersSym]: allFormatters,\n        [hooksSym]: hooks,\n        silent: noop\n    });\n    Object.setPrototypeOf(instance, proto());\n    genLsCache(instance);\n    instance[setLevelSym](level);\n    return instance;\n}\nmodule.exports = pino;\nmodule.exports.destination = (dest = process.stdout.fd)=>{\n    if (typeof dest === \"object\") {\n        dest.dest = normalizeDestFileDescriptor(dest.dest || process.stdout.fd);\n        return buildSafeSonicBoom(dest);\n    } else {\n        return buildSafeSonicBoom({\n            dest: normalizeDestFileDescriptor(dest),\n            minLength: 0,\n            sync: true\n        });\n    }\n};\nmodule.exports.transport = __webpack_require__(/*! ./lib/transport */ \"(ssr)/../node_modules/pino/lib/transport.js\");\nmodule.exports.multistream = __webpack_require__(/*! ./lib/multistream */ \"(ssr)/../node_modules/pino/lib/multistream.js\");\nmodule.exports.final = final;\nmodule.exports.levels = mappings();\nmodule.exports.stdSerializers = serializers;\nmodule.exports.stdTimeFunctions = Object.assign({}, time);\nmodule.exports.symbols = symbols;\nmodule.exports.version = version;\n// Enables default and name export with TypeScript and Babel\nmodule.exports[\"default\"] = pino;\nmodule.exports.pino = pino;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/pino/pino.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/pino/package.json":
/*!*****************************************!*\
  !*** ../node_modules/pino/package.json ***!
  \*****************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"name":"pino","version":"7.11.0","description":"super fast, all natural json logger","main":"pino.js","type":"commonjs","types":"pino.d.ts","browser":"./browser.js","files":["pino.js","file.js","pino.d.ts","bin.js","browser.js","pretty.js","usage.txt","test","docs","example.js","lib"],"scripts":{"docs":"docsify serve","browser-test":"airtap --local 8080 test/browser*test.js","lint":"eslint .","test":"npm run lint && npm run transpile && tap --ts && jest test/jest && npm run test-types","test-ci":"npm run lint && npm run transpile && tap --ts --no-check-coverage --coverage-report=lcovonly && npm run test-types","test-ci-pnpm":"pnpm run lint && npm run transpile && tap --ts --no-coverage --no-check-coverage && pnpm run test-types","test-ci-yarn-pnp":"yarn run lint && npm run transpile && tap --ts --no-check-coverage --coverage-report=lcovonly","test-types":"tsc && tsd && ts-node test/types/pino.ts","transpile":"node ./test/fixtures/ts/transpile.cjs","cov-ui":"tap --ts --coverage-report=html","bench":"node benchmarks/utils/runbench all","bench-basic":"node benchmarks/utils/runbench basic","bench-object":"node benchmarks/utils/runbench object","bench-deep-object":"node benchmarks/utils/runbench deep-object","bench-multi-arg":"node benchmarks/utils/runbench multi-arg","bench-longs-tring":"node benchmarks/utils/runbench long-string","bench-child":"node benchmarks/utils/runbench child","bench-child-child":"node benchmarks/utils/runbench child-child","bench-child-creation":"node benchmarks/utils/runbench child-creation","bench-formatters":"node benchmarks/utils/runbench formatters","update-bench-doc":"node benchmarks/utils/generate-benchmark-doc > docs/benchmarks.md"},"bin":{"pino":"./bin.js"},"precommit":"test","repository":{"type":"git","url":"git+https://github.com/pinojs/pino.git"},"keywords":["fast","logger","stream","json"],"author":"Matteo Collina <hello@matteocollina.com>","contributors":["David Mark Clements <huperekchuno@googlemail.com>","James Sumners <james.sumners@gmail.com>","Thomas Watson Steen <w@tson.dk> (https://twitter.com/wa7son)"],"license":"MIT","bugs":{"url":"https://github.com/pinojs/pino/issues"},"homepage":"http://getpino.io","devDependencies":{"@types/flush-write-stream":"^1.0.0","@types/node":"^17.0.0","@types/tap":"^15.0.6","airtap":"4.0.4","benchmark":"^2.1.4","bole":"^4.0.0","bunyan":"^1.8.14","docsify-cli":"^4.4.1","eslint":"^7.17.0","eslint-config-standard":"^16.0.3","eslint-plugin-import":"^2.22.1","eslint-plugin-node":"^11.1.0","eslint-plugin-promise":"^5.1.0","execa":"^5.0.0","fastbench":"^1.0.1","flush-write-stream":"^2.0.0","import-fresh":"^3.2.1","jest":"^27.3.1","log":"^6.0.0","loglevel":"^1.6.7","pino-pretty":"^v7.6.0","pre-commit":"^1.2.2","proxyquire":"^2.1.3","pump":"^3.0.0","rimraf":"^3.0.2","semver":"^7.0.0","split2":"^4.0.0","steed":"^1.1.3","strip-ansi":"^6.0.0","tap":"^16.0.0","tape":"^5.0.0","through2":"^4.0.0","ts-node":"^10.7.0","tsd":"^0.20.0","typescript":"^4.4.4","winston":"^3.3.3"},"dependencies":{"atomic-sleep":"^1.0.0","fast-redact":"^3.0.0","on-exit-leak-free":"^0.2.0","pino-abstract-transport":"v0.5.0","pino-std-serializers":"^4.0.0","process-warning":"^1.0.0","quick-format-unescaped":"^4.0.3","real-require":"^0.1.0","safe-stable-stringify":"^2.1.0","sonic-boom":"^2.2.1","thread-stream":"^0.15.1"},"tsd":{"directory":"test/types"}}');

/***/ })

};
;