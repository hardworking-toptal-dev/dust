"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/jotai";
exports.ids = ["vendor-chunks/jotai"];
exports.modules = {

/***/ "(ssr)/../node_modules/jotai/esm/react.mjs":
/*!*******************************************!*\
  !*** ../node_modules/jotai/esm/react.mjs ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Provider: () => (/* binding */ Provider),\n/* harmony export */   useAtom: () => (/* binding */ useAtom),\n/* harmony export */   useAtomValue: () => (/* binding */ useAtomValue),\n/* harmony export */   useSetAtom: () => (/* binding */ useSetAtom),\n/* harmony export */   useStore: () => (/* binding */ useStore)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/../node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var jotai_vanilla__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jotai/vanilla */ \"(ssr)/../node_modules/jotai/esm/vanilla.mjs\");\n/* __next_internal_client_entry_do_not_use__ Provider,useAtom,useAtomValue,useSetAtom,useStore auto */ \n\nconst StoreContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(void 0);\nconst useStore = (options)=>{\n    const store = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(StoreContext);\n    return (options == null ? void 0 : options.store) || store || (0,jotai_vanilla__WEBPACK_IMPORTED_MODULE_1__.getDefaultStore)();\n};\nconst Provider = ({ children, store })=>{\n    const storeRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    if (!store && !storeRef.current) {\n        storeRef.current = (0,jotai_vanilla__WEBPACK_IMPORTED_MODULE_1__.createStore)();\n    }\n    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(StoreContext.Provider, {\n        value: store || storeRef.current\n    }, children);\n};\nconst isPromiseLike = (x)=>typeof (x == null ? void 0 : x.then) === \"function\";\nconst use = react__WEBPACK_IMPORTED_MODULE_0__.use || ((promise)=>{\n    if (promise.status === \"pending\") {\n        throw promise;\n    } else if (promise.status === \"fulfilled\") {\n        return promise.value;\n    } else if (promise.status === \"rejected\") {\n        throw promise.reason;\n    } else {\n        promise.status = \"pending\";\n        promise.then((v)=>{\n            promise.status = \"fulfilled\";\n            promise.value = v;\n        }, (e)=>{\n            promise.status = \"rejected\";\n            promise.reason = e;\n        });\n        throw promise;\n    }\n});\nfunction useAtomValue(atom, options) {\n    const store = useStore(options);\n    const [[valueFromReducer, storeFromReducer, atomFromReducer], rerender] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useReducer)((prev)=>{\n        const nextValue = store.get(atom);\n        if (Object.is(prev[0], nextValue) && prev[1] === store && prev[2] === atom) {\n            return prev;\n        }\n        return [\n            nextValue,\n            store,\n            atom\n        ];\n    }, void 0, ()=>[\n            store.get(atom),\n            store,\n            atom\n        ]);\n    let value = valueFromReducer;\n    if (storeFromReducer !== store || atomFromReducer !== atom) {\n        rerender();\n        value = store.get(atom);\n    }\n    const delay = options == null ? void 0 : options.delay;\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const unsub = store.sub(atom, ()=>{\n            if (typeof delay === \"number\") {\n                setTimeout(rerender, delay);\n                return;\n            }\n            rerender();\n        });\n        rerender();\n        return unsub;\n    }, [\n        store,\n        atom,\n        delay\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useDebugValue)(value);\n    return isPromiseLike(value) ? use(value) : value;\n}\nfunction useSetAtom(atom, options) {\n    const store = useStore(options);\n    const setAtom = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((...args)=>{\n        if (( false ? 0 : void 0) !== \"production\" && !(\"write\" in atom)) {\n            throw new Error(\"not writable atom\");\n        }\n        return store.set(atom, ...args);\n    }, [\n        store,\n        atom\n    ]);\n    return setAtom;\n}\nfunction useAtom(atom, options) {\n    return [\n        useAtomValue(atom, options),\n        // We do wrong type assertion here, which results in throwing an error.\n        useSetAtom(atom, options)\n    ];\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL2pvdGFpL2VzbS9yZWFjdC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozt1R0FDMEk7QUFDN0U7QUFFN0QsTUFBTVcsNkJBQWVWLG9EQUFhQSxDQUNoQyxLQUFLO0FBRVAsTUFBTVcsV0FBVyxDQUFDQztJQUNoQixNQUFNQyxRQUFRWixpREFBVUEsQ0FBQ1M7SUFDekIsT0FBTyxDQUFDRSxXQUFXLE9BQU8sS0FBSyxJQUFJQSxRQUFRQyxLQUFLLEtBQUtBLFNBQVNMLDhEQUFlQTtBQUMvRTtBQUNBLE1BQU1NLFdBQVcsQ0FBQyxFQUNoQkMsUUFBUSxFQUNSRixLQUFLLEVBQ047SUFDQyxNQUFNRyxXQUFXZCw2Q0FBTUE7SUFDdkIsSUFBSSxDQUFDVyxTQUFTLENBQUNHLFNBQVNDLE9BQU8sRUFBRTtRQUMvQkQsU0FBU0MsT0FBTyxHQUFHUiwwREFBV0E7SUFDaEM7SUFDQSxxQkFBT04sb0RBQWFBLENBQ2xCTyxhQUFhSSxRQUFRLEVBQ3JCO1FBQ0VJLE9BQU9MLFNBQVNHLFNBQVNDLE9BQU87SUFDbEMsR0FDQUY7QUFFSjtBQUVBLE1BQU1JLGdCQUFnQixDQUFDQyxJQUFNLE9BQVFBLENBQUFBLEtBQUssT0FBTyxLQUFLLElBQUlBLEVBQUVDLElBQUksTUFBTTtBQUN0RSxNQUFNQyxNQUFNdkIsc0NBQWdCLElBQUssRUFBQ3dCO0lBQ2hDLElBQUlBLFFBQVFDLE1BQU0sS0FBSyxXQUFXO1FBQ2hDLE1BQU1EO0lBQ1IsT0FBTyxJQUFJQSxRQUFRQyxNQUFNLEtBQUssYUFBYTtRQUN6QyxPQUFPRCxRQUFRTCxLQUFLO0lBQ3RCLE9BQU8sSUFBSUssUUFBUUMsTUFBTSxLQUFLLFlBQVk7UUFDeEMsTUFBTUQsUUFBUUUsTUFBTTtJQUN0QixPQUFPO1FBQ0xGLFFBQVFDLE1BQU0sR0FBRztRQUNqQkQsUUFBUUYsSUFBSSxDQUNWLENBQUNLO1lBQ0NILFFBQVFDLE1BQU0sR0FBRztZQUNqQkQsUUFBUUwsS0FBSyxHQUFHUTtRQUNsQixHQUNBLENBQUNDO1lBQ0NKLFFBQVFDLE1BQU0sR0FBRztZQUNqQkQsUUFBUUUsTUFBTSxHQUFHRTtRQUNuQjtRQUVGLE1BQU1KO0lBQ1I7QUFDRjtBQUNBLFNBQVNLLGFBQWFDLElBQUksRUFBRWpCLE9BQU87SUFDakMsTUFBTUMsUUFBUUYsU0FBU0M7SUFDdkIsTUFBTSxDQUFDLENBQUNrQixrQkFBa0JDLGtCQUFrQkMsZ0JBQWdCLEVBQUVDLFNBQVMsR0FBRzdCLGlEQUFVQSxDQUNsRixDQUFDOEI7UUFDQyxNQUFNQyxZQUFZdEIsTUFBTXVCLEdBQUcsQ0FBQ1A7UUFDNUIsSUFBSVEsT0FBT0MsRUFBRSxDQUFDSixJQUFJLENBQUMsRUFBRSxFQUFFQyxjQUFjRCxJQUFJLENBQUMsRUFBRSxLQUFLckIsU0FBU3FCLElBQUksQ0FBQyxFQUFFLEtBQUtMLE1BQU07WUFDMUUsT0FBT0s7UUFDVDtRQUNBLE9BQU87WUFBQ0M7WUFBV3RCO1lBQU9nQjtTQUFLO0lBQ2pDLEdBQ0EsS0FBSyxHQUNMLElBQU07WUFBQ2hCLE1BQU11QixHQUFHLENBQUNQO1lBQU9oQjtZQUFPZ0I7U0FBSztJQUV0QyxJQUFJWCxRQUFRWTtJQUNaLElBQUlDLHFCQUFxQmxCLFNBQVNtQixvQkFBb0JILE1BQU07UUFDMURJO1FBQ0FmLFFBQVFMLE1BQU11QixHQUFHLENBQUNQO0lBQ3BCO0lBQ0EsTUFBTVUsUUFBUTNCLFdBQVcsT0FBTyxLQUFLLElBQUlBLFFBQVEyQixLQUFLO0lBQ3REbEMsZ0RBQVNBLENBQUM7UUFDUixNQUFNbUMsUUFBUTNCLE1BQU00QixHQUFHLENBQUNaLE1BQU07WUFDNUIsSUFBSSxPQUFPVSxVQUFVLFVBQVU7Z0JBQzdCRyxXQUFXVCxVQUFVTTtnQkFDckI7WUFDRjtZQUNBTjtRQUNGO1FBQ0FBO1FBQ0EsT0FBT087SUFDVCxHQUFHO1FBQUMzQjtRQUFPZ0I7UUFBTVU7S0FBTTtJQUN2QmpDLG9EQUFhQSxDQUFDWTtJQUNkLE9BQU9DLGNBQWNELFNBQVNJLElBQUlKLFNBQVNBO0FBQzdDO0FBRUEsU0FBU3lCLFdBQVdkLElBQUksRUFBRWpCLE9BQU87SUFDL0IsTUFBTUMsUUFBUUYsU0FBU0M7SUFDdkIsTUFBTWdDLFVBQVVyQyxrREFBV0EsQ0FDekIsQ0FBQyxHQUFHc0M7UUFDRixJQUFJLENBQUMsTUFBZSxHQUFHLENBQW9CLEdBQUcsS0FBSyxPQUFPLGdCQUFnQixDQUFFLFlBQVdoQixJQUFHLEdBQUk7WUFDNUYsTUFBTSxJQUFJbUIsTUFBTTtRQUNsQjtRQUNBLE9BQU9uQyxNQUFNb0MsR0FBRyxDQUFDcEIsU0FBU2dCO0lBQzVCLEdBQ0E7UUFBQ2hDO1FBQU9nQjtLQUFLO0lBRWYsT0FBT2U7QUFDVDtBQUVBLFNBQVNNLFFBQVFyQixJQUFJLEVBQUVqQixPQUFPO0lBQzVCLE9BQU87UUFDTGdCLGFBQWFDLE1BQU1qQjtRQUNuQix1RUFBdUU7UUFDdkUrQixXQUFXZCxNQUFNakI7S0FDbEI7QUFDSDtBQUVpRSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvam90YWkvZXNtL3JlYWN0Lm1qcz8yODhkIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2UgY2xpZW50JztcbmltcG9ydCBSZWFjdEV4cG9ydHMsIHsgY3JlYXRlQ29udGV4dCwgdXNlQ29udGV4dCwgdXNlUmVmLCBjcmVhdGVFbGVtZW50LCB1c2VSZWR1Y2VyLCB1c2VFZmZlY3QsIHVzZURlYnVnVmFsdWUsIHVzZUNhbGxiYWNrIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgZ2V0RGVmYXVsdFN0b3JlLCBjcmVhdGVTdG9yZSB9IGZyb20gJ2pvdGFpL3ZhbmlsbGEnO1xuXG5jb25zdCBTdG9yZUNvbnRleHQgPSBjcmVhdGVDb250ZXh0KFxuICB2b2lkIDBcbik7XG5jb25zdCB1c2VTdG9yZSA9IChvcHRpb25zKSA9PiB7XG4gIGNvbnN0IHN0b3JlID0gdXNlQ29udGV4dChTdG9yZUNvbnRleHQpO1xuICByZXR1cm4gKG9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMuc3RvcmUpIHx8IHN0b3JlIHx8IGdldERlZmF1bHRTdG9yZSgpO1xufTtcbmNvbnN0IFByb3ZpZGVyID0gKHtcbiAgY2hpbGRyZW4sXG4gIHN0b3JlXG59KSA9PiB7XG4gIGNvbnN0IHN0b3JlUmVmID0gdXNlUmVmKCk7XG4gIGlmICghc3RvcmUgJiYgIXN0b3JlUmVmLmN1cnJlbnQpIHtcbiAgICBzdG9yZVJlZi5jdXJyZW50ID0gY3JlYXRlU3RvcmUoKTtcbiAgfVxuICByZXR1cm4gY3JlYXRlRWxlbWVudChcbiAgICBTdG9yZUNvbnRleHQuUHJvdmlkZXIsXG4gICAge1xuICAgICAgdmFsdWU6IHN0b3JlIHx8IHN0b3JlUmVmLmN1cnJlbnRcbiAgICB9LFxuICAgIGNoaWxkcmVuXG4gICk7XG59O1xuXG5jb25zdCBpc1Byb21pc2VMaWtlID0gKHgpID0+IHR5cGVvZiAoeCA9PSBudWxsID8gdm9pZCAwIDogeC50aGVuKSA9PT0gXCJmdW5jdGlvblwiO1xuY29uc3QgdXNlID0gUmVhY3RFeHBvcnRzLnVzZSB8fCAoKHByb21pc2UpID0+IHtcbiAgaWYgKHByb21pc2Uuc3RhdHVzID09PSBcInBlbmRpbmdcIikge1xuICAgIHRocm93IHByb21pc2U7XG4gIH0gZWxzZSBpZiAocHJvbWlzZS5zdGF0dXMgPT09IFwiZnVsZmlsbGVkXCIpIHtcbiAgICByZXR1cm4gcHJvbWlzZS52YWx1ZTtcbiAgfSBlbHNlIGlmIChwcm9taXNlLnN0YXR1cyA9PT0gXCJyZWplY3RlZFwiKSB7XG4gICAgdGhyb3cgcHJvbWlzZS5yZWFzb247XG4gIH0gZWxzZSB7XG4gICAgcHJvbWlzZS5zdGF0dXMgPSBcInBlbmRpbmdcIjtcbiAgICBwcm9taXNlLnRoZW4oXG4gICAgICAodikgPT4ge1xuICAgICAgICBwcm9taXNlLnN0YXR1cyA9IFwiZnVsZmlsbGVkXCI7XG4gICAgICAgIHByb21pc2UudmFsdWUgPSB2O1xuICAgICAgfSxcbiAgICAgIChlKSA9PiB7XG4gICAgICAgIHByb21pc2Uuc3RhdHVzID0gXCJyZWplY3RlZFwiO1xuICAgICAgICBwcm9taXNlLnJlYXNvbiA9IGU7XG4gICAgICB9XG4gICAgKTtcbiAgICB0aHJvdyBwcm9taXNlO1xuICB9XG59KTtcbmZ1bmN0aW9uIHVzZUF0b21WYWx1ZShhdG9tLCBvcHRpb25zKSB7XG4gIGNvbnN0IHN0b3JlID0gdXNlU3RvcmUob3B0aW9ucyk7XG4gIGNvbnN0IFtbdmFsdWVGcm9tUmVkdWNlciwgc3RvcmVGcm9tUmVkdWNlciwgYXRvbUZyb21SZWR1Y2VyXSwgcmVyZW5kZXJdID0gdXNlUmVkdWNlcihcbiAgICAocHJldikgPT4ge1xuICAgICAgY29uc3QgbmV4dFZhbHVlID0gc3RvcmUuZ2V0KGF0b20pO1xuICAgICAgaWYgKE9iamVjdC5pcyhwcmV2WzBdLCBuZXh0VmFsdWUpICYmIHByZXZbMV0gPT09IHN0b3JlICYmIHByZXZbMl0gPT09IGF0b20pIHtcbiAgICAgICAgcmV0dXJuIHByZXY7XG4gICAgICB9XG4gICAgICByZXR1cm4gW25leHRWYWx1ZSwgc3RvcmUsIGF0b21dO1xuICAgIH0sXG4gICAgdm9pZCAwLFxuICAgICgpID0+IFtzdG9yZS5nZXQoYXRvbSksIHN0b3JlLCBhdG9tXVxuICApO1xuICBsZXQgdmFsdWUgPSB2YWx1ZUZyb21SZWR1Y2VyO1xuICBpZiAoc3RvcmVGcm9tUmVkdWNlciAhPT0gc3RvcmUgfHwgYXRvbUZyb21SZWR1Y2VyICE9PSBhdG9tKSB7XG4gICAgcmVyZW5kZXIoKTtcbiAgICB2YWx1ZSA9IHN0b3JlLmdldChhdG9tKTtcbiAgfVxuICBjb25zdCBkZWxheSA9IG9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMuZGVsYXk7XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgdW5zdWIgPSBzdG9yZS5zdWIoYXRvbSwgKCkgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBkZWxheSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICBzZXRUaW1lb3V0KHJlcmVuZGVyLCBkZWxheSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHJlcmVuZGVyKCk7XG4gICAgfSk7XG4gICAgcmVyZW5kZXIoKTtcbiAgICByZXR1cm4gdW5zdWI7XG4gIH0sIFtzdG9yZSwgYXRvbSwgZGVsYXldKTtcbiAgdXNlRGVidWdWYWx1ZSh2YWx1ZSk7XG4gIHJldHVybiBpc1Byb21pc2VMaWtlKHZhbHVlKSA/IHVzZSh2YWx1ZSkgOiB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gdXNlU2V0QXRvbShhdG9tLCBvcHRpb25zKSB7XG4gIGNvbnN0IHN0b3JlID0gdXNlU3RvcmUob3B0aW9ucyk7XG4gIGNvbnN0IHNldEF0b20gPSB1c2VDYWxsYmFjayhcbiAgICAoLi4uYXJncykgPT4ge1xuICAgICAgaWYgKChpbXBvcnQubWV0YS5lbnYgPyBpbXBvcnQubWV0YS5lbnYuTU9ERSA6IHZvaWQgMCkgIT09IFwicHJvZHVjdGlvblwiICYmICEoXCJ3cml0ZVwiIGluIGF0b20pKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vdCB3cml0YWJsZSBhdG9tXCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHN0b3JlLnNldChhdG9tLCAuLi5hcmdzKTtcbiAgICB9LFxuICAgIFtzdG9yZSwgYXRvbV1cbiAgKTtcbiAgcmV0dXJuIHNldEF0b207XG59XG5cbmZ1bmN0aW9uIHVzZUF0b20oYXRvbSwgb3B0aW9ucykge1xuICByZXR1cm4gW1xuICAgIHVzZUF0b21WYWx1ZShhdG9tLCBvcHRpb25zKSxcbiAgICAvLyBXZSBkbyB3cm9uZyB0eXBlIGFzc2VydGlvbiBoZXJlLCB3aGljaCByZXN1bHRzIGluIHRocm93aW5nIGFuIGVycm9yLlxuICAgIHVzZVNldEF0b20oYXRvbSwgb3B0aW9ucylcbiAgXTtcbn1cblxuZXhwb3J0IHsgUHJvdmlkZXIsIHVzZUF0b20sIHVzZUF0b21WYWx1ZSwgdXNlU2V0QXRvbSwgdXNlU3RvcmUgfTtcbiJdLCJuYW1lcyI6WyJSZWFjdEV4cG9ydHMiLCJjcmVhdGVDb250ZXh0IiwidXNlQ29udGV4dCIsInVzZVJlZiIsImNyZWF0ZUVsZW1lbnQiLCJ1c2VSZWR1Y2VyIiwidXNlRWZmZWN0IiwidXNlRGVidWdWYWx1ZSIsInVzZUNhbGxiYWNrIiwiZ2V0RGVmYXVsdFN0b3JlIiwiY3JlYXRlU3RvcmUiLCJTdG9yZUNvbnRleHQiLCJ1c2VTdG9yZSIsIm9wdGlvbnMiLCJzdG9yZSIsIlByb3ZpZGVyIiwiY2hpbGRyZW4iLCJzdG9yZVJlZiIsImN1cnJlbnQiLCJ2YWx1ZSIsImlzUHJvbWlzZUxpa2UiLCJ4IiwidGhlbiIsInVzZSIsInByb21pc2UiLCJzdGF0dXMiLCJyZWFzb24iLCJ2IiwiZSIsInVzZUF0b21WYWx1ZSIsImF0b20iLCJ2YWx1ZUZyb21SZWR1Y2VyIiwic3RvcmVGcm9tUmVkdWNlciIsImF0b21Gcm9tUmVkdWNlciIsInJlcmVuZGVyIiwicHJldiIsIm5leHRWYWx1ZSIsImdldCIsIk9iamVjdCIsImlzIiwiZGVsYXkiLCJ1bnN1YiIsInN1YiIsInNldFRpbWVvdXQiLCJ1c2VTZXRBdG9tIiwic2V0QXRvbSIsImFyZ3MiLCJlbnYiLCJNT0RFIiwiRXJyb3IiLCJzZXQiLCJ1c2VBdG9tIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/jotai/esm/react.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/jotai/esm/vanilla.mjs":
/*!*********************************************!*\
  !*** ../node_modules/jotai/esm/vanilla.mjs ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   atom: () => (/* binding */ atom),\n/* harmony export */   createStore: () => (/* binding */ createStore),\n/* harmony export */   getDefaultStore: () => (/* binding */ getDefaultStore)\n/* harmony export */ });\nlet keyCount = 0;\nfunction atom(read, write) {\n    const key = `atom${++keyCount}`;\n    const config = {\n        toString: ()=>key\n    };\n    if (typeof read === \"function\") {\n        config.read = read;\n    } else {\n        config.init = read;\n        config.read = defaultRead;\n        config.write = defaultWrite;\n    }\n    if (write) {\n        config.write = write;\n    }\n    return config;\n}\nfunction defaultRead(get) {\n    return get(this);\n}\nfunction defaultWrite(get, set, arg) {\n    return set(this, typeof arg === \"function\" ? arg(get(this)) : arg);\n}\nconst isSelfAtom = (atom, a)=>atom.unstable_is ? atom.unstable_is(a) : a === atom;\nconst hasInitialValue = (atom)=>\"init\" in atom;\nconst isActuallyWritableAtom = (atom)=>!!atom.write;\nconst cancelPromiseMap = /* @__PURE__ */ new WeakMap();\nconst registerCancelPromise = (promise, cancel)=>{\n    cancelPromiseMap.set(promise, cancel);\n    promise.catch(()=>{}).finally(()=>cancelPromiseMap.delete(promise));\n};\nconst cancelPromise = (promise, next)=>{\n    const cancel = cancelPromiseMap.get(promise);\n    if (cancel) {\n        cancelPromiseMap.delete(promise);\n        cancel(next);\n    }\n};\nconst resolvePromise = (promise, value)=>{\n    promise.status = \"fulfilled\";\n    promise.value = value;\n};\nconst rejectPromise = (promise, e)=>{\n    promise.status = \"rejected\";\n    promise.reason = e;\n};\nconst isPromiseLike = (x)=>typeof (x == null ? void 0 : x.then) === \"function\";\nconst isEqualAtomValue = (a, b)=>!!a && \"v\" in a && \"v\" in b && Object.is(a.v, b.v);\nconst isEqualAtomError = (a, b)=>!!a && \"e\" in a && \"e\" in b && Object.is(a.e, b.e);\nconst hasPromiseAtomValue = (a)=>!!a && \"v\" in a && a.v instanceof Promise;\nconst isEqualPromiseAtomValue = (a, b)=>\"v\" in a && \"v\" in b && a.v.orig && a.v.orig === b.v.orig;\nconst returnAtomValue = (atomState)=>{\n    if (\"e\" in atomState) {\n        throw atomState.e;\n    }\n    return atomState.v;\n};\nconst createStore$1 = ()=>{\n    const atomStateMap = /* @__PURE__ */ new WeakMap();\n    const mountedMap = /* @__PURE__ */ new WeakMap();\n    const pendingStack = [];\n    const pendingMap = /* @__PURE__ */ new WeakMap();\n    let devListenersRev2;\n    let mountedAtoms;\n    if (( false ? 0 : void 0) !== \"production\") {\n        devListenersRev2 = /* @__PURE__ */ new Set();\n        mountedAtoms = /* @__PURE__ */ new Set();\n    }\n    const getAtomState = (atom)=>atomStateMap.get(atom);\n    const addPendingDependent = (atom, atomState)=>{\n        atomState.d.forEach((_, a)=>{\n            if (!pendingMap.has(a)) {\n                const aState = getAtomState(a);\n                pendingMap.set(a, [\n                    aState,\n                    /* @__PURE__ */ new Set()\n                ]);\n                if (aState) {\n                    addPendingDependent(a, aState);\n                }\n            }\n            pendingMap.get(a)[1].add(atom);\n        });\n    };\n    const setAtomState = (atom, atomState)=>{\n        var _a;\n        if (( false ? 0 : void 0) !== \"production\") {\n            Object.freeze(atomState);\n        }\n        const prevAtomState = getAtomState(atom);\n        atomStateMap.set(atom, atomState);\n        (_a = pendingStack[pendingStack.length - 1]) == null ? void 0 : _a.add(atom);\n        if (!pendingMap.has(atom)) {\n            pendingMap.set(atom, [\n                prevAtomState,\n                /* @__PURE__ */ new Set()\n            ]);\n            addPendingDependent(atom, atomState);\n        }\n        if (hasPromiseAtomValue(prevAtomState)) {\n            const next = \"v\" in atomState ? atomState.v instanceof Promise ? atomState.v : Promise.resolve(atomState.v) : Promise.reject(atomState.e);\n            if (prevAtomState.v !== next) {\n                cancelPromise(prevAtomState.v, next);\n            }\n        }\n    };\n    const updateDependencies = (atom, nextAtomState, nextDependencies, keepPreviousDependencies)=>{\n        const dependencies = new Map(keepPreviousDependencies ? nextAtomState.d : null);\n        let changed = false;\n        nextDependencies.forEach((aState, a)=>{\n            if (!aState && isSelfAtom(atom, a)) {\n                aState = nextAtomState;\n            }\n            if (aState) {\n                dependencies.set(a, aState);\n                if (nextAtomState.d.get(a) !== aState) {\n                    changed = true;\n                }\n            } else if (( false ? 0 : void 0) !== \"production\") {\n                console.warn(\"[Bug] atom state not found\");\n            }\n        });\n        if (changed || nextAtomState.d.size !== dependencies.size) {\n            nextAtomState.d = dependencies;\n        }\n    };\n    const setAtomValue = (atom, value, nextDependencies, keepPreviousDependencies)=>{\n        const prevAtomState = getAtomState(atom);\n        const nextAtomState = {\n            d: (prevAtomState == null ? void 0 : prevAtomState.d) || /* @__PURE__ */ new Map(),\n            v: value\n        };\n        if (nextDependencies) {\n            updateDependencies(atom, nextAtomState, nextDependencies, keepPreviousDependencies);\n        }\n        if (isEqualAtomValue(prevAtomState, nextAtomState) && prevAtomState.d === nextAtomState.d) {\n            return prevAtomState;\n        }\n        if (hasPromiseAtomValue(prevAtomState) && hasPromiseAtomValue(nextAtomState) && isEqualPromiseAtomValue(prevAtomState, nextAtomState)) {\n            if (prevAtomState.d === nextAtomState.d) {\n                return prevAtomState;\n            } else {\n                nextAtomState.v = prevAtomState.v;\n            }\n        }\n        setAtomState(atom, nextAtomState);\n        return nextAtomState;\n    };\n    const setAtomValueOrPromise = (atom, valueOrPromise, nextDependencies, abortPromise)=>{\n        if (isPromiseLike(valueOrPromise)) {\n            let continuePromise;\n            const updatePromiseDependencies = ()=>{\n                const prevAtomState = getAtomState(atom);\n                if (!hasPromiseAtomValue(prevAtomState) || prevAtomState.v !== promise) {\n                    return;\n                }\n                const nextAtomState = setAtomValue(atom, promise, nextDependencies);\n                if (mountedMap.has(atom) && prevAtomState.d !== nextAtomState.d) {\n                    mountDependencies(atom, nextAtomState, prevAtomState.d);\n                }\n            };\n            const promise = new Promise((resolve, reject)=>{\n                let settled = false;\n                valueOrPromise.then((v)=>{\n                    if (!settled) {\n                        settled = true;\n                        resolvePromise(promise, v);\n                        resolve(v);\n                        updatePromiseDependencies();\n                    }\n                }, (e)=>{\n                    if (!settled) {\n                        settled = true;\n                        rejectPromise(promise, e);\n                        reject(e);\n                        updatePromiseDependencies();\n                    }\n                });\n                continuePromise = (next)=>{\n                    if (!settled) {\n                        settled = true;\n                        next.then((v)=>resolvePromise(promise, v), (e)=>rejectPromise(promise, e));\n                        resolve(next);\n                    }\n                };\n            });\n            promise.orig = valueOrPromise;\n            promise.status = \"pending\";\n            registerCancelPromise(promise, (next)=>{\n                if (next) {\n                    continuePromise(next);\n                }\n                abortPromise == null ? void 0 : abortPromise();\n            });\n            return setAtomValue(atom, promise, nextDependencies, true);\n        }\n        return setAtomValue(atom, valueOrPromise, nextDependencies);\n    };\n    const setAtomError = (atom, error, nextDependencies)=>{\n        const prevAtomState = getAtomState(atom);\n        const nextAtomState = {\n            d: (prevAtomState == null ? void 0 : prevAtomState.d) || /* @__PURE__ */ new Map(),\n            e: error\n        };\n        if (nextDependencies) {\n            updateDependencies(atom, nextAtomState, nextDependencies);\n        }\n        if (isEqualAtomError(prevAtomState, nextAtomState) && prevAtomState.d === nextAtomState.d) {\n            return prevAtomState;\n        }\n        setAtomState(atom, nextAtomState);\n        return nextAtomState;\n    };\n    const readAtomState = (atom, force)=>{\n        const atomState = getAtomState(atom);\n        if (!(force == null ? void 0 : force(atom)) && atomState) {\n            if (mountedMap.has(atom)) {\n                return atomState;\n            }\n            if (Array.from(atomState.d).every(([a, s])=>{\n                if (a === atom) {\n                    return true;\n                }\n                const aState = readAtomState(a, force);\n                return aState === s || isEqualAtomValue(aState, s);\n            })) {\n                return atomState;\n            }\n        }\n        const nextDependencies = /* @__PURE__ */ new Map();\n        let isSync = true;\n        const getter = (a)=>{\n            if (isSelfAtom(atom, a)) {\n                const aState2 = getAtomState(a);\n                if (aState2) {\n                    nextDependencies.set(a, aState2);\n                    return returnAtomValue(aState2);\n                }\n                if (hasInitialValue(a)) {\n                    nextDependencies.set(a, void 0);\n                    return a.init;\n                }\n                throw new Error(\"no atom init\");\n            }\n            const aState = readAtomState(a, force);\n            nextDependencies.set(a, aState);\n            return returnAtomValue(aState);\n        };\n        let controller;\n        let setSelf;\n        const options = {\n            get signal () {\n                if (!controller) {\n                    controller = new AbortController();\n                }\n                return controller.signal;\n            },\n            get setSelf () {\n                if (( false ? 0 : void 0) !== \"production\" && !isActuallyWritableAtom(atom)) {\n                    console.warn(\"setSelf function cannot be used with read-only atom\");\n                }\n                if (!setSelf && isActuallyWritableAtom(atom)) {\n                    setSelf = (...args)=>{\n                        if (( false ? 0 : void 0) !== \"production\" && isSync) {\n                            console.warn(\"setSelf function cannot be called in sync\");\n                        }\n                        if (!isSync) {\n                            return writeAtom(atom, ...args);\n                        }\n                    };\n                }\n                return setSelf;\n            }\n        };\n        try {\n            const valueOrPromise = atom.read(getter, options);\n            return setAtomValueOrPromise(atom, valueOrPromise, nextDependencies, ()=>controller == null ? void 0 : controller.abort());\n        } catch (error) {\n            return setAtomError(atom, error, nextDependencies);\n        } finally{\n            isSync = false;\n        }\n    };\n    const readAtom = (atom)=>returnAtomValue(readAtomState(atom));\n    const recomputeDependents = (atom)=>{\n        const getDependents = (a)=>{\n            var _a, _b;\n            const dependents = new Set((_a = mountedMap.get(a)) == null ? void 0 : _a.t);\n            (_b = pendingMap.get(a)) == null ? void 0 : _b[1].forEach((dependent)=>{\n                dependents.add(dependent);\n            });\n            return dependents;\n        };\n        const topsortedAtoms = new Array();\n        const markedAtoms = /* @__PURE__ */ new Set();\n        const visit = (n)=>{\n            if (markedAtoms.has(n)) {\n                return;\n            }\n            markedAtoms.add(n);\n            for (const m of getDependents(n)){\n                if (n !== m) {\n                    visit(m);\n                }\n            }\n            topsortedAtoms.push(n);\n        };\n        visit(atom);\n        const changedAtoms = /* @__PURE__ */ new Set([\n            atom\n        ]);\n        const isMarked = (a)=>markedAtoms.has(a);\n        for(let i = topsortedAtoms.length - 1; i >= 0; --i){\n            const a = topsortedAtoms[i];\n            const prevAtomState = getAtomState(a);\n            if (!prevAtomState) {\n                continue;\n            }\n            let hasChangedDeps = false;\n            for (const dep of prevAtomState.d.keys()){\n                if (dep !== a && changedAtoms.has(dep)) {\n                    hasChangedDeps = true;\n                    break;\n                }\n            }\n            if (hasChangedDeps) {\n                const nextAtomState = readAtomState(a, isMarked);\n                addPendingDependent(a, nextAtomState);\n                if (!isEqualAtomValue(prevAtomState, nextAtomState)) {\n                    changedAtoms.add(a);\n                }\n            }\n            markedAtoms.delete(a);\n        }\n    };\n    const writeAtomState = (atom, ...args)=>{\n        const getter = (a)=>returnAtomValue(readAtomState(a));\n        const setter = (a, ...args2)=>{\n            const isSync = pendingStack.length > 0;\n            if (!isSync) {\n                pendingStack.push(/* @__PURE__ */ new Set([\n                    a\n                ]));\n            }\n            let r;\n            if (isSelfAtom(atom, a)) {\n                if (!hasInitialValue(a)) {\n                    throw new Error(\"atom not writable\");\n                }\n                const prevAtomState = getAtomState(a);\n                const nextAtomState = setAtomValueOrPromise(a, args2[0]);\n                if (!isEqualAtomValue(prevAtomState, nextAtomState)) {\n                    recomputeDependents(a);\n                }\n            } else {\n                r = writeAtomState(a, ...args2);\n            }\n            if (!isSync) {\n                const flushed = flushPending(pendingStack.pop());\n                if (( false ? 0 : void 0) !== \"production\") {\n                    devListenersRev2.forEach((l)=>l({\n                            type: \"async-write\",\n                            flushed\n                        }));\n                }\n            }\n            return r;\n        };\n        const result = atom.write(getter, setter, ...args);\n        return result;\n    };\n    const writeAtom = (atom, ...args)=>{\n        pendingStack.push(/* @__PURE__ */ new Set([\n            atom\n        ]));\n        const result = writeAtomState(atom, ...args);\n        const flushed = flushPending(pendingStack.pop());\n        if (( false ? 0 : void 0) !== \"production\") {\n            devListenersRev2.forEach((l)=>l({\n                    type: \"write\",\n                    flushed\n                }));\n        }\n        return result;\n    };\n    const mountAtom = (atom, initialDependent, onMountQueue)=>{\n        var _a;\n        const existingMount = mountedMap.get(atom);\n        if (existingMount) {\n            if (initialDependent) {\n                existingMount.t.add(initialDependent);\n            }\n            return existingMount;\n        }\n        const queue = onMountQueue || [];\n        (_a = getAtomState(atom)) == null ? void 0 : _a.d.forEach((_, a)=>{\n            if (a !== atom) {\n                mountAtom(a, atom, queue);\n            }\n        });\n        readAtomState(atom);\n        const mounted = {\n            t: new Set(initialDependent && [\n                initialDependent\n            ]),\n            l: /* @__PURE__ */ new Set()\n        };\n        mountedMap.set(atom, mounted);\n        if (( false ? 0 : void 0) !== \"production\") {\n            mountedAtoms.add(atom);\n        }\n        if (isActuallyWritableAtom(atom) && atom.onMount) {\n            const { onMount } = atom;\n            queue.push(()=>{\n                const onUnmount = onMount((...args)=>writeAtom(atom, ...args));\n                if (onUnmount) {\n                    mounted.u = onUnmount;\n                }\n            });\n        }\n        if (!onMountQueue) {\n            queue.forEach((f)=>f());\n        }\n        return mounted;\n    };\n    const canUnmountAtom = (atom, mounted)=>!mounted.l.size && (!mounted.t.size || mounted.t.size === 1 && mounted.t.has(atom));\n    const tryUnmountAtom = (atom, mounted)=>{\n        if (!canUnmountAtom(atom, mounted)) {\n            return;\n        }\n        const onUnmount = mounted.u;\n        if (onUnmount) {\n            onUnmount();\n        }\n        mountedMap.delete(atom);\n        if (( false ? 0 : void 0) !== \"production\") {\n            mountedAtoms.delete(atom);\n        }\n        const atomState = getAtomState(atom);\n        if (atomState) {\n            if (hasPromiseAtomValue(atomState)) {\n                cancelPromise(atomState.v);\n            }\n            atomState.d.forEach((_, a)=>{\n                if (a !== atom) {\n                    const mountedDep = mountedMap.get(a);\n                    if (mountedDep) {\n                        mountedDep.t.delete(atom);\n                        tryUnmountAtom(a, mountedDep);\n                    }\n                }\n            });\n        } else if (( false ? 0 : void 0) !== \"production\") {\n            console.warn(\"[Bug] could not find atom state to unmount\", atom);\n        }\n    };\n    const mountDependencies = (atom, atomState, prevDependencies)=>{\n        const depSet = new Set(atomState.d.keys());\n        const maybeUnmountAtomSet = /* @__PURE__ */ new Set();\n        prevDependencies == null ? void 0 : prevDependencies.forEach((_, a)=>{\n            if (depSet.has(a)) {\n                depSet.delete(a);\n                return;\n            }\n            maybeUnmountAtomSet.add(a);\n            const mounted = mountedMap.get(a);\n            if (mounted) {\n                mounted.t.delete(atom);\n            }\n        });\n        depSet.forEach((a)=>{\n            mountAtom(a, atom);\n        });\n        maybeUnmountAtomSet.forEach((a)=>{\n            const mounted = mountedMap.get(a);\n            if (mounted) {\n                tryUnmountAtom(a, mounted);\n            }\n        });\n    };\n    const flushPending = (pendingAtoms)=>{\n        let flushed;\n        if (( false ? 0 : void 0) !== \"production\") {\n            flushed = /* @__PURE__ */ new Set();\n        }\n        const pending = [];\n        const collectPending = (pendingAtom)=>{\n            var _a;\n            if (!pendingMap.has(pendingAtom)) {\n                return;\n            }\n            const [prevAtomState, dependents] = pendingMap.get(pendingAtom);\n            pendingMap.delete(pendingAtom);\n            pending.push([\n                pendingAtom,\n                prevAtomState\n            ]);\n            dependents.forEach(collectPending);\n            (_a = getAtomState(pendingAtom)) == null ? void 0 : _a.d.forEach((_, a)=>collectPending(a));\n        };\n        pendingAtoms.forEach(collectPending);\n        pending.forEach(([atom, prevAtomState])=>{\n            const atomState = getAtomState(atom);\n            if (!atomState) {\n                if (( false ? 0 : void 0) !== \"production\") {\n                    console.warn(\"[Bug] no atom state to flush\");\n                }\n                return;\n            }\n            if (atomState !== prevAtomState) {\n                const mounted = mountedMap.get(atom);\n                if (mounted && atomState.d !== (prevAtomState == null ? void 0 : prevAtomState.d)) {\n                    mountDependencies(atom, atomState, prevAtomState == null ? void 0 : prevAtomState.d);\n                }\n                if (mounted && !// Maybe we could `mountDependencies` in `setAtomState`?\n                (!hasPromiseAtomValue(prevAtomState) && (isEqualAtomValue(prevAtomState, atomState) || isEqualAtomError(prevAtomState, atomState)))) {\n                    mounted.l.forEach((listener)=>listener());\n                    if (( false ? 0 : void 0) !== \"production\") {\n                        flushed.add(atom);\n                    }\n                }\n            }\n        });\n        if (( false ? 0 : void 0) !== \"production\") {\n            return flushed;\n        }\n    };\n    const subscribeAtom = (atom, listener)=>{\n        const mounted = mountAtom(atom);\n        const flushed = flushPending([\n            atom\n        ]);\n        const listeners = mounted.l;\n        listeners.add(listener);\n        if (( false ? 0 : void 0) !== \"production\") {\n            devListenersRev2.forEach((l)=>l({\n                    type: \"sub\",\n                    flushed\n                }));\n        }\n        return ()=>{\n            listeners.delete(listener);\n            tryUnmountAtom(atom, mounted);\n            if (( false ? 0 : void 0) !== \"production\") {\n                devListenersRev2.forEach((l)=>l({\n                        type: \"unsub\"\n                    }));\n            }\n        };\n    };\n    if (( false ? 0 : void 0) !== \"production\") {\n        return {\n            get: readAtom,\n            set: writeAtom,\n            sub: subscribeAtom,\n            // store dev methods (these are tentative and subject to change without notice)\n            dev_subscribe_store: (l)=>{\n                devListenersRev2.add(l);\n                return ()=>{\n                    devListenersRev2.delete(l);\n                };\n            },\n            dev_get_mounted_atoms: ()=>mountedAtoms.values(),\n            dev_get_atom_state: (a)=>atomStateMap.get(a),\n            dev_get_mounted: (a)=>mountedMap.get(a),\n            dev_restore_atoms: (values)=>{\n                pendingStack.push(/* @__PURE__ */ new Set());\n                for (const [atom, valueOrPromise] of values){\n                    if (hasInitialValue(atom)) {\n                        setAtomValueOrPromise(atom, valueOrPromise);\n                        recomputeDependents(atom);\n                    }\n                }\n                const flushed = flushPending(pendingStack.pop());\n                devListenersRev2.forEach((l)=>l({\n                        type: \"restore\",\n                        flushed\n                    }));\n            }\n        };\n    }\n    return {\n        get: readAtom,\n        set: writeAtom,\n        sub: subscribeAtom\n    };\n};\nlet defaultStore;\nconst getDefaultStore$1 = ()=>{\n    if (!defaultStore) {\n        defaultStore = createStore$1();\n        if (( false ? 0 : void 0) !== \"production\") {\n            globalThis.__JOTAI_DEFAULT_STORE__ || (globalThis.__JOTAI_DEFAULT_STORE__ = defaultStore);\n            if (globalThis.__JOTAI_DEFAULT_STORE__ !== defaultStore) {\n                console.warn(\"Detected multiple Jotai instances. It may cause unexpected behavior with the default store. https://github.com/pmndrs/jotai/discussions/2044\");\n            }\n        }\n    }\n    return defaultStore;\n};\nSymbol(( false ? 0 : void 0) !== \"production\" ? \"CONTINUE_PROMISE\" : \"\");\nconst createStore = createStore$1;\nconst getDefaultStore = getDefaultStore$1;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/jotai/esm/vanilla.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/jotai/esm/vanilla/utils.mjs":
/*!***************************************************!*\
  !*** ../node_modules/jotai/esm/vanilla/utils.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RESET: () => (/* binding */ RESET),\n/* harmony export */   atomFamily: () => (/* binding */ atomFamily),\n/* harmony export */   atomWithDefault: () => (/* binding */ atomWithDefault),\n/* harmony export */   atomWithLazy: () => (/* binding */ atomWithLazy),\n/* harmony export */   atomWithObservable: () => (/* binding */ atomWithObservable),\n/* harmony export */   atomWithReducer: () => (/* binding */ atomWithReducer),\n/* harmony export */   atomWithRefresh: () => (/* binding */ atomWithRefresh),\n/* harmony export */   atomWithReset: () => (/* binding */ atomWithReset),\n/* harmony export */   atomWithStorage: () => (/* binding */ atomWithStorage),\n/* harmony export */   createJSONStorage: () => (/* binding */ createJSONStorage),\n/* harmony export */   freezeAtom: () => (/* binding */ freezeAtom),\n/* harmony export */   freezeAtomCreator: () => (/* binding */ freezeAtomCreator),\n/* harmony export */   loadable: () => (/* binding */ loadable),\n/* harmony export */   selectAtom: () => (/* binding */ selectAtom),\n/* harmony export */   splitAtom: () => (/* binding */ splitAtom),\n/* harmony export */   unstable_withStorageValidator: () => (/* binding */ withStorageValidator),\n/* harmony export */   unwrap: () => (/* binding */ unwrap)\n/* harmony export */ });\n/* harmony import */ var jotai_vanilla__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jotai/vanilla */ \"(ssr)/../node_modules/jotai/esm/vanilla.mjs\");\n\nconst RESET = Symbol(( false ? 0 : void 0) !== \"production\" ? \"RESET\" : \"\");\nfunction atomWithReset(initialValue) {\n    const anAtom = (0,jotai_vanilla__WEBPACK_IMPORTED_MODULE_0__.atom)(initialValue, (get, set, update)=>{\n        const nextValue = typeof update === \"function\" ? update(get(anAtom)) : update;\n        set(anAtom, nextValue === RESET ? initialValue : nextValue);\n    });\n    return anAtom;\n}\nfunction atomWithReducer(initialValue, reducer) {\n    return (0,jotai_vanilla__WEBPACK_IMPORTED_MODULE_0__.atom)(initialValue, function(get, set, action) {\n        set(this, reducer(get(this), action));\n    });\n}\nfunction atomFamily(initializeAtom, areEqual) {\n    let shouldRemove = null;\n    const atoms = /* @__PURE__ */ new Map();\n    const createAtom = (param)=>{\n        let item;\n        if (areEqual === void 0) {\n            item = atoms.get(param);\n        } else {\n            for (const [key, value] of atoms){\n                if (areEqual(key, param)) {\n                    item = value;\n                    break;\n                }\n            }\n        }\n        if (item !== void 0) {\n            if (shouldRemove == null ? void 0 : shouldRemove(item[1], param)) {\n                createAtom.remove(param);\n            } else {\n                return item[0];\n            }\n        }\n        const newAtom = initializeAtom(param);\n        atoms.set(param, [\n            newAtom,\n            Date.now()\n        ]);\n        return newAtom;\n    };\n    createAtom.remove = (param)=>{\n        if (areEqual === void 0) {\n            atoms.delete(param);\n        } else {\n            for (const [key] of atoms){\n                if (areEqual(key, param)) {\n                    atoms.delete(key);\n                    break;\n                }\n            }\n        }\n    };\n    createAtom.setShouldRemove = (fn)=>{\n        shouldRemove = fn;\n        if (!shouldRemove) return;\n        for (const [key, value] of atoms){\n            if (shouldRemove(value[1], key)) {\n                atoms.delete(key);\n            }\n        }\n    };\n    return createAtom;\n}\nconst getCached$2 = (c, m, k)=>(m.has(k) ? m : m.set(k, c())).get(k);\nconst cache1$3 = /* @__PURE__ */ new WeakMap();\nconst memo3 = (create, dep1, dep2, dep3)=>{\n    const cache2 = getCached$2(()=>/* @__PURE__ */ new WeakMap(), cache1$3, dep1);\n    const cache3 = getCached$2(()=>/* @__PURE__ */ new WeakMap(), cache2, dep2);\n    return getCached$2(create, cache3, dep3);\n};\nfunction selectAtom(anAtom, selector, equalityFn = Object.is) {\n    return memo3(()=>{\n        const EMPTY = Symbol();\n        const selectValue = ([value, prevSlice])=>{\n            if (prevSlice === EMPTY) {\n                return selector(value);\n            }\n            const slice = selector(value, prevSlice);\n            return equalityFn(prevSlice, slice) ? prevSlice : slice;\n        };\n        const derivedAtom = (0,jotai_vanilla__WEBPACK_IMPORTED_MODULE_0__.atom)((get)=>{\n            const prev = get(derivedAtom);\n            const value = get(anAtom);\n            return selectValue([\n                value,\n                prev\n            ]);\n        });\n        derivedAtom.init = EMPTY;\n        return derivedAtom;\n    }, anAtom, selector, equalityFn);\n}\nconst frozenAtoms = /* @__PURE__ */ new WeakSet();\nconst deepFreeze = (obj)=>{\n    if (typeof obj !== \"object\" || obj === null) return;\n    Object.freeze(obj);\n    const propNames = Object.getOwnPropertyNames(obj);\n    for (const name of propNames){\n        const value = obj[name];\n        deepFreeze(value);\n    }\n    return obj;\n};\nfunction freezeAtom(anAtom) {\n    if (frozenAtoms.has(anAtom)) {\n        return anAtom;\n    }\n    frozenAtoms.add(anAtom);\n    const origRead = anAtom.read;\n    anAtom.read = function(get, options) {\n        return deepFreeze(origRead.call(this, get, options));\n    };\n    if (\"write\" in anAtom) {\n        const origWrite = anAtom.write;\n        anAtom.write = function(get, set, ...args) {\n            return origWrite.call(this, get, (...setArgs)=>{\n                if (setArgs[0] === anAtom) {\n                    setArgs[1] = deepFreeze(setArgs[1]);\n                }\n                return set(...setArgs);\n            }, ...args);\n        };\n    }\n    return anAtom;\n}\nfunction freezeAtomCreator(createAtom) {\n    if (( false ? 0 : void 0) !== \"production\") {\n        console.warn(\"[DEPRECATED] freezeAtomCreator is deprecated, define it on users end\");\n    }\n    return (...args)=>freezeAtom(createAtom(...args));\n}\nconst getCached$1 = (c, m, k)=>(m.has(k) ? m : m.set(k, c())).get(k);\nconst cache1$2 = /* @__PURE__ */ new WeakMap();\nconst memo2$1 = (create, dep1, dep2)=>{\n    const cache2 = getCached$1(()=>/* @__PURE__ */ new WeakMap(), cache1$2, dep1);\n    return getCached$1(create, cache2, dep2);\n};\nconst cacheKeyForEmptyKeyExtractor = {};\nconst isWritable = (atom2)=>!!atom2.write;\nconst isFunction = (x)=>typeof x === \"function\";\nfunction splitAtom(arrAtom, keyExtractor) {\n    return memo2$1(()=>{\n        const mappingCache = /* @__PURE__ */ new WeakMap();\n        const getMapping = (arr, prev)=>{\n            let mapping = mappingCache.get(arr);\n            if (mapping) {\n                return mapping;\n            }\n            const prevMapping = prev && mappingCache.get(prev);\n            const atomList = [];\n            const keyList = [];\n            arr.forEach((item, index)=>{\n                const key = keyExtractor ? keyExtractor(item) : index;\n                keyList[index] = key;\n                const cachedAtom = prevMapping && prevMapping.atomList[prevMapping.keyList.indexOf(key)];\n                if (cachedAtom) {\n                    atomList[index] = cachedAtom;\n                    return;\n                }\n                const read = (get)=>{\n                    const prev2 = get(mappingAtom);\n                    const currArr = get(arrAtom);\n                    const mapping2 = getMapping(currArr, prev2 == null ? void 0 : prev2.arr);\n                    const index2 = mapping2.keyList.indexOf(key);\n                    if (index2 < 0 || index2 >= currArr.length) {\n                        const prevItem = arr[getMapping(arr).keyList.indexOf(key)];\n                        if (prevItem) {\n                            return prevItem;\n                        }\n                        throw new Error(\"splitAtom: index out of bounds for read\");\n                    }\n                    return currArr[index2];\n                };\n                const write = (get, set, update)=>{\n                    const prev2 = get(mappingAtom);\n                    const arr2 = get(arrAtom);\n                    const mapping2 = getMapping(arr2, prev2 == null ? void 0 : prev2.arr);\n                    const index2 = mapping2.keyList.indexOf(key);\n                    if (index2 < 0 || index2 >= arr2.length) {\n                        throw new Error(\"splitAtom: index out of bounds for write\");\n                    }\n                    const nextItem = isFunction(update) ? update(arr2[index2]) : update;\n                    if (!Object.is(arr2[index2], nextItem)) {\n                        set(arrAtom, [\n                            ...arr2.slice(0, index2),\n                            nextItem,\n                            ...arr2.slice(index2 + 1)\n                        ]);\n                    }\n                };\n                atomList[index] = isWritable(arrAtom) ? (0,jotai_vanilla__WEBPACK_IMPORTED_MODULE_0__.atom)(read, write) : (0,jotai_vanilla__WEBPACK_IMPORTED_MODULE_0__.atom)(read);\n            });\n            if (prevMapping && prevMapping.keyList.length === keyList.length && prevMapping.keyList.every((x, i)=>x === keyList[i])) {\n                mapping = prevMapping;\n            } else {\n                mapping = {\n                    arr,\n                    atomList,\n                    keyList\n                };\n            }\n            mappingCache.set(arr, mapping);\n            return mapping;\n        };\n        const mappingAtom = (0,jotai_vanilla__WEBPACK_IMPORTED_MODULE_0__.atom)((get)=>{\n            const prev = get(mappingAtom);\n            const arr = get(arrAtom);\n            const mapping = getMapping(arr, prev == null ? void 0 : prev.arr);\n            return mapping;\n        });\n        if (( false ? 0 : void 0) !== \"production\") {\n            mappingAtom.debugPrivate = true;\n        }\n        mappingAtom.init = void 0;\n        const splittedAtom = isWritable(arrAtom) ? (0,jotai_vanilla__WEBPACK_IMPORTED_MODULE_0__.atom)((get)=>get(mappingAtom).atomList, (get, set, action)=>{\n            switch(action.type){\n                case \"remove\":\n                    {\n                        const index = get(splittedAtom).indexOf(action.atom);\n                        if (index >= 0) {\n                            const arr = get(arrAtom);\n                            set(arrAtom, [\n                                ...arr.slice(0, index),\n                                ...arr.slice(index + 1)\n                            ]);\n                        }\n                        break;\n                    }\n                case \"insert\":\n                    {\n                        const index = action.before ? get(splittedAtom).indexOf(action.before) : get(splittedAtom).length;\n                        if (index >= 0) {\n                            const arr = get(arrAtom);\n                            set(arrAtom, [\n                                ...arr.slice(0, index),\n                                action.value,\n                                ...arr.slice(index)\n                            ]);\n                        }\n                        break;\n                    }\n                case \"move\":\n                    {\n                        const index1 = get(splittedAtom).indexOf(action.atom);\n                        const index2 = action.before ? get(splittedAtom).indexOf(action.before) : get(splittedAtom).length;\n                        if (index1 >= 0 && index2 >= 0) {\n                            const arr = get(arrAtom);\n                            if (index1 < index2) {\n                                set(arrAtom, [\n                                    ...arr.slice(0, index1),\n                                    ...arr.slice(index1 + 1, index2),\n                                    arr[index1],\n                                    ...arr.slice(index2)\n                                ]);\n                            } else {\n                                set(arrAtom, [\n                                    ...arr.slice(0, index2),\n                                    arr[index1],\n                                    ...arr.slice(index2, index1),\n                                    ...arr.slice(index1 + 1)\n                                ]);\n                            }\n                        }\n                        break;\n                    }\n            }\n        }) : (0,jotai_vanilla__WEBPACK_IMPORTED_MODULE_0__.atom)((get)=>get(mappingAtom).atomList);\n        return splittedAtom;\n    }, arrAtom, keyExtractor || cacheKeyForEmptyKeyExtractor);\n}\nfunction atomWithDefault(getDefault) {\n    const EMPTY = Symbol();\n    const overwrittenAtom = (0,jotai_vanilla__WEBPACK_IMPORTED_MODULE_0__.atom)(EMPTY);\n    if (( false ? 0 : void 0) !== \"production\") {\n        overwrittenAtom.debugPrivate = true;\n    }\n    const anAtom = (0,jotai_vanilla__WEBPACK_IMPORTED_MODULE_0__.atom)((get, options)=>{\n        const overwritten = get(overwrittenAtom);\n        if (overwritten !== EMPTY) {\n            return overwritten;\n        }\n        return getDefault(get, options);\n    }, (get, set, update)=>{\n        if (update === RESET) {\n            set(overwrittenAtom, EMPTY);\n        } else if (typeof update === \"function\") {\n            const prevValue = get(anAtom);\n            set(overwrittenAtom, update(prevValue));\n        } else {\n            set(overwrittenAtom, update);\n        }\n    });\n    return anAtom;\n}\nconst isPromiseLike = (x)=>typeof (x == null ? void 0 : x.then) === \"function\";\nfunction withStorageValidator(validator) {\n    return (unknownStorage)=>{\n        const storage = {\n            ...unknownStorage,\n            getItem: (key, initialValue)=>{\n                const validate = (value2)=>{\n                    if (!validator(value2)) {\n                        return initialValue;\n                    }\n                    return value2;\n                };\n                const value = unknownStorage.getItem(key, initialValue);\n                if (isPromiseLike(value)) {\n                    return value.then(validate);\n                }\n                return validate(value);\n            }\n        };\n        return storage;\n    };\n}\nfunction createJSONStorage(getStringStorage = ()=>{\n    try {\n        return window.localStorage;\n    } catch (e) {\n        if (( false ? 0 : void 0) !== \"production\") {\n            if (false) {}\n        }\n        return void 0;\n    }\n}, options) {\n    var _a;\n    let lastStr;\n    let lastValue;\n    const storage = {\n        getItem: (key, initialValue)=>{\n            var _a2, _b;\n            const parse = (str2)=>{\n                str2 = str2 || \"\";\n                if (lastStr !== str2) {\n                    try {\n                        lastValue = JSON.parse(str2, options == null ? void 0 : options.reviver);\n                    } catch (e) {\n                        return initialValue;\n                    }\n                    lastStr = str2;\n                }\n                return lastValue;\n            };\n            const str = (_b = (_a2 = getStringStorage()) == null ? void 0 : _a2.getItem(key)) != null ? _b : null;\n            if (isPromiseLike(str)) {\n                return str.then(parse);\n            }\n            return parse(str);\n        },\n        setItem: (key, newValue)=>{\n            var _a2;\n            return (_a2 = getStringStorage()) == null ? void 0 : _a2.setItem(key, JSON.stringify(newValue, options == null ? void 0 : options.replacer));\n        },\n        removeItem: (key)=>{\n            var _a2;\n            return (_a2 = getStringStorage()) == null ? void 0 : _a2.removeItem(key);\n        }\n    };\n    const createHandleSubscribe = (subscriber2)=>(key, callback, initialValue)=>subscriber2(key, (v)=>{\n                let newValue;\n                try {\n                    newValue = JSON.parse(v || \"\");\n                } catch (e) {\n                    newValue = initialValue;\n                }\n                callback(newValue);\n            });\n    let subscriber;\n    try {\n        subscriber = (_a = getStringStorage()) == null ? void 0 : _a.subscribe;\n    } catch (e) {}\n    if (!subscriber && \"undefined\" !== \"undefined\" && 0 && 0) {}\n    if (subscriber) {\n        storage.subscribe = createHandleSubscribe(subscriber);\n    }\n    return storage;\n}\nconst defaultStorage = createJSONStorage();\nfunction atomWithStorage(key, initialValue, storage = defaultStorage, options) {\n    const getOnInit = options == null ? void 0 : options.getOnInit;\n    const baseAtom = (0,jotai_vanilla__WEBPACK_IMPORTED_MODULE_0__.atom)(getOnInit ? storage.getItem(key, initialValue) : initialValue);\n    if (( false ? 0 : void 0) !== \"production\") {\n        baseAtom.debugPrivate = true;\n    }\n    baseAtom.onMount = (setAtom)=>{\n        setAtom(storage.getItem(key, initialValue));\n        let unsub;\n        if (storage.subscribe) {\n            unsub = storage.subscribe(key, setAtom, initialValue);\n        }\n        return unsub;\n    };\n    const anAtom = (0,jotai_vanilla__WEBPACK_IMPORTED_MODULE_0__.atom)((get)=>get(baseAtom), (get, set, update)=>{\n        const nextValue = typeof update === \"function\" ? update(get(baseAtom)) : update;\n        if (nextValue === RESET) {\n            set(baseAtom, initialValue);\n            return storage.removeItem(key);\n        }\n        if (nextValue instanceof Promise) {\n            return nextValue.then((resolvedValue)=>{\n                set(baseAtom, resolvedValue);\n                return storage.setItem(key, resolvedValue);\n            });\n        }\n        set(baseAtom, nextValue);\n        return storage.setItem(key, nextValue);\n    });\n    return anAtom;\n}\nfunction atomWithObservable(getObservable, options) {\n    const returnResultData = (result)=>{\n        if (\"e\" in result) {\n            throw result.e;\n        }\n        return result.d;\n    };\n    const observableResultAtom = (0,jotai_vanilla__WEBPACK_IMPORTED_MODULE_0__.atom)((get)=>{\n        var _a;\n        let observable = getObservable(get);\n        const itself = (_a = observable[Symbol.observable]) == null ? void 0 : _a.call(observable);\n        if (itself) {\n            observable = itself;\n        }\n        let resolve;\n        const makePending = ()=>new Promise((r)=>{\n                resolve = r;\n            });\n        const initialResult = options && \"initialValue\" in options ? {\n            d: typeof options.initialValue === \"function\" ? options.initialValue() : options.initialValue\n        } : makePending();\n        let setResult;\n        let lastResult;\n        const listener = (result)=>{\n            lastResult = result;\n            resolve == null ? void 0 : resolve(result);\n            setResult == null ? void 0 : setResult(result);\n        };\n        let subscription;\n        let timer;\n        const isNotMounted = ()=>!setResult;\n        const start = ()=>{\n            if (subscription) {\n                clearTimeout(timer);\n                subscription.unsubscribe();\n            }\n            subscription = observable.subscribe({\n                next: (d)=>listener({\n                        d\n                    }),\n                error: (e)=>listener({\n                        e\n                    }),\n                complete: ()=>{}\n            });\n            if (isNotMounted() && (options == null ? void 0 : options.unstable_timeout)) {\n                timer = setTimeout(()=>{\n                    if (subscription) {\n                        subscription.unsubscribe();\n                        subscription = void 0;\n                    }\n                }, options.unstable_timeout);\n            }\n        };\n        start();\n        const resultAtom = (0,jotai_vanilla__WEBPACK_IMPORTED_MODULE_0__.atom)(lastResult || initialResult);\n        if (( false ? 0 : void 0) !== \"production\") {\n            resultAtom.debugPrivate = true;\n        }\n        resultAtom.onMount = (update)=>{\n            setResult = update;\n            if (lastResult) {\n                update(lastResult);\n            }\n            if (subscription) {\n                clearTimeout(timer);\n            } else {\n                start();\n            }\n            return ()=>{\n                setResult = void 0;\n                if (subscription) {\n                    subscription.unsubscribe();\n                    subscription = void 0;\n                }\n            };\n        };\n        return [\n            resultAtom,\n            observable,\n            makePending,\n            start,\n            isNotMounted\n        ];\n    });\n    if (( false ? 0 : void 0) !== \"production\") {\n        observableResultAtom.debugPrivate = true;\n    }\n    const observableAtom = (0,jotai_vanilla__WEBPACK_IMPORTED_MODULE_0__.atom)((get)=>{\n        const [resultAtom] = get(observableResultAtom);\n        const result = get(resultAtom);\n        if (result instanceof Promise) {\n            return result.then(returnResultData);\n        }\n        return returnResultData(result);\n    }, (get, set, data)=>{\n        const [resultAtom, observable, makePending, start, isNotMounted] = get(observableResultAtom);\n        if (\"next\" in observable) {\n            if (isNotMounted()) {\n                set(resultAtom, makePending());\n                start();\n            }\n            observable.next(data);\n        } else {\n            throw new Error(\"observable is not subject\");\n        }\n    });\n    return observableAtom;\n}\nconst cache1$1 = /* @__PURE__ */ new WeakMap();\nconst memo1 = (create, dep1)=>(cache1$1.has(dep1) ? cache1$1 : cache1$1.set(dep1, create())).get(dep1);\nconst isPromise$1 = (x)=>x instanceof Promise;\nconst LOADING = {\n    state: \"loading\"\n};\nfunction loadable(anAtom) {\n    return memo1(()=>{\n        const loadableCache = /* @__PURE__ */ new WeakMap();\n        const refreshAtom = (0,jotai_vanilla__WEBPACK_IMPORTED_MODULE_0__.atom)(0);\n        if (( false ? 0 : void 0) !== \"production\") {\n            refreshAtom.debugPrivate = true;\n        }\n        const derivedAtom = (0,jotai_vanilla__WEBPACK_IMPORTED_MODULE_0__.atom)((get, { setSelf })=>{\n            get(refreshAtom);\n            let value;\n            try {\n                value = get(anAtom);\n            } catch (error) {\n                return {\n                    state: \"hasError\",\n                    error\n                };\n            }\n            if (!isPromise$1(value)) {\n                return {\n                    state: \"hasData\",\n                    data: value\n                };\n            }\n            const promise = value;\n            const cached1 = loadableCache.get(promise);\n            if (cached1) {\n                return cached1;\n            }\n            if (promise.status === \"fulfilled\") {\n                loadableCache.set(promise, {\n                    state: \"hasData\",\n                    data: promise.value\n                });\n            } else if (promise.status === \"rejected\") {\n                loadableCache.set(promise, {\n                    state: \"hasError\",\n                    error: promise.reason\n                });\n            } else {\n                promise.then((data)=>{\n                    loadableCache.set(promise, {\n                        state: \"hasData\",\n                        data\n                    });\n                }, (error)=>{\n                    loadableCache.set(promise, {\n                        state: \"hasError\",\n                        error\n                    });\n                }).finally(setSelf);\n            }\n            const cached2 = loadableCache.get(promise);\n            if (cached2) {\n                return cached2;\n            }\n            loadableCache.set(promise, LOADING);\n            return LOADING;\n        }, (_get, set)=>{\n            set(refreshAtom, (c)=>c + 1);\n        });\n        if (( false ? 0 : void 0) !== \"production\") {\n            derivedAtom.debugPrivate = true;\n        }\n        return (0,jotai_vanilla__WEBPACK_IMPORTED_MODULE_0__.atom)((get)=>get(derivedAtom));\n    }, anAtom);\n}\nconst getCached = (c, m, k)=>(m.has(k) ? m : m.set(k, c())).get(k);\nconst cache1 = /* @__PURE__ */ new WeakMap();\nconst memo2 = (create, dep1, dep2)=>{\n    const cache2 = getCached(()=>/* @__PURE__ */ new WeakMap(), cache1, dep1);\n    return getCached(create, cache2, dep2);\n};\nconst isPromise = (x)=>x instanceof Promise;\nconst defaultFallback = ()=>void 0;\nfunction unwrap(anAtom, fallback = defaultFallback) {\n    return memo2(()=>{\n        const promiseErrorCache = /* @__PURE__ */ new WeakMap();\n        const promiseResultCache = /* @__PURE__ */ new WeakMap();\n        const refreshAtom = (0,jotai_vanilla__WEBPACK_IMPORTED_MODULE_0__.atom)(0);\n        if (( false ? 0 : void 0) !== \"production\") {\n            refreshAtom.debugPrivate = true;\n        }\n        const promiseAndValueAtom = (0,jotai_vanilla__WEBPACK_IMPORTED_MODULE_0__.atom)((get, { setSelf })=>{\n            get(refreshAtom);\n            const prev = get(promiseAndValueAtom);\n            const promise = get(anAtom);\n            if (!isPromise(promise)) {\n                return {\n                    v: promise\n                };\n            }\n            if (promise !== (prev == null ? void 0 : prev.p)) {\n                if (promise.status === \"fulfilled\") {\n                    promiseResultCache.set(promise, promise.value);\n                } else if (promise.status === \"rejected\") {\n                    promiseErrorCache.set(promise, promise.reason);\n                } else {\n                    promise.then((v)=>promiseResultCache.set(promise, v), (e)=>promiseErrorCache.set(promise, e)).finally(setSelf);\n                }\n            }\n            if (promiseErrorCache.has(promise)) {\n                throw promiseErrorCache.get(promise);\n            }\n            if (promiseResultCache.has(promise)) {\n                return {\n                    p: promise,\n                    v: promiseResultCache.get(promise)\n                };\n            }\n            if (prev && \"v\" in prev) {\n                return {\n                    p: promise,\n                    f: fallback(prev.v),\n                    v: prev.v\n                };\n            }\n            return {\n                p: promise,\n                f: fallback()\n            };\n        }, (_get, set)=>{\n            set(refreshAtom, (c)=>c + 1);\n        });\n        promiseAndValueAtom.init = void 0;\n        if (( false ? 0 : void 0) !== \"production\") {\n            promiseAndValueAtom.debugPrivate = true;\n        }\n        return (0,jotai_vanilla__WEBPACK_IMPORTED_MODULE_0__.atom)((get)=>{\n            const state = get(promiseAndValueAtom);\n            if (\"f\" in state) {\n                return state.f;\n            }\n            return state.v;\n        }, (_get, set, ...args)=>set(anAtom, ...args));\n    }, anAtom, fallback);\n}\nfunction atomWithRefresh(read, write) {\n    const refreshAtom = (0,jotai_vanilla__WEBPACK_IMPORTED_MODULE_0__.atom)(0);\n    if (( false ? 0 : void 0) !== \"production\") {\n        refreshAtom.debugPrivate = true;\n    }\n    return (0,jotai_vanilla__WEBPACK_IMPORTED_MODULE_0__.atom)((get, options)=>{\n        get(refreshAtom);\n        return read(get, options);\n    }, (get, set, ...args)=>{\n        if (args.length === 0) {\n            set(refreshAtom, (c)=>c + 1);\n        } else if (write) {\n            return write(get, set, ...args);\n        }\n    });\n}\nfunction atomWithLazy(makeInitial) {\n    const a = (0,jotai_vanilla__WEBPACK_IMPORTED_MODULE_0__.atom)(void 0);\n    delete a.init;\n    Object.defineProperty(a, \"init\", {\n        get () {\n            return makeInitial();\n        }\n    });\n    return a;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/jotai/esm/vanilla/utils.mjs\n");

/***/ })

};
;