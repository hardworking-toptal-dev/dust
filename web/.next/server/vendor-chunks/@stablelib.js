"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@stablelib";
exports.ids = ["vendor-chunks/@stablelib"];
exports.modules = {

/***/ "(ssr)/../node_modules/@stablelib/binary/lib/binary.js":
/*!*******************************************************!*\
  !*** ../node_modules/@stablelib/binary/lib/binary.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n/**\n * Package binary provides functions for encoding and decoding numbers in byte arrays.\n */ var int_1 = __webpack_require__(/*! @stablelib/int */ \"(ssr)/../node_modules/@stablelib/int/lib/int.js\");\n// TODO(dchest): add asserts for correct value ranges and array offsets.\n/**\n * Reads 2 bytes from array starting at offset as big-endian\n * signed 16-bit integer and returns it.\n */ function readInt16BE(array, offset) {\n    if (offset === void 0) {\n        offset = 0;\n    }\n    return (array[offset + 0] << 8 | array[offset + 1]) << 16 >> 16;\n}\nexports.readInt16BE = readInt16BE;\n/**\n * Reads 2 bytes from array starting at offset as big-endian\n * unsigned 16-bit integer and returns it.\n */ function readUint16BE(array, offset) {\n    if (offset === void 0) {\n        offset = 0;\n    }\n    return (array[offset + 0] << 8 | array[offset + 1]) >>> 0;\n}\nexports.readUint16BE = readUint16BE;\n/**\n * Reads 2 bytes from array starting at offset as little-endian\n * signed 16-bit integer and returns it.\n */ function readInt16LE(array, offset) {\n    if (offset === void 0) {\n        offset = 0;\n    }\n    return (array[offset + 1] << 8 | array[offset]) << 16 >> 16;\n}\nexports.readInt16LE = readInt16LE;\n/**\n * Reads 2 bytes from array starting at offset as little-endian\n * unsigned 16-bit integer and returns it.\n */ function readUint16LE(array, offset) {\n    if (offset === void 0) {\n        offset = 0;\n    }\n    return (array[offset + 1] << 8 | array[offset]) >>> 0;\n}\nexports.readUint16LE = readUint16LE;\n/**\n * Writes 2-byte big-endian representation of 16-bit unsigned\n * value to byte array starting at offset.\n *\n * If byte array is not given, creates a new 2-byte one.\n *\n * Returns the output byte array.\n */ function writeUint16BE(value, out, offset) {\n    if (out === void 0) {\n        out = new Uint8Array(2);\n    }\n    if (offset === void 0) {\n        offset = 0;\n    }\n    out[offset + 0] = value >>> 8;\n    out[offset + 1] = value >>> 0;\n    return out;\n}\nexports.writeUint16BE = writeUint16BE;\nexports.writeInt16BE = writeUint16BE;\n/**\n * Writes 2-byte little-endian representation of 16-bit unsigned\n * value to array starting at offset.\n *\n * If byte array is not given, creates a new 2-byte one.\n *\n * Returns the output byte array.\n */ function writeUint16LE(value, out, offset) {\n    if (out === void 0) {\n        out = new Uint8Array(2);\n    }\n    if (offset === void 0) {\n        offset = 0;\n    }\n    out[offset + 0] = value >>> 0;\n    out[offset + 1] = value >>> 8;\n    return out;\n}\nexports.writeUint16LE = writeUint16LE;\nexports.writeInt16LE = writeUint16LE;\n/**\n * Reads 4 bytes from array starting at offset as big-endian\n * signed 32-bit integer and returns it.\n */ function readInt32BE(array, offset) {\n    if (offset === void 0) {\n        offset = 0;\n    }\n    return array[offset] << 24 | array[offset + 1] << 16 | array[offset + 2] << 8 | array[offset + 3];\n}\nexports.readInt32BE = readInt32BE;\n/**\n * Reads 4 bytes from array starting at offset as big-endian\n * unsigned 32-bit integer and returns it.\n */ function readUint32BE(array, offset) {\n    if (offset === void 0) {\n        offset = 0;\n    }\n    return (array[offset] << 24 | array[offset + 1] << 16 | array[offset + 2] << 8 | array[offset + 3]) >>> 0;\n}\nexports.readUint32BE = readUint32BE;\n/**\n * Reads 4 bytes from array starting at offset as little-endian\n * signed 32-bit integer and returns it.\n */ function readInt32LE(array, offset) {\n    if (offset === void 0) {\n        offset = 0;\n    }\n    return array[offset + 3] << 24 | array[offset + 2] << 16 | array[offset + 1] << 8 | array[offset];\n}\nexports.readInt32LE = readInt32LE;\n/**\n * Reads 4 bytes from array starting at offset as little-endian\n * unsigned 32-bit integer and returns it.\n */ function readUint32LE(array, offset) {\n    if (offset === void 0) {\n        offset = 0;\n    }\n    return (array[offset + 3] << 24 | array[offset + 2] << 16 | array[offset + 1] << 8 | array[offset]) >>> 0;\n}\nexports.readUint32LE = readUint32LE;\n/**\n * Writes 4-byte big-endian representation of 32-bit unsigned\n * value to byte array starting at offset.\n *\n * If byte array is not given, creates a new 4-byte one.\n *\n * Returns the output byte array.\n */ function writeUint32BE(value, out, offset) {\n    if (out === void 0) {\n        out = new Uint8Array(4);\n    }\n    if (offset === void 0) {\n        offset = 0;\n    }\n    out[offset + 0] = value >>> 24;\n    out[offset + 1] = value >>> 16;\n    out[offset + 2] = value >>> 8;\n    out[offset + 3] = value >>> 0;\n    return out;\n}\nexports.writeUint32BE = writeUint32BE;\nexports.writeInt32BE = writeUint32BE;\n/**\n * Writes 4-byte little-endian representation of 32-bit unsigned\n * value to array starting at offset.\n *\n * If byte array is not given, creates a new 4-byte one.\n *\n * Returns the output byte array.\n */ function writeUint32LE(value, out, offset) {\n    if (out === void 0) {\n        out = new Uint8Array(4);\n    }\n    if (offset === void 0) {\n        offset = 0;\n    }\n    out[offset + 0] = value >>> 0;\n    out[offset + 1] = value >>> 8;\n    out[offset + 2] = value >>> 16;\n    out[offset + 3] = value >>> 24;\n    return out;\n}\nexports.writeUint32LE = writeUint32LE;\nexports.writeInt32LE = writeUint32LE;\n/**\n * Reads 8 bytes from array starting at offset as big-endian\n * signed 64-bit integer and returns it.\n *\n * IMPORTANT: due to JavaScript limitation, supports exact\n * numbers in range -9007199254740991 to 9007199254740991.\n * If the number stored in the byte array is outside this range,\n * the result is not exact.\n */ function readInt64BE(array, offset) {\n    if (offset === void 0) {\n        offset = 0;\n    }\n    var hi = readInt32BE(array, offset);\n    var lo = readInt32BE(array, offset + 4);\n    return hi * 0x100000000 + lo - (lo >> 31) * 0x100000000;\n}\nexports.readInt64BE = readInt64BE;\n/**\n * Reads 8 bytes from array starting at offset as big-endian\n * unsigned 64-bit integer and returns it.\n *\n * IMPORTANT: due to JavaScript limitation, supports values up to 2^53-1.\n */ function readUint64BE(array, offset) {\n    if (offset === void 0) {\n        offset = 0;\n    }\n    var hi = readUint32BE(array, offset);\n    var lo = readUint32BE(array, offset + 4);\n    return hi * 0x100000000 + lo;\n}\nexports.readUint64BE = readUint64BE;\n/**\n * Reads 8 bytes from array starting at offset as little-endian\n * signed 64-bit integer and returns it.\n *\n * IMPORTANT: due to JavaScript limitation, supports exact\n * numbers in range -9007199254740991 to 9007199254740991.\n * If the number stored in the byte array is outside this range,\n * the result is not exact.\n */ function readInt64LE(array, offset) {\n    if (offset === void 0) {\n        offset = 0;\n    }\n    var lo = readInt32LE(array, offset);\n    var hi = readInt32LE(array, offset + 4);\n    return hi * 0x100000000 + lo - (lo >> 31) * 0x100000000;\n}\nexports.readInt64LE = readInt64LE;\n/**\n * Reads 8 bytes from array starting at offset as little-endian\n * unsigned 64-bit integer and returns it.\n *\n * IMPORTANT: due to JavaScript limitation, supports values up to 2^53-1.\n */ function readUint64LE(array, offset) {\n    if (offset === void 0) {\n        offset = 0;\n    }\n    var lo = readUint32LE(array, offset);\n    var hi = readUint32LE(array, offset + 4);\n    return hi * 0x100000000 + lo;\n}\nexports.readUint64LE = readUint64LE;\n/**\n * Writes 8-byte big-endian representation of 64-bit unsigned\n * value to byte array starting at offset.\n *\n * Due to JavaScript limitation, supports values up to 2^53-1.\n *\n * If byte array is not given, creates a new 8-byte one.\n *\n * Returns the output byte array.\n */ function writeUint64BE(value, out, offset) {\n    if (out === void 0) {\n        out = new Uint8Array(8);\n    }\n    if (offset === void 0) {\n        offset = 0;\n    }\n    writeUint32BE(value / 0x100000000 >>> 0, out, offset);\n    writeUint32BE(value >>> 0, out, offset + 4);\n    return out;\n}\nexports.writeUint64BE = writeUint64BE;\nexports.writeInt64BE = writeUint64BE;\n/**\n * Writes 8-byte little-endian representation of 64-bit unsigned\n * value to byte array starting at offset.\n *\n * Due to JavaScript limitation, supports values up to 2^53-1.\n *\n * If byte array is not given, creates a new 8-byte one.\n *\n * Returns the output byte array.\n */ function writeUint64LE(value, out, offset) {\n    if (out === void 0) {\n        out = new Uint8Array(8);\n    }\n    if (offset === void 0) {\n        offset = 0;\n    }\n    writeUint32LE(value >>> 0, out, offset);\n    writeUint32LE(value / 0x100000000 >>> 0, out, offset + 4);\n    return out;\n}\nexports.writeUint64LE = writeUint64LE;\nexports.writeInt64LE = writeUint64LE;\n/**\n * Reads bytes from array starting at offset as big-endian\n * unsigned bitLen-bit integer and returns it.\n *\n * Supports bit lengths divisible by 8, up to 48.\n */ function readUintBE(bitLength, array, offset) {\n    if (offset === void 0) {\n        offset = 0;\n    }\n    // TODO(dchest): implement support for bitLengths non-divisible by 8\n    if (bitLength % 8 !== 0) {\n        throw new Error(\"readUintBE supports only bitLengths divisible by 8\");\n    }\n    if (bitLength / 8 > array.length - offset) {\n        throw new Error(\"readUintBE: array is too short for the given bitLength\");\n    }\n    var result = 0;\n    var mul = 1;\n    for(var i = bitLength / 8 + offset - 1; i >= offset; i--){\n        result += array[i] * mul;\n        mul *= 256;\n    }\n    return result;\n}\nexports.readUintBE = readUintBE;\n/**\n * Reads bytes from array starting at offset as little-endian\n * unsigned bitLen-bit integer and returns it.\n *\n * Supports bit lengths divisible by 8, up to 48.\n */ function readUintLE(bitLength, array, offset) {\n    if (offset === void 0) {\n        offset = 0;\n    }\n    // TODO(dchest): implement support for bitLengths non-divisible by 8\n    if (bitLength % 8 !== 0) {\n        throw new Error(\"readUintLE supports only bitLengths divisible by 8\");\n    }\n    if (bitLength / 8 > array.length - offset) {\n        throw new Error(\"readUintLE: array is too short for the given bitLength\");\n    }\n    var result = 0;\n    var mul = 1;\n    for(var i = offset; i < offset + bitLength / 8; i++){\n        result += array[i] * mul;\n        mul *= 256;\n    }\n    return result;\n}\nexports.readUintLE = readUintLE;\n/**\n * Writes a big-endian representation of bitLen-bit unsigned\n * value to array starting at offset.\n *\n * Supports bit lengths divisible by 8, up to 48.\n *\n * If byte array is not given, creates a new one.\n *\n * Returns the output byte array.\n */ function writeUintBE(bitLength, value, out, offset) {\n    if (out === void 0) {\n        out = new Uint8Array(bitLength / 8);\n    }\n    if (offset === void 0) {\n        offset = 0;\n    }\n    // TODO(dchest): implement support for bitLengths non-divisible by 8\n    if (bitLength % 8 !== 0) {\n        throw new Error(\"writeUintBE supports only bitLengths divisible by 8\");\n    }\n    if (!int_1.isSafeInteger(value)) {\n        throw new Error(\"writeUintBE value must be an integer\");\n    }\n    var div = 1;\n    for(var i = bitLength / 8 + offset - 1; i >= offset; i--){\n        out[i] = value / div & 0xff;\n        div *= 256;\n    }\n    return out;\n}\nexports.writeUintBE = writeUintBE;\n/**\n * Writes a little-endian representation of bitLen-bit unsigned\n * value to array starting at offset.\n *\n * Supports bit lengths divisible by 8, up to 48.\n *\n * If byte array is not given, creates a new one.\n *\n * Returns the output byte array.\n */ function writeUintLE(bitLength, value, out, offset) {\n    if (out === void 0) {\n        out = new Uint8Array(bitLength / 8);\n    }\n    if (offset === void 0) {\n        offset = 0;\n    }\n    // TODO(dchest): implement support for bitLengths non-divisible by 8\n    if (bitLength % 8 !== 0) {\n        throw new Error(\"writeUintLE supports only bitLengths divisible by 8\");\n    }\n    if (!int_1.isSafeInteger(value)) {\n        throw new Error(\"writeUintLE value must be an integer\");\n    }\n    var div = 1;\n    for(var i = offset; i < offset + bitLength / 8; i++){\n        out[i] = value / div & 0xff;\n        div *= 256;\n    }\n    return out;\n}\nexports.writeUintLE = writeUintLE;\n/**\n * Reads 4 bytes from array starting at offset as big-endian\n * 32-bit floating-point number and returns it.\n */ function readFloat32BE(array, offset) {\n    if (offset === void 0) {\n        offset = 0;\n    }\n    var view = new DataView(array.buffer, array.byteOffset, array.byteLength);\n    return view.getFloat32(offset);\n}\nexports.readFloat32BE = readFloat32BE;\n/**\n * Reads 4 bytes from array starting at offset as little-endian\n * 32-bit floating-point number and returns it.\n */ function readFloat32LE(array, offset) {\n    if (offset === void 0) {\n        offset = 0;\n    }\n    var view = new DataView(array.buffer, array.byteOffset, array.byteLength);\n    return view.getFloat32(offset, true);\n}\nexports.readFloat32LE = readFloat32LE;\n/**\n * Reads 8 bytes from array starting at offset as big-endian\n * 64-bit floating-point number (\"double\") and returns it.\n */ function readFloat64BE(array, offset) {\n    if (offset === void 0) {\n        offset = 0;\n    }\n    var view = new DataView(array.buffer, array.byteOffset, array.byteLength);\n    return view.getFloat64(offset);\n}\nexports.readFloat64BE = readFloat64BE;\n/**\n * Reads 8 bytes from array starting at offset as little-endian\n * 64-bit floating-point number (\"double\") and returns it.\n */ function readFloat64LE(array, offset) {\n    if (offset === void 0) {\n        offset = 0;\n    }\n    var view = new DataView(array.buffer, array.byteOffset, array.byteLength);\n    return view.getFloat64(offset, true);\n}\nexports.readFloat64LE = readFloat64LE;\n/**\n * Writes 4-byte big-endian floating-point representation of value\n * to byte array starting at offset.\n *\n * If byte array is not given, creates a new 4-byte one.\n *\n * Returns the output byte array.\n */ function writeFloat32BE(value, out, offset) {\n    if (out === void 0) {\n        out = new Uint8Array(4);\n    }\n    if (offset === void 0) {\n        offset = 0;\n    }\n    var view = new DataView(out.buffer, out.byteOffset, out.byteLength);\n    view.setFloat32(offset, value);\n    return out;\n}\nexports.writeFloat32BE = writeFloat32BE;\n/**\n * Writes 4-byte little-endian floating-point representation of value\n * to byte array starting at offset.\n *\n * If byte array is not given, creates a new 4-byte one.\n *\n * Returns the output byte array.\n */ function writeFloat32LE(value, out, offset) {\n    if (out === void 0) {\n        out = new Uint8Array(4);\n    }\n    if (offset === void 0) {\n        offset = 0;\n    }\n    var view = new DataView(out.buffer, out.byteOffset, out.byteLength);\n    view.setFloat32(offset, value, true);\n    return out;\n}\nexports.writeFloat32LE = writeFloat32LE;\n/**\n * Writes 8-byte big-endian floating-point representation of value\n * to byte array starting at offset.\n *\n * If byte array is not given, creates a new 8-byte one.\n *\n * Returns the output byte array.\n */ function writeFloat64BE(value, out, offset) {\n    if (out === void 0) {\n        out = new Uint8Array(8);\n    }\n    if (offset === void 0) {\n        offset = 0;\n    }\n    var view = new DataView(out.buffer, out.byteOffset, out.byteLength);\n    view.setFloat64(offset, value);\n    return out;\n}\nexports.writeFloat64BE = writeFloat64BE;\n/**\n * Writes 8-byte little-endian floating-point representation of value\n * to byte array starting at offset.\n *\n * If byte array is not given, creates a new 8-byte one.\n *\n * Returns the output byte array.\n */ function writeFloat64LE(value, out, offset) {\n    if (out === void 0) {\n        out = new Uint8Array(8);\n    }\n    if (offset === void 0) {\n        offset = 0;\n    }\n    var view = new DataView(out.buffer, out.byteOffset, out.byteLength);\n    view.setFloat64(offset, value, true);\n    return out;\n}\nexports.writeFloat64LE = writeFloat64LE; //# sourceMappingURL=binary.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@stablelib/binary/lib/binary.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@stablelib/chacha/lib/chacha.js":
/*!*******************************************************!*\
  !*** ../node_modules/@stablelib/chacha/lib/chacha.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n/**\n * Package chacha implements ChaCha stream cipher.\n */ var binary_1 = __webpack_require__(/*! @stablelib/binary */ \"(ssr)/../node_modules/@stablelib/binary/lib/binary.js\");\nvar wipe_1 = __webpack_require__(/*! @stablelib/wipe */ \"(ssr)/../node_modules/@stablelib/wipe/lib/wipe.js\");\n// Number of ChaCha rounds (ChaCha20).\nvar ROUNDS = 20;\n// Applies the ChaCha core function to 16-byte input,\n// 32-byte key key, and puts the result into 64-byte array out.\nfunction core(out, input, key) {\n    var j0 = 0x61707865; // \"expa\"  -- ChaCha's \"sigma\" constant\n    var j1 = 0x3320646E; // \"nd 3\"     for 32-byte keys\n    var j2 = 0x79622D32; // \"2-by\"\n    var j3 = 0x6B206574; // \"te k\"\n    var j4 = key[3] << 24 | key[2] << 16 | key[1] << 8 | key[0];\n    var j5 = key[7] << 24 | key[6] << 16 | key[5] << 8 | key[4];\n    var j6 = key[11] << 24 | key[10] << 16 | key[9] << 8 | key[8];\n    var j7 = key[15] << 24 | key[14] << 16 | key[13] << 8 | key[12];\n    var j8 = key[19] << 24 | key[18] << 16 | key[17] << 8 | key[16];\n    var j9 = key[23] << 24 | key[22] << 16 | key[21] << 8 | key[20];\n    var j10 = key[27] << 24 | key[26] << 16 | key[25] << 8 | key[24];\n    var j11 = key[31] << 24 | key[30] << 16 | key[29] << 8 | key[28];\n    var j12 = input[3] << 24 | input[2] << 16 | input[1] << 8 | input[0];\n    var j13 = input[7] << 24 | input[6] << 16 | input[5] << 8 | input[4];\n    var j14 = input[11] << 24 | input[10] << 16 | input[9] << 8 | input[8];\n    var j15 = input[15] << 24 | input[14] << 16 | input[13] << 8 | input[12];\n    var x0 = j0;\n    var x1 = j1;\n    var x2 = j2;\n    var x3 = j3;\n    var x4 = j4;\n    var x5 = j5;\n    var x6 = j6;\n    var x7 = j7;\n    var x8 = j8;\n    var x9 = j9;\n    var x10 = j10;\n    var x11 = j11;\n    var x12 = j12;\n    var x13 = j13;\n    var x14 = j14;\n    var x15 = j15;\n    for(var i = 0; i < ROUNDS; i += 2){\n        x0 = x0 + x4 | 0;\n        x12 ^= x0;\n        x12 = x12 >>> 32 - 16 | x12 << 16;\n        x8 = x8 + x12 | 0;\n        x4 ^= x8;\n        x4 = x4 >>> 32 - 12 | x4 << 12;\n        x1 = x1 + x5 | 0;\n        x13 ^= x1;\n        x13 = x13 >>> 32 - 16 | x13 << 16;\n        x9 = x9 + x13 | 0;\n        x5 ^= x9;\n        x5 = x5 >>> 32 - 12 | x5 << 12;\n        x2 = x2 + x6 | 0;\n        x14 ^= x2;\n        x14 = x14 >>> 32 - 16 | x14 << 16;\n        x10 = x10 + x14 | 0;\n        x6 ^= x10;\n        x6 = x6 >>> 32 - 12 | x6 << 12;\n        x3 = x3 + x7 | 0;\n        x15 ^= x3;\n        x15 = x15 >>> 32 - 16 | x15 << 16;\n        x11 = x11 + x15 | 0;\n        x7 ^= x11;\n        x7 = x7 >>> 32 - 12 | x7 << 12;\n        x2 = x2 + x6 | 0;\n        x14 ^= x2;\n        x14 = x14 >>> 32 - 8 | x14 << 8;\n        x10 = x10 + x14 | 0;\n        x6 ^= x10;\n        x6 = x6 >>> 32 - 7 | x6 << 7;\n        x3 = x3 + x7 | 0;\n        x15 ^= x3;\n        x15 = x15 >>> 32 - 8 | x15 << 8;\n        x11 = x11 + x15 | 0;\n        x7 ^= x11;\n        x7 = x7 >>> 32 - 7 | x7 << 7;\n        x1 = x1 + x5 | 0;\n        x13 ^= x1;\n        x13 = x13 >>> 32 - 8 | x13 << 8;\n        x9 = x9 + x13 | 0;\n        x5 ^= x9;\n        x5 = x5 >>> 32 - 7 | x5 << 7;\n        x0 = x0 + x4 | 0;\n        x12 ^= x0;\n        x12 = x12 >>> 32 - 8 | x12 << 8;\n        x8 = x8 + x12 | 0;\n        x4 ^= x8;\n        x4 = x4 >>> 32 - 7 | x4 << 7;\n        x0 = x0 + x5 | 0;\n        x15 ^= x0;\n        x15 = x15 >>> 32 - 16 | x15 << 16;\n        x10 = x10 + x15 | 0;\n        x5 ^= x10;\n        x5 = x5 >>> 32 - 12 | x5 << 12;\n        x1 = x1 + x6 | 0;\n        x12 ^= x1;\n        x12 = x12 >>> 32 - 16 | x12 << 16;\n        x11 = x11 + x12 | 0;\n        x6 ^= x11;\n        x6 = x6 >>> 32 - 12 | x6 << 12;\n        x2 = x2 + x7 | 0;\n        x13 ^= x2;\n        x13 = x13 >>> 32 - 16 | x13 << 16;\n        x8 = x8 + x13 | 0;\n        x7 ^= x8;\n        x7 = x7 >>> 32 - 12 | x7 << 12;\n        x3 = x3 + x4 | 0;\n        x14 ^= x3;\n        x14 = x14 >>> 32 - 16 | x14 << 16;\n        x9 = x9 + x14 | 0;\n        x4 ^= x9;\n        x4 = x4 >>> 32 - 12 | x4 << 12;\n        x2 = x2 + x7 | 0;\n        x13 ^= x2;\n        x13 = x13 >>> 32 - 8 | x13 << 8;\n        x8 = x8 + x13 | 0;\n        x7 ^= x8;\n        x7 = x7 >>> 32 - 7 | x7 << 7;\n        x3 = x3 + x4 | 0;\n        x14 ^= x3;\n        x14 = x14 >>> 32 - 8 | x14 << 8;\n        x9 = x9 + x14 | 0;\n        x4 ^= x9;\n        x4 = x4 >>> 32 - 7 | x4 << 7;\n        x1 = x1 + x6 | 0;\n        x12 ^= x1;\n        x12 = x12 >>> 32 - 8 | x12 << 8;\n        x11 = x11 + x12 | 0;\n        x6 ^= x11;\n        x6 = x6 >>> 32 - 7 | x6 << 7;\n        x0 = x0 + x5 | 0;\n        x15 ^= x0;\n        x15 = x15 >>> 32 - 8 | x15 << 8;\n        x10 = x10 + x15 | 0;\n        x5 ^= x10;\n        x5 = x5 >>> 32 - 7 | x5 << 7;\n    }\n    binary_1.writeUint32LE(x0 + j0 | 0, out, 0);\n    binary_1.writeUint32LE(x1 + j1 | 0, out, 4);\n    binary_1.writeUint32LE(x2 + j2 | 0, out, 8);\n    binary_1.writeUint32LE(x3 + j3 | 0, out, 12);\n    binary_1.writeUint32LE(x4 + j4 | 0, out, 16);\n    binary_1.writeUint32LE(x5 + j5 | 0, out, 20);\n    binary_1.writeUint32LE(x6 + j6 | 0, out, 24);\n    binary_1.writeUint32LE(x7 + j7 | 0, out, 28);\n    binary_1.writeUint32LE(x8 + j8 | 0, out, 32);\n    binary_1.writeUint32LE(x9 + j9 | 0, out, 36);\n    binary_1.writeUint32LE(x10 + j10 | 0, out, 40);\n    binary_1.writeUint32LE(x11 + j11 | 0, out, 44);\n    binary_1.writeUint32LE(x12 + j12 | 0, out, 48);\n    binary_1.writeUint32LE(x13 + j13 | 0, out, 52);\n    binary_1.writeUint32LE(x14 + j14 | 0, out, 56);\n    binary_1.writeUint32LE(x15 + j15 | 0, out, 60);\n}\n/**\n * Encrypt src with ChaCha20 stream generated for the given 32-byte key and\n * 8-byte (as in original implementation) or 12-byte (as in RFC7539) nonce and\n * write the result into dst and return it.\n *\n * dst and src may be the same, but otherwise must not overlap.\n *\n * If nonce is 12 bytes, users should not encrypt more than 256 GiB with the\n * same key and nonce, otherwise the stream will repeat. The function will\n * throw error if counter overflows to prevent this.\n *\n * If nonce is 8 bytes, the output is practically unlimited (2^70 bytes, which\n * is more than a million petabytes). However, it is not recommended to\n * generate 8-byte nonces randomly, as the chance of collision is high.\n *\n * Never use the same key and nonce to encrypt more than one message.\n *\n * If nonceInplaceCounterLength is not 0, the nonce is assumed to be a 16-byte\n * array with stream counter in first nonceInplaceCounterLength bytes and nonce\n * in the last remaining bytes. The counter will be incremented inplace for\n * each ChaCha block. This is useful if you need to encrypt one stream of data\n * in chunks.\n */ function streamXOR(key, nonce, src, dst, nonceInplaceCounterLength) {\n    if (nonceInplaceCounterLength === void 0) {\n        nonceInplaceCounterLength = 0;\n    }\n    // We only support 256-bit keys.\n    if (key.length !== 32) {\n        throw new Error(\"ChaCha: key size must be 32 bytes\");\n    }\n    if (dst.length < src.length) {\n        throw new Error(\"ChaCha: destination is shorter than source\");\n    }\n    var nc;\n    var counterLength;\n    if (nonceInplaceCounterLength === 0) {\n        if (nonce.length !== 8 && nonce.length !== 12) {\n            throw new Error(\"ChaCha nonce must be 8 or 12 bytes\");\n        }\n        nc = new Uint8Array(16);\n        // First counterLength bytes of nc are counter, starting with zero.\n        counterLength = nc.length - nonce.length;\n        // Last bytes of nc after counterLength are nonce, set them.\n        nc.set(nonce, counterLength);\n    } else {\n        if (nonce.length !== 16) {\n            throw new Error(\"ChaCha nonce with counter must be 16 bytes\");\n        }\n        // This will update passed nonce with counter inplace.\n        nc = nonce;\n        counterLength = nonceInplaceCounterLength;\n    }\n    // Allocate temporary space for ChaCha block.\n    var block = new Uint8Array(64);\n    for(var i = 0; i < src.length; i += 64){\n        // Generate a block.\n        core(block, nc, key);\n        // XOR block bytes with src into dst.\n        for(var j = i; j < i + 64 && j < src.length; j++){\n            dst[j] = src[j] ^ block[j - i];\n        }\n        // Increment counter.\n        incrementCounter(nc, 0, counterLength);\n    }\n    // Cleanup temporary space.\n    wipe_1.wipe(block);\n    if (nonceInplaceCounterLength === 0) {\n        // Cleanup counter.\n        wipe_1.wipe(nc);\n    }\n    return dst;\n}\nexports.streamXOR = streamXOR;\n/**\n * Generate ChaCha20 stream for the given 32-byte key and 8-byte or 12-byte\n * nonce and write it into dst and return it.\n *\n * Never use the same key and nonce to generate more than one stream.\n *\n * If nonceInplaceCounterLength is not 0, it behaves the same with respect to\n * the nonce as described in the streamXOR documentation.\n *\n * stream is like streamXOR with all-zero src.\n */ function stream(key, nonce, dst, nonceInplaceCounterLength) {\n    if (nonceInplaceCounterLength === void 0) {\n        nonceInplaceCounterLength = 0;\n    }\n    wipe_1.wipe(dst);\n    return streamXOR(key, nonce, dst, dst, nonceInplaceCounterLength);\n}\nexports.stream = stream;\nfunction incrementCounter(counter, pos, len) {\n    var carry = 1;\n    while(len--){\n        carry = carry + (counter[pos] & 0xff) | 0;\n        counter[pos] = carry & 0xff;\n        carry >>>= 8;\n        pos++;\n    }\n    if (carry > 0) {\n        throw new Error(\"ChaCha: counter overflow\");\n    }\n} //# sourceMappingURL=chacha.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@stablelib/chacha/lib/chacha.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@stablelib/chacha20poly1305/lib/chacha20poly1305.js":
/*!***************************************************************************!*\
  !*** ../node_modules/@stablelib/chacha20poly1305/lib/chacha20poly1305.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar chacha_1 = __webpack_require__(/*! @stablelib/chacha */ \"(ssr)/../node_modules/@stablelib/chacha/lib/chacha.js\");\nvar poly1305_1 = __webpack_require__(/*! @stablelib/poly1305 */ \"(ssr)/../node_modules/@stablelib/poly1305/lib/poly1305.js\");\nvar wipe_1 = __webpack_require__(/*! @stablelib/wipe */ \"(ssr)/../node_modules/@stablelib/wipe/lib/wipe.js\");\nvar binary_1 = __webpack_require__(/*! @stablelib/binary */ \"(ssr)/../node_modules/@stablelib/binary/lib/binary.js\");\nvar constant_time_1 = __webpack_require__(/*! @stablelib/constant-time */ \"(ssr)/../node_modules/@stablelib/constant-time/lib/constant-time.js\");\nexports.KEY_LENGTH = 32;\nexports.NONCE_LENGTH = 12;\nexports.TAG_LENGTH = 16;\nvar ZEROS = new Uint8Array(16);\n/**\n * ChaCha20-Poly1305 Authenticated Encryption with Associated Data.\n *\n * Defined in RFC7539.\n */ var ChaCha20Poly1305 = /** @class */ function() {\n    /**\n     * Creates a new instance with the given 32-byte key.\n     */ function ChaCha20Poly1305(key) {\n        this.nonceLength = exports.NONCE_LENGTH;\n        this.tagLength = exports.TAG_LENGTH;\n        if (key.length !== exports.KEY_LENGTH) {\n            throw new Error(\"ChaCha20Poly1305 needs 32-byte key\");\n        }\n        // Copy key.\n        this._key = new Uint8Array(key);\n    }\n    /**\n     * Encrypts and authenticates plaintext, authenticates associated data,\n     * and returns sealed ciphertext, which includes authentication tag.\n     *\n     * RFC7539 specifies 12 bytes for nonce. It may be this 12-byte nonce\n     * (\"IV\"), or full 16-byte counter (called \"32-bit fixed-common part\")\n     * and nonce.\n     *\n     * If dst is given (it must be the size of plaintext + the size of tag\n     * length) the result will be put into it. Dst and plaintext must not\n     * overlap.\n     */ ChaCha20Poly1305.prototype.seal = function(nonce, plaintext, associatedData, dst) {\n        if (nonce.length > 16) {\n            throw new Error(\"ChaCha20Poly1305: incorrect nonce length\");\n        }\n        // Allocate space for counter, and set nonce as last bytes of it.\n        var counter = new Uint8Array(16);\n        counter.set(nonce, counter.length - nonce.length);\n        // Generate authentication key by taking first 32-bytes of stream.\n        // We pass full counter, which has 12-byte nonce and 4-byte block counter,\n        // and it will get incremented after generating the block, which is\n        // exactly what we need: we only use the first 32 bytes of 64-byte\n        // ChaCha block and discard the next 32 bytes.\n        var authKey = new Uint8Array(32);\n        chacha_1.stream(this._key, counter, authKey, 4);\n        // Allocate space for sealed ciphertext.\n        var resultLength = plaintext.length + this.tagLength;\n        var result;\n        if (dst) {\n            if (dst.length !== resultLength) {\n                throw new Error(\"ChaCha20Poly1305: incorrect destination length\");\n            }\n            result = dst;\n        } else {\n            result = new Uint8Array(resultLength);\n        }\n        // Encrypt plaintext.\n        chacha_1.streamXOR(this._key, counter, plaintext, result, 4);\n        // Authenticate.\n        // XXX: can \"simplify\" here: pass full result (which is already padded\n        // due to zeroes prepared for tag), and ciphertext length instead of\n        // subarray of result.\n        this._authenticate(result.subarray(result.length - this.tagLength, result.length), authKey, result.subarray(0, result.length - this.tagLength), associatedData);\n        // Cleanup.\n        wipe_1.wipe(counter);\n        return result;\n    };\n    /**\n     * Authenticates sealed ciphertext (which includes authentication tag) and\n     * associated data, decrypts ciphertext and returns decrypted plaintext.\n     *\n     * RFC7539 specifies 12 bytes for nonce. It may be this 12-byte nonce\n     * (\"IV\"), or full 16-byte counter (called \"32-bit fixed-common part\")\n     * and nonce.\n     *\n     * If authentication fails, it returns null.\n     *\n     * If dst is given (it must be of ciphertext length minus tag length),\n     * the result will be put into it. Dst and plaintext must not overlap.\n     */ ChaCha20Poly1305.prototype.open = function(nonce, sealed, associatedData, dst) {\n        if (nonce.length > 16) {\n            throw new Error(\"ChaCha20Poly1305: incorrect nonce length\");\n        }\n        // Sealed ciphertext should at least contain tag.\n        if (sealed.length < this.tagLength) {\n            // TODO(dchest): should we throw here instead?\n            return null;\n        }\n        // Allocate space for counter, and set nonce as last bytes of it.\n        var counter = new Uint8Array(16);\n        counter.set(nonce, counter.length - nonce.length);\n        // Generate authentication key by taking first 32-bytes of stream.\n        var authKey = new Uint8Array(32);\n        chacha_1.stream(this._key, counter, authKey, 4);\n        // Authenticate.\n        // XXX: can simplify and avoid allocation: since authenticate()\n        // already allocates tag (from Poly1305.digest(), it can return)\n        // it instead of copying to calculatedTag. But then in seal()\n        // we'll need to copy it.\n        var calculatedTag = new Uint8Array(this.tagLength);\n        this._authenticate(calculatedTag, authKey, sealed.subarray(0, sealed.length - this.tagLength), associatedData);\n        // Constant-time compare tags and return null if they differ.\n        if (!constant_time_1.equal(calculatedTag, sealed.subarray(sealed.length - this.tagLength, sealed.length))) {\n            return null;\n        }\n        // Allocate space for decrypted plaintext.\n        var resultLength = sealed.length - this.tagLength;\n        var result;\n        if (dst) {\n            if (dst.length !== resultLength) {\n                throw new Error(\"ChaCha20Poly1305: incorrect destination length\");\n            }\n            result = dst;\n        } else {\n            result = new Uint8Array(resultLength);\n        }\n        // Decrypt.\n        chacha_1.streamXOR(this._key, counter, sealed.subarray(0, sealed.length - this.tagLength), result, 4);\n        // Cleanup.\n        wipe_1.wipe(counter);\n        return result;\n    };\n    ChaCha20Poly1305.prototype.clean = function() {\n        wipe_1.wipe(this._key);\n        return this;\n    };\n    ChaCha20Poly1305.prototype._authenticate = function(tagOut, authKey, ciphertext, associatedData) {\n        // Initialize Poly1305 with authKey.\n        var h = new poly1305_1.Poly1305(authKey);\n        // Authenticate padded associated data.\n        if (associatedData) {\n            h.update(associatedData);\n            if (associatedData.length % 16 > 0) {\n                h.update(ZEROS.subarray(associatedData.length % 16));\n            }\n        }\n        // Authenticate padded ciphertext.\n        h.update(ciphertext);\n        if (ciphertext.length % 16 > 0) {\n            h.update(ZEROS.subarray(ciphertext.length % 16));\n        }\n        // Authenticate length of associated data.\n        // XXX: can avoid allocation here?\n        var length = new Uint8Array(8);\n        if (associatedData) {\n            binary_1.writeUint64LE(associatedData.length, length);\n        }\n        h.update(length);\n        // Authenticate length of ciphertext.\n        binary_1.writeUint64LE(ciphertext.length, length);\n        h.update(length);\n        // Get tag and copy it into tagOut.\n        var tag = h.digest();\n        for(var i = 0; i < tag.length; i++){\n            tagOut[i] = tag[i];\n        }\n        // Cleanup.\n        h.clean();\n        wipe_1.wipe(tag);\n        wipe_1.wipe(length);\n    };\n    return ChaCha20Poly1305;\n}();\nexports.ChaCha20Poly1305 = ChaCha20Poly1305; //# sourceMappingURL=chacha20poly1305.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@stablelib/chacha20poly1305/lib/chacha20poly1305.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@stablelib/constant-time/lib/constant-time.js":
/*!*********************************************************************!*\
  !*** ../node_modules/@stablelib/constant-time/lib/constant-time.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n/**\n * Package constant-time provides functions for performing algorithmically constant-time operations.\n */ /**\n * NOTE! Due to the inability to guarantee real constant time evaluation of\n * anything in JavaScript VM, this is module is the best effort.\n */ /**\n * Returns resultIfOne if subject is 1, or resultIfZero if subject is 0.\n *\n * Supports only 32-bit integers, so resultIfOne or resultIfZero are not\n * integers, they'll be converted to them with bitwise operations.\n */ function select(subject, resultIfOne, resultIfZero) {\n    return ~(subject - 1) & resultIfOne | subject - 1 & resultIfZero;\n}\nexports.select = select;\n/**\n * Returns 1 if a <= b, or 0 if not.\n * Arguments must be positive 32-bit integers less than or equal to 2^31 - 1.\n */ function lessOrEqual(a, b) {\n    return (a | 0) - (b | 0) - 1 >>> 31 & 1;\n}\nexports.lessOrEqual = lessOrEqual;\n/**\n * Returns 1 if a and b are of equal length and their contents\n * are equal, or 0 otherwise.\n *\n * Note that unlike in equal(), zero-length inputs are considered\n * the same, so this function will return 1.\n */ function compare(a, b) {\n    if (a.length !== b.length) {\n        return 0;\n    }\n    var result = 0;\n    for(var i = 0; i < a.length; i++){\n        result |= a[i] ^ b[i];\n    }\n    return 1 & result - 1 >>> 8;\n}\nexports.compare = compare;\n/**\n * Returns true if a and b are of equal non-zero length,\n * and their contents are equal, or false otherwise.\n *\n * Note that unlike in compare() zero-length inputs are considered\n * _not_ equal, so this function will return false.\n */ function equal(a, b) {\n    if (a.length === 0 || b.length === 0) {\n        return false;\n    }\n    return compare(a, b) !== 0;\n}\nexports.equal = equal; //# sourceMappingURL=constant-time.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0BzdGFibGVsaWIvY29uc3RhbnQtdGltZS9saWIvY29uc3RhbnQtdGltZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLHNDQUFzQztBQUN0Qyw2Q0FBNkM7QUFDN0NBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdEOztDQUVDLEdBQ0Q7OztDQUdDLEdBQ0Q7Ozs7O0NBS0MsR0FDRCxTQUFTQyxPQUFPQyxPQUFPLEVBQUVDLFdBQVcsRUFBRUMsWUFBWTtJQUM5QyxPQUFPLENBQUdGLENBQUFBLFVBQVUsS0FBS0MsY0FBZ0IsVUFBVyxJQUFLQztBQUM3RDtBQUNBTCxjQUFjLEdBQUdFO0FBQ2pCOzs7Q0FHQyxHQUNELFNBQVNJLFlBQVlDLENBQUMsRUFBRUMsQ0FBQztJQUNyQixPQUFPLENBQUdELElBQUksS0FBTUMsQ0FBQUEsSUFBSSxLQUFLLE1BQU8sS0FBTTtBQUM5QztBQUNBUixtQkFBbUIsR0FBR007QUFDdEI7Ozs7OztDQU1DLEdBQ0QsU0FBU0csUUFBUUYsQ0FBQyxFQUFFQyxDQUFDO0lBQ2pCLElBQUlELEVBQUVHLE1BQU0sS0FBS0YsRUFBRUUsTUFBTSxFQUFFO1FBQ3ZCLE9BQU87SUFDWDtJQUNBLElBQUlDLFNBQVM7SUFDYixJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUwsRUFBRUcsTUFBTSxFQUFFRSxJQUFLO1FBQy9CRCxVQUFVSixDQUFDLENBQUNLLEVBQUUsR0FBR0osQ0FBQyxDQUFDSSxFQUFFO0lBQ3pCO0lBQ0EsT0FBUSxJQUFLLFNBQVUsTUFBTztBQUNsQztBQUNBWixlQUFlLEdBQUdTO0FBQ2xCOzs7Ozs7Q0FNQyxHQUNELFNBQVNJLE1BQU1OLENBQUMsRUFBRUMsQ0FBQztJQUNmLElBQUlELEVBQUVHLE1BQU0sS0FBSyxLQUFLRixFQUFFRSxNQUFNLEtBQUssR0FBRztRQUNsQyxPQUFPO0lBQ1g7SUFDQSxPQUFPRCxRQUFRRixHQUFHQyxPQUFPO0FBQzdCO0FBQ0FSLGFBQWEsR0FBR2EsT0FDaEIseUNBQXlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9Ac3RhYmxlbGliL2NvbnN0YW50LXRpbWUvbGliL2NvbnN0YW50LXRpbWUuanM/ZmU3ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoQykgMjAxNiBEbWl0cnkgQ2hlc3RueWtoXG4vLyBNSVQgTGljZW5zZS4gU2VlIExJQ0VOU0UgZmlsZSBmb3IgZGV0YWlscy5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKlxuICogUGFja2FnZSBjb25zdGFudC10aW1lIHByb3ZpZGVzIGZ1bmN0aW9ucyBmb3IgcGVyZm9ybWluZyBhbGdvcml0aG1pY2FsbHkgY29uc3RhbnQtdGltZSBvcGVyYXRpb25zLlxuICovXG4vKipcbiAqIE5PVEUhIER1ZSB0byB0aGUgaW5hYmlsaXR5IHRvIGd1YXJhbnRlZSByZWFsIGNvbnN0YW50IHRpbWUgZXZhbHVhdGlvbiBvZlxuICogYW55dGhpbmcgaW4gSmF2YVNjcmlwdCBWTSwgdGhpcyBpcyBtb2R1bGUgaXMgdGhlIGJlc3QgZWZmb3J0LlxuICovXG4vKipcbiAqIFJldHVybnMgcmVzdWx0SWZPbmUgaWYgc3ViamVjdCBpcyAxLCBvciByZXN1bHRJZlplcm8gaWYgc3ViamVjdCBpcyAwLlxuICpcbiAqIFN1cHBvcnRzIG9ubHkgMzItYml0IGludGVnZXJzLCBzbyByZXN1bHRJZk9uZSBvciByZXN1bHRJZlplcm8gYXJlIG5vdFxuICogaW50ZWdlcnMsIHRoZXknbGwgYmUgY29udmVydGVkIHRvIHRoZW0gd2l0aCBiaXR3aXNlIG9wZXJhdGlvbnMuXG4gKi9cbmZ1bmN0aW9uIHNlbGVjdChzdWJqZWN0LCByZXN1bHRJZk9uZSwgcmVzdWx0SWZaZXJvKSB7XG4gICAgcmV0dXJuICh+KHN1YmplY3QgLSAxKSAmIHJlc3VsdElmT25lKSB8ICgoc3ViamVjdCAtIDEpICYgcmVzdWx0SWZaZXJvKTtcbn1cbmV4cG9ydHMuc2VsZWN0ID0gc2VsZWN0O1xuLyoqXG4gKiBSZXR1cm5zIDEgaWYgYSA8PSBiLCBvciAwIGlmIG5vdC5cbiAqIEFyZ3VtZW50cyBtdXN0IGJlIHBvc2l0aXZlIDMyLWJpdCBpbnRlZ2VycyBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gMl4zMSAtIDEuXG4gKi9cbmZ1bmN0aW9uIGxlc3NPckVxdWFsKGEsIGIpIHtcbiAgICByZXR1cm4gKCgoYSB8IDApIC0gKGIgfCAwKSAtIDEpID4+PiAzMSkgJiAxO1xufVxuZXhwb3J0cy5sZXNzT3JFcXVhbCA9IGxlc3NPckVxdWFsO1xuLyoqXG4gKiBSZXR1cm5zIDEgaWYgYSBhbmQgYiBhcmUgb2YgZXF1YWwgbGVuZ3RoIGFuZCB0aGVpciBjb250ZW50c1xuICogYXJlIGVxdWFsLCBvciAwIG90aGVyd2lzZS5cbiAqXG4gKiBOb3RlIHRoYXQgdW5saWtlIGluIGVxdWFsKCksIHplcm8tbGVuZ3RoIGlucHV0cyBhcmUgY29uc2lkZXJlZFxuICogdGhlIHNhbWUsIHNvIHRoaXMgZnVuY3Rpb24gd2lsbCByZXR1cm4gMS5cbiAqL1xuZnVuY3Rpb24gY29tcGFyZShhLCBiKSB7XG4gICAgaWYgKGEubGVuZ3RoICE9PSBiLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgdmFyIHJlc3VsdCA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlc3VsdCB8PSBhW2ldIF4gYltpXTtcbiAgICB9XG4gICAgcmV0dXJuICgxICYgKChyZXN1bHQgLSAxKSA+Pj4gOCkpO1xufVxuZXhwb3J0cy5jb21wYXJlID0gY29tcGFyZTtcbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGEgYW5kIGIgYXJlIG9mIGVxdWFsIG5vbi16ZXJvIGxlbmd0aCxcbiAqIGFuZCB0aGVpciBjb250ZW50cyBhcmUgZXF1YWwsIG9yIGZhbHNlIG90aGVyd2lzZS5cbiAqXG4gKiBOb3RlIHRoYXQgdW5saWtlIGluIGNvbXBhcmUoKSB6ZXJvLWxlbmd0aCBpbnB1dHMgYXJlIGNvbnNpZGVyZWRcbiAqIF9ub3RfIGVxdWFsLCBzbyB0aGlzIGZ1bmN0aW9uIHdpbGwgcmV0dXJuIGZhbHNlLlxuICovXG5mdW5jdGlvbiBlcXVhbChhLCBiKSB7XG4gICAgaWYgKGEubGVuZ3RoID09PSAwIHx8IGIubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbXBhcmUoYSwgYikgIT09IDA7XG59XG5leHBvcnRzLmVxdWFsID0gZXF1YWw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdGFudC10aW1lLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInNlbGVjdCIsInN1YmplY3QiLCJyZXN1bHRJZk9uZSIsInJlc3VsdElmWmVybyIsImxlc3NPckVxdWFsIiwiYSIsImIiLCJjb21wYXJlIiwibGVuZ3RoIiwicmVzdWx0IiwiaSIsImVxdWFsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@stablelib/constant-time/lib/constant-time.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@stablelib/ed25519/lib/ed25519.js":
/*!*********************************************************!*\
  !*** ../node_modules/@stablelib/ed25519/lib/ed25519.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.convertSecretKeyToX25519 = exports.convertPublicKeyToX25519 = exports.verify = exports.sign = exports.extractPublicKeyFromSecretKey = exports.generateKeyPair = exports.generateKeyPairFromSeed = exports.SEED_LENGTH = exports.SECRET_KEY_LENGTH = exports.PUBLIC_KEY_LENGTH = exports.SIGNATURE_LENGTH = void 0;\n/**\n * Package ed25519 implements Ed25519 public-key signature algorithm.\n */ const random_1 = __webpack_require__(/*! @stablelib/random */ \"(ssr)/../node_modules/@stablelib/random/lib/random.js\");\nconst sha512_1 = __webpack_require__(/*! @stablelib/sha512 */ \"(ssr)/../node_modules/@stablelib/sha512/lib/sha512.js\");\nconst wipe_1 = __webpack_require__(/*! @stablelib/wipe */ \"(ssr)/../node_modules/@stablelib/wipe/lib/wipe.js\");\nexports.SIGNATURE_LENGTH = 64;\nexports.PUBLIC_KEY_LENGTH = 32;\nexports.SECRET_KEY_LENGTH = 64;\nexports.SEED_LENGTH = 32;\n// Returns new zero-filled 16-element GF (Float64Array).\n// If passed an array of numbers, prefills the returned\n// array with them.\n//\n// We use Float64Array, because we need 48-bit numbers\n// for this implementation.\nfunction gf(init) {\n    const r = new Float64Array(16);\n    if (init) {\n        for(let i = 0; i < init.length; i++){\n            r[i] = init[i];\n        }\n    }\n    return r;\n}\n// Base point.\nconst _9 = new Uint8Array(32);\n_9[0] = 9;\nconst gf0 = gf();\nconst gf1 = gf([\n    1\n]);\nconst D = gf([\n    0x78a3,\n    0x1359,\n    0x4dca,\n    0x75eb,\n    0xd8ab,\n    0x4141,\n    0x0a4d,\n    0x0070,\n    0xe898,\n    0x7779,\n    0x4079,\n    0x8cc7,\n    0xfe73,\n    0x2b6f,\n    0x6cee,\n    0x5203\n]);\nconst D2 = gf([\n    0xf159,\n    0x26b2,\n    0x9b94,\n    0xebd6,\n    0xb156,\n    0x8283,\n    0x149a,\n    0x00e0,\n    0xd130,\n    0xeef3,\n    0x80f2,\n    0x198e,\n    0xfce7,\n    0x56df,\n    0xd9dc,\n    0x2406\n]);\nconst X = gf([\n    0xd51a,\n    0x8f25,\n    0x2d60,\n    0xc956,\n    0xa7b2,\n    0x9525,\n    0xc760,\n    0x692c,\n    0xdc5c,\n    0xfdd6,\n    0xe231,\n    0xc0a4,\n    0x53fe,\n    0xcd6e,\n    0x36d3,\n    0x2169\n]);\nconst Y = gf([\n    0x6658,\n    0x6666,\n    0x6666,\n    0x6666,\n    0x6666,\n    0x6666,\n    0x6666,\n    0x6666,\n    0x6666,\n    0x6666,\n    0x6666,\n    0x6666,\n    0x6666,\n    0x6666,\n    0x6666,\n    0x6666\n]);\nconst I = gf([\n    0xa0b0,\n    0x4a0e,\n    0x1b27,\n    0xc4ee,\n    0xe478,\n    0xad2f,\n    0x1806,\n    0x2f43,\n    0xd7a7,\n    0x3dfb,\n    0x0099,\n    0x2b4d,\n    0xdf0b,\n    0x4fc1,\n    0x2480,\n    0x2b83\n]);\nfunction set25519(r, a) {\n    for(let i = 0; i < 16; i++){\n        r[i] = a[i] | 0;\n    }\n}\nfunction car25519(o) {\n    let c = 1;\n    for(let i = 0; i < 16; i++){\n        let v = o[i] + c + 65535;\n        c = Math.floor(v / 65536);\n        o[i] = v - c * 65536;\n    }\n    o[0] += c - 1 + 37 * (c - 1);\n}\nfunction sel25519(p, q, b) {\n    const c = ~(b - 1);\n    for(let i = 0; i < 16; i++){\n        const t = c & (p[i] ^ q[i]);\n        p[i] ^= t;\n        q[i] ^= t;\n    }\n}\nfunction pack25519(o, n) {\n    const m = gf();\n    const t = gf();\n    for(let i = 0; i < 16; i++){\n        t[i] = n[i];\n    }\n    car25519(t);\n    car25519(t);\n    car25519(t);\n    for(let j = 0; j < 2; j++){\n        m[0] = t[0] - 0xffed;\n        for(let i = 1; i < 15; i++){\n            m[i] = t[i] - 0xffff - (m[i - 1] >> 16 & 1);\n            m[i - 1] &= 0xffff;\n        }\n        m[15] = t[15] - 0x7fff - (m[14] >> 16 & 1);\n        const b = m[15] >> 16 & 1;\n        m[14] &= 0xffff;\n        sel25519(t, m, 1 - b);\n    }\n    for(let i = 0; i < 16; i++){\n        o[2 * i] = t[i] & 0xff;\n        o[2 * i + 1] = t[i] >> 8;\n    }\n}\nfunction verify32(x, y) {\n    let d = 0;\n    for(let i = 0; i < 32; i++){\n        d |= x[i] ^ y[i];\n    }\n    return (1 & d - 1 >>> 8) - 1;\n}\nfunction neq25519(a, b) {\n    const c = new Uint8Array(32);\n    const d = new Uint8Array(32);\n    pack25519(c, a);\n    pack25519(d, b);\n    return verify32(c, d);\n}\nfunction par25519(a) {\n    const d = new Uint8Array(32);\n    pack25519(d, a);\n    return d[0] & 1;\n}\nfunction unpack25519(o, n) {\n    for(let i = 0; i < 16; i++){\n        o[i] = n[2 * i] + (n[2 * i + 1] << 8);\n    }\n    o[15] &= 0x7fff;\n}\nfunction add(o, a, b) {\n    for(let i = 0; i < 16; i++){\n        o[i] = a[i] + b[i];\n    }\n}\nfunction sub(o, a, b) {\n    for(let i = 0; i < 16; i++){\n        o[i] = a[i] - b[i];\n    }\n}\nfunction mul(o, a, b) {\n    let v, c, t0 = 0, t1 = 0, t2 = 0, t3 = 0, t4 = 0, t5 = 0, t6 = 0, t7 = 0, t8 = 0, t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0, t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0, t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0, b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7], b8 = b[8], b9 = b[9], b10 = b[10], b11 = b[11], b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];\n    v = a[0];\n    t0 += v * b0;\n    t1 += v * b1;\n    t2 += v * b2;\n    t3 += v * b3;\n    t4 += v * b4;\n    t5 += v * b5;\n    t6 += v * b6;\n    t7 += v * b7;\n    t8 += v * b8;\n    t9 += v * b9;\n    t10 += v * b10;\n    t11 += v * b11;\n    t12 += v * b12;\n    t13 += v * b13;\n    t14 += v * b14;\n    t15 += v * b15;\n    v = a[1];\n    t1 += v * b0;\n    t2 += v * b1;\n    t3 += v * b2;\n    t4 += v * b3;\n    t5 += v * b4;\n    t6 += v * b5;\n    t7 += v * b6;\n    t8 += v * b7;\n    t9 += v * b8;\n    t10 += v * b9;\n    t11 += v * b10;\n    t12 += v * b11;\n    t13 += v * b12;\n    t14 += v * b13;\n    t15 += v * b14;\n    t16 += v * b15;\n    v = a[2];\n    t2 += v * b0;\n    t3 += v * b1;\n    t4 += v * b2;\n    t5 += v * b3;\n    t6 += v * b4;\n    t7 += v * b5;\n    t8 += v * b6;\n    t9 += v * b7;\n    t10 += v * b8;\n    t11 += v * b9;\n    t12 += v * b10;\n    t13 += v * b11;\n    t14 += v * b12;\n    t15 += v * b13;\n    t16 += v * b14;\n    t17 += v * b15;\n    v = a[3];\n    t3 += v * b0;\n    t4 += v * b1;\n    t5 += v * b2;\n    t6 += v * b3;\n    t7 += v * b4;\n    t8 += v * b5;\n    t9 += v * b6;\n    t10 += v * b7;\n    t11 += v * b8;\n    t12 += v * b9;\n    t13 += v * b10;\n    t14 += v * b11;\n    t15 += v * b12;\n    t16 += v * b13;\n    t17 += v * b14;\n    t18 += v * b15;\n    v = a[4];\n    t4 += v * b0;\n    t5 += v * b1;\n    t6 += v * b2;\n    t7 += v * b3;\n    t8 += v * b4;\n    t9 += v * b5;\n    t10 += v * b6;\n    t11 += v * b7;\n    t12 += v * b8;\n    t13 += v * b9;\n    t14 += v * b10;\n    t15 += v * b11;\n    t16 += v * b12;\n    t17 += v * b13;\n    t18 += v * b14;\n    t19 += v * b15;\n    v = a[5];\n    t5 += v * b0;\n    t6 += v * b1;\n    t7 += v * b2;\n    t8 += v * b3;\n    t9 += v * b4;\n    t10 += v * b5;\n    t11 += v * b6;\n    t12 += v * b7;\n    t13 += v * b8;\n    t14 += v * b9;\n    t15 += v * b10;\n    t16 += v * b11;\n    t17 += v * b12;\n    t18 += v * b13;\n    t19 += v * b14;\n    t20 += v * b15;\n    v = a[6];\n    t6 += v * b0;\n    t7 += v * b1;\n    t8 += v * b2;\n    t9 += v * b3;\n    t10 += v * b4;\n    t11 += v * b5;\n    t12 += v * b6;\n    t13 += v * b7;\n    t14 += v * b8;\n    t15 += v * b9;\n    t16 += v * b10;\n    t17 += v * b11;\n    t18 += v * b12;\n    t19 += v * b13;\n    t20 += v * b14;\n    t21 += v * b15;\n    v = a[7];\n    t7 += v * b0;\n    t8 += v * b1;\n    t9 += v * b2;\n    t10 += v * b3;\n    t11 += v * b4;\n    t12 += v * b5;\n    t13 += v * b6;\n    t14 += v * b7;\n    t15 += v * b8;\n    t16 += v * b9;\n    t17 += v * b10;\n    t18 += v * b11;\n    t19 += v * b12;\n    t20 += v * b13;\n    t21 += v * b14;\n    t22 += v * b15;\n    v = a[8];\n    t8 += v * b0;\n    t9 += v * b1;\n    t10 += v * b2;\n    t11 += v * b3;\n    t12 += v * b4;\n    t13 += v * b5;\n    t14 += v * b6;\n    t15 += v * b7;\n    t16 += v * b8;\n    t17 += v * b9;\n    t18 += v * b10;\n    t19 += v * b11;\n    t20 += v * b12;\n    t21 += v * b13;\n    t22 += v * b14;\n    t23 += v * b15;\n    v = a[9];\n    t9 += v * b0;\n    t10 += v * b1;\n    t11 += v * b2;\n    t12 += v * b3;\n    t13 += v * b4;\n    t14 += v * b5;\n    t15 += v * b6;\n    t16 += v * b7;\n    t17 += v * b8;\n    t18 += v * b9;\n    t19 += v * b10;\n    t20 += v * b11;\n    t21 += v * b12;\n    t22 += v * b13;\n    t23 += v * b14;\n    t24 += v * b15;\n    v = a[10];\n    t10 += v * b0;\n    t11 += v * b1;\n    t12 += v * b2;\n    t13 += v * b3;\n    t14 += v * b4;\n    t15 += v * b5;\n    t16 += v * b6;\n    t17 += v * b7;\n    t18 += v * b8;\n    t19 += v * b9;\n    t20 += v * b10;\n    t21 += v * b11;\n    t22 += v * b12;\n    t23 += v * b13;\n    t24 += v * b14;\n    t25 += v * b15;\n    v = a[11];\n    t11 += v * b0;\n    t12 += v * b1;\n    t13 += v * b2;\n    t14 += v * b3;\n    t15 += v * b4;\n    t16 += v * b5;\n    t17 += v * b6;\n    t18 += v * b7;\n    t19 += v * b8;\n    t20 += v * b9;\n    t21 += v * b10;\n    t22 += v * b11;\n    t23 += v * b12;\n    t24 += v * b13;\n    t25 += v * b14;\n    t26 += v * b15;\n    v = a[12];\n    t12 += v * b0;\n    t13 += v * b1;\n    t14 += v * b2;\n    t15 += v * b3;\n    t16 += v * b4;\n    t17 += v * b5;\n    t18 += v * b6;\n    t19 += v * b7;\n    t20 += v * b8;\n    t21 += v * b9;\n    t22 += v * b10;\n    t23 += v * b11;\n    t24 += v * b12;\n    t25 += v * b13;\n    t26 += v * b14;\n    t27 += v * b15;\n    v = a[13];\n    t13 += v * b0;\n    t14 += v * b1;\n    t15 += v * b2;\n    t16 += v * b3;\n    t17 += v * b4;\n    t18 += v * b5;\n    t19 += v * b6;\n    t20 += v * b7;\n    t21 += v * b8;\n    t22 += v * b9;\n    t23 += v * b10;\n    t24 += v * b11;\n    t25 += v * b12;\n    t26 += v * b13;\n    t27 += v * b14;\n    t28 += v * b15;\n    v = a[14];\n    t14 += v * b0;\n    t15 += v * b1;\n    t16 += v * b2;\n    t17 += v * b3;\n    t18 += v * b4;\n    t19 += v * b5;\n    t20 += v * b6;\n    t21 += v * b7;\n    t22 += v * b8;\n    t23 += v * b9;\n    t24 += v * b10;\n    t25 += v * b11;\n    t26 += v * b12;\n    t27 += v * b13;\n    t28 += v * b14;\n    t29 += v * b15;\n    v = a[15];\n    t15 += v * b0;\n    t16 += v * b1;\n    t17 += v * b2;\n    t18 += v * b3;\n    t19 += v * b4;\n    t20 += v * b5;\n    t21 += v * b6;\n    t22 += v * b7;\n    t23 += v * b8;\n    t24 += v * b9;\n    t25 += v * b10;\n    t26 += v * b11;\n    t27 += v * b12;\n    t28 += v * b13;\n    t29 += v * b14;\n    t30 += v * b15;\n    t0 += 38 * t16;\n    t1 += 38 * t17;\n    t2 += 38 * t18;\n    t3 += 38 * t19;\n    t4 += 38 * t20;\n    t5 += 38 * t21;\n    t6 += 38 * t22;\n    t7 += 38 * t23;\n    t8 += 38 * t24;\n    t9 += 38 * t25;\n    t10 += 38 * t26;\n    t11 += 38 * t27;\n    t12 += 38 * t28;\n    t13 += 38 * t29;\n    t14 += 38 * t30;\n    // t15 left as is\n    // first car\n    c = 1;\n    v = t0 + c + 65535;\n    c = Math.floor(v / 65536);\n    t0 = v - c * 65536;\n    v = t1 + c + 65535;\n    c = Math.floor(v / 65536);\n    t1 = v - c * 65536;\n    v = t2 + c + 65535;\n    c = Math.floor(v / 65536);\n    t2 = v - c * 65536;\n    v = t3 + c + 65535;\n    c = Math.floor(v / 65536);\n    t3 = v - c * 65536;\n    v = t4 + c + 65535;\n    c = Math.floor(v / 65536);\n    t4 = v - c * 65536;\n    v = t5 + c + 65535;\n    c = Math.floor(v / 65536);\n    t5 = v - c * 65536;\n    v = t6 + c + 65535;\n    c = Math.floor(v / 65536);\n    t6 = v - c * 65536;\n    v = t7 + c + 65535;\n    c = Math.floor(v / 65536);\n    t7 = v - c * 65536;\n    v = t8 + c + 65535;\n    c = Math.floor(v / 65536);\n    t8 = v - c * 65536;\n    v = t9 + c + 65535;\n    c = Math.floor(v / 65536);\n    t9 = v - c * 65536;\n    v = t10 + c + 65535;\n    c = Math.floor(v / 65536);\n    t10 = v - c * 65536;\n    v = t11 + c + 65535;\n    c = Math.floor(v / 65536);\n    t11 = v - c * 65536;\n    v = t12 + c + 65535;\n    c = Math.floor(v / 65536);\n    t12 = v - c * 65536;\n    v = t13 + c + 65535;\n    c = Math.floor(v / 65536);\n    t13 = v - c * 65536;\n    v = t14 + c + 65535;\n    c = Math.floor(v / 65536);\n    t14 = v - c * 65536;\n    v = t15 + c + 65535;\n    c = Math.floor(v / 65536);\n    t15 = v - c * 65536;\n    t0 += c - 1 + 37 * (c - 1);\n    // second car\n    c = 1;\n    v = t0 + c + 65535;\n    c = Math.floor(v / 65536);\n    t0 = v - c * 65536;\n    v = t1 + c + 65535;\n    c = Math.floor(v / 65536);\n    t1 = v - c * 65536;\n    v = t2 + c + 65535;\n    c = Math.floor(v / 65536);\n    t2 = v - c * 65536;\n    v = t3 + c + 65535;\n    c = Math.floor(v / 65536);\n    t3 = v - c * 65536;\n    v = t4 + c + 65535;\n    c = Math.floor(v / 65536);\n    t4 = v - c * 65536;\n    v = t5 + c + 65535;\n    c = Math.floor(v / 65536);\n    t5 = v - c * 65536;\n    v = t6 + c + 65535;\n    c = Math.floor(v / 65536);\n    t6 = v - c * 65536;\n    v = t7 + c + 65535;\n    c = Math.floor(v / 65536);\n    t7 = v - c * 65536;\n    v = t8 + c + 65535;\n    c = Math.floor(v / 65536);\n    t8 = v - c * 65536;\n    v = t9 + c + 65535;\n    c = Math.floor(v / 65536);\n    t9 = v - c * 65536;\n    v = t10 + c + 65535;\n    c = Math.floor(v / 65536);\n    t10 = v - c * 65536;\n    v = t11 + c + 65535;\n    c = Math.floor(v / 65536);\n    t11 = v - c * 65536;\n    v = t12 + c + 65535;\n    c = Math.floor(v / 65536);\n    t12 = v - c * 65536;\n    v = t13 + c + 65535;\n    c = Math.floor(v / 65536);\n    t13 = v - c * 65536;\n    v = t14 + c + 65535;\n    c = Math.floor(v / 65536);\n    t14 = v - c * 65536;\n    v = t15 + c + 65535;\n    c = Math.floor(v / 65536);\n    t15 = v - c * 65536;\n    t0 += c - 1 + 37 * (c - 1);\n    o[0] = t0;\n    o[1] = t1;\n    o[2] = t2;\n    o[3] = t3;\n    o[4] = t4;\n    o[5] = t5;\n    o[6] = t6;\n    o[7] = t7;\n    o[8] = t8;\n    o[9] = t9;\n    o[10] = t10;\n    o[11] = t11;\n    o[12] = t12;\n    o[13] = t13;\n    o[14] = t14;\n    o[15] = t15;\n}\nfunction square(o, a) {\n    mul(o, a, a);\n}\nfunction inv25519(o, i) {\n    const c = gf();\n    let a;\n    for(a = 0; a < 16; a++){\n        c[a] = i[a];\n    }\n    for(a = 253; a >= 0; a--){\n        square(c, c);\n        if (a !== 2 && a !== 4) {\n            mul(c, c, i);\n        }\n    }\n    for(a = 0; a < 16; a++){\n        o[a] = c[a];\n    }\n}\nfunction pow2523(o, i) {\n    const c = gf();\n    let a;\n    for(a = 0; a < 16; a++){\n        c[a] = i[a];\n    }\n    for(a = 250; a >= 0; a--){\n        square(c, c);\n        if (a !== 1) {\n            mul(c, c, i);\n        }\n    }\n    for(a = 0; a < 16; a++){\n        o[a] = c[a];\n    }\n}\nfunction edadd(p, q) {\n    const a = gf(), b = gf(), c = gf(), d = gf(), e = gf(), f = gf(), g = gf(), h = gf(), t = gf();\n    sub(a, p[1], p[0]);\n    sub(t, q[1], q[0]);\n    mul(a, a, t);\n    add(b, p[0], p[1]);\n    add(t, q[0], q[1]);\n    mul(b, b, t);\n    mul(c, p[3], q[3]);\n    mul(c, c, D2);\n    mul(d, p[2], q[2]);\n    add(d, d, d);\n    sub(e, b, a);\n    sub(f, d, c);\n    add(g, d, c);\n    add(h, b, a);\n    mul(p[0], e, f);\n    mul(p[1], h, g);\n    mul(p[2], g, f);\n    mul(p[3], e, h);\n}\nfunction cswap(p, q, b) {\n    for(let i = 0; i < 4; i++){\n        sel25519(p[i], q[i], b);\n    }\n}\nfunction pack(r, p) {\n    const tx = gf(), ty = gf(), zi = gf();\n    inv25519(zi, p[2]);\n    mul(tx, p[0], zi);\n    mul(ty, p[1], zi);\n    pack25519(r, ty);\n    r[31] ^= par25519(tx) << 7;\n}\nfunction scalarmult(p, q, s) {\n    set25519(p[0], gf0);\n    set25519(p[1], gf1);\n    set25519(p[2], gf1);\n    set25519(p[3], gf0);\n    for(let i = 255; i >= 0; --i){\n        const b = s[i / 8 | 0] >> (i & 7) & 1;\n        cswap(p, q, b);\n        edadd(q, p);\n        edadd(p, p);\n        cswap(p, q, b);\n    }\n}\nfunction scalarbase(p, s) {\n    const q = [\n        gf(),\n        gf(),\n        gf(),\n        gf()\n    ];\n    set25519(q[0], X);\n    set25519(q[1], Y);\n    set25519(q[2], gf1);\n    mul(q[3], X, Y);\n    scalarmult(p, q, s);\n}\n// Generates key pair from secret 32-byte seed.\nfunction generateKeyPairFromSeed(seed) {\n    if (seed.length !== exports.SEED_LENGTH) {\n        throw new Error(`ed25519: seed must be ${exports.SEED_LENGTH} bytes`);\n    }\n    const d = (0, sha512_1.hash)(seed);\n    d[0] &= 248;\n    d[31] &= 127;\n    d[31] |= 64;\n    const publicKey = new Uint8Array(32);\n    const p = [\n        gf(),\n        gf(),\n        gf(),\n        gf()\n    ];\n    scalarbase(p, d);\n    pack(publicKey, p);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return {\n        publicKey,\n        secretKey\n    };\n}\nexports.generateKeyPairFromSeed = generateKeyPairFromSeed;\nfunction generateKeyPair(prng) {\n    const seed = (0, random_1.randomBytes)(32, prng);\n    const result = generateKeyPairFromSeed(seed);\n    (0, wipe_1.wipe)(seed);\n    return result;\n}\nexports.generateKeyPair = generateKeyPair;\nfunction extractPublicKeyFromSecretKey(secretKey) {\n    if (secretKey.length !== exports.SECRET_KEY_LENGTH) {\n        throw new Error(`ed25519: secret key must be ${exports.SECRET_KEY_LENGTH} bytes`);\n    }\n    return new Uint8Array(secretKey.subarray(32));\n}\nexports.extractPublicKeyFromSecretKey = extractPublicKeyFromSecretKey;\nconst L = new Float64Array([\n    0xed,\n    0xd3,\n    0xf5,\n    0x5c,\n    0x1a,\n    0x63,\n    0x12,\n    0x58,\n    0xd6,\n    0x9c,\n    0xf7,\n    0xa2,\n    0xde,\n    0xf9,\n    0xde,\n    0x14,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0x10\n]);\nfunction modL(r, x) {\n    let carry;\n    let i;\n    let j;\n    let k;\n    for(i = 63; i >= 32; --i){\n        carry = 0;\n        for(j = i - 32, k = i - 12; j < k; ++j){\n            x[j] += carry - 16 * x[i] * L[j - (i - 32)];\n            carry = Math.floor((x[j] + 128) / 256);\n            x[j] -= carry * 256;\n        }\n        x[j] += carry;\n        x[i] = 0;\n    }\n    carry = 0;\n    for(j = 0; j < 32; j++){\n        x[j] += carry - (x[31] >> 4) * L[j];\n        carry = x[j] >> 8;\n        x[j] &= 255;\n    }\n    for(j = 0; j < 32; j++){\n        x[j] -= carry * L[j];\n    }\n    for(i = 0; i < 32; i++){\n        x[i + 1] += x[i] >> 8;\n        r[i] = x[i] & 255;\n    }\n}\nfunction reduce(r) {\n    const x = new Float64Array(64);\n    for(let i = 0; i < 64; i++){\n        x[i] = r[i];\n    }\n    for(let i = 0; i < 64; i++){\n        r[i] = 0;\n    }\n    modL(r, x);\n}\n// Returns 64-byte signature of the message under the 64-byte secret key.\nfunction sign(secretKey, message) {\n    const x = new Float64Array(64);\n    const p = [\n        gf(),\n        gf(),\n        gf(),\n        gf()\n    ];\n    const d = (0, sha512_1.hash)(secretKey.subarray(0, 32));\n    d[0] &= 248;\n    d[31] &= 127;\n    d[31] |= 64;\n    const signature = new Uint8Array(64);\n    signature.set(d.subarray(32), 32);\n    const hs = new sha512_1.SHA512();\n    hs.update(signature.subarray(32));\n    hs.update(message);\n    const r = hs.digest();\n    hs.clean();\n    reduce(r);\n    scalarbase(p, r);\n    pack(signature, p);\n    hs.reset();\n    hs.update(signature.subarray(0, 32));\n    hs.update(secretKey.subarray(32));\n    hs.update(message);\n    const h = hs.digest();\n    reduce(h);\n    for(let i = 0; i < 32; i++){\n        x[i] = r[i];\n    }\n    for(let i = 0; i < 32; i++){\n        for(let j = 0; j < 32; j++){\n            x[i + j] += h[i] * d[j];\n        }\n    }\n    modL(signature.subarray(32), x);\n    return signature;\n}\nexports.sign = sign;\nfunction unpackneg(r, p) {\n    const t = gf(), chk = gf(), num = gf(), den = gf(), den2 = gf(), den4 = gf(), den6 = gf();\n    set25519(r[2], gf1);\n    unpack25519(r[1], p);\n    square(num, r[1]);\n    mul(den, num, D);\n    sub(num, num, r[2]);\n    add(den, r[2], den);\n    square(den2, den);\n    square(den4, den2);\n    mul(den6, den4, den2);\n    mul(t, den6, num);\n    mul(t, t, den);\n    pow2523(t, t);\n    mul(t, t, num);\n    mul(t, t, den);\n    mul(t, t, den);\n    mul(r[0], t, den);\n    square(chk, r[0]);\n    mul(chk, chk, den);\n    if (neq25519(chk, num)) {\n        mul(r[0], r[0], I);\n    }\n    square(chk, r[0]);\n    mul(chk, chk, den);\n    if (neq25519(chk, num)) {\n        return -1;\n    }\n    if (par25519(r[0]) === p[31] >> 7) {\n        sub(r[0], gf0, r[0]);\n    }\n    mul(r[3], r[0], r[1]);\n    return 0;\n}\nfunction verify(publicKey, message, signature) {\n    const t = new Uint8Array(32);\n    const p = [\n        gf(),\n        gf(),\n        gf(),\n        gf()\n    ];\n    const q = [\n        gf(),\n        gf(),\n        gf(),\n        gf()\n    ];\n    if (signature.length !== exports.SIGNATURE_LENGTH) {\n        throw new Error(`ed25519: signature must be ${exports.SIGNATURE_LENGTH} bytes`);\n    }\n    if (unpackneg(q, publicKey)) {\n        return false;\n    }\n    const hs = new sha512_1.SHA512();\n    hs.update(signature.subarray(0, 32));\n    hs.update(publicKey);\n    hs.update(message);\n    const h = hs.digest();\n    reduce(h);\n    scalarmult(p, q, h);\n    scalarbase(q, signature.subarray(32));\n    edadd(p, q);\n    pack(t, p);\n    if (verify32(signature, t)) {\n        return false;\n    }\n    return true;\n}\nexports.verify = verify;\n/**\n * Convert Ed25519 public key to X25519 public key.\n *\n * Throws if given an invalid public key.\n */ function convertPublicKeyToX25519(publicKey) {\n    let q = [\n        gf(),\n        gf(),\n        gf(),\n        gf()\n    ];\n    if (unpackneg(q, publicKey)) {\n        throw new Error(\"Ed25519: invalid public key\");\n    }\n    // Formula: montgomeryX = (edwardsY + 1)*inverse(1 - edwardsY) mod p\n    let a = gf();\n    let b = gf();\n    let y = q[1];\n    add(a, gf1, y);\n    sub(b, gf1, y);\n    inv25519(b, b);\n    mul(a, a, b);\n    let z = new Uint8Array(32);\n    pack25519(z, a);\n    return z;\n}\nexports.convertPublicKeyToX25519 = convertPublicKeyToX25519;\n/**\n *  Convert Ed25519 secret (private) key to X25519 secret key.\n */ function convertSecretKeyToX25519(secretKey) {\n    const d = (0, sha512_1.hash)(secretKey.subarray(0, 32));\n    d[0] &= 248;\n    d[31] &= 127;\n    d[31] |= 64;\n    const o = new Uint8Array(d.subarray(0, 32));\n    (0, wipe_1.wipe)(d);\n    return o;\n}\nexports.convertSecretKeyToX25519 = convertSecretKeyToX25519; //# sourceMappingURL=ed25519.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@stablelib/ed25519/lib/ed25519.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@stablelib/hash/lib/hash.js":
/*!***************************************************!*\
  !*** ../node_modules/@stablelib/hash/lib/hash.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nfunction isSerializableHash(h) {\n    return typeof h.saveState !== \"undefined\" && typeof h.restoreState !== \"undefined\" && typeof h.cleanSavedState !== \"undefined\";\n}\nexports.isSerializableHash = isSerializableHash; // TODO(dchest): figure out the standardized interface for XOF such as\n // SHAKE and BLAKE2X.\n //# sourceMappingURL=hash.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0BzdGFibGVsaWIvaGFzaC9saWIvaGFzaC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLHNDQUFzQztBQUN0Qyw2Q0FBNkM7QUFDN0NBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELFNBQVNDLG1CQUFtQkMsQ0FBQztJQUN6QixPQUFRLE9BQU9BLEVBQUVDLFNBQVMsS0FBSyxlQUMzQixPQUFPRCxFQUFFRSxZQUFZLEtBQUssZUFDMUIsT0FBT0YsRUFBRUcsZUFBZSxLQUFLO0FBQ3JDO0FBQ0FOLDBCQUEwQixHQUFHRSxvQkFDN0Isc0VBQXNFO0NBQ3RFLHFCQUFxQjtDQUNyQixnQ0FBZ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BzdGFibGVsaWIvaGFzaC9saWIvaGFzaC5qcz8wMTUzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChDKSAyMDE2IERtaXRyeSBDaGVzdG55a2hcbi8vIE1JVCBMaWNlbnNlLiBTZWUgTElDRU5TRSBmaWxlIGZvciBkZXRhaWxzLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZnVuY3Rpb24gaXNTZXJpYWxpemFibGVIYXNoKGgpIHtcbiAgICByZXR1cm4gKHR5cGVvZiBoLnNhdmVTdGF0ZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgICAgICB0eXBlb2YgaC5yZXN0b3JlU3RhdGUgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICAgICAgdHlwZW9mIGguY2xlYW5TYXZlZFN0YXRlICE9PSBcInVuZGVmaW5lZFwiKTtcbn1cbmV4cG9ydHMuaXNTZXJpYWxpemFibGVIYXNoID0gaXNTZXJpYWxpemFibGVIYXNoO1xuLy8gVE9ETyhkY2hlc3QpOiBmaWd1cmUgb3V0IHRoZSBzdGFuZGFyZGl6ZWQgaW50ZXJmYWNlIGZvciBYT0Ygc3VjaCBhc1xuLy8gU0hBS0UgYW5kIEJMQUtFMlguXG4vLyMgc291cmNlTWFwcGluZ1VSTD1oYXNoLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImlzU2VyaWFsaXphYmxlSGFzaCIsImgiLCJzYXZlU3RhdGUiLCJyZXN0b3JlU3RhdGUiLCJjbGVhblNhdmVkU3RhdGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@stablelib/hash/lib/hash.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@stablelib/hkdf/lib/hkdf.js":
/*!***************************************************!*\
  !*** ../node_modules/@stablelib/hkdf/lib/hkdf.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar hmac_1 = __webpack_require__(/*! @stablelib/hmac */ \"(ssr)/../node_modules/@stablelib/hmac/lib/hmac.js\");\nvar wipe_1 = __webpack_require__(/*! @stablelib/wipe */ \"(ssr)/../node_modules/@stablelib/wipe/lib/wipe.js\");\n/**\n * HMAC-based Extract-and-Expand Key Derivation Function.\n *\n * Implements HKDF from RFC5869.\n *\n * Expands the given master key with salt and info into\n * a limited stream of key material.\n */ var HKDF = /** @class */ function() {\n    /**\n     * Create a new HKDF instance for the given hash function\n     * with the master key, optional salt, and info.\n     *\n     * - Master key is a high-entropy secret key (not a password).\n     * - Salt is a non-secret random value.\n     * - Info is application- and/or context-specific information.\n     */ function HKDF(hash, key, salt, info) {\n        if (salt === void 0) {\n            salt = new Uint8Array(0);\n        }\n        this._counter = new Uint8Array(1); // starts with zero\n        this._hash = hash;\n        this._info = info;\n        // HKDF-Extract uses salt as HMAC key, and key as data.\n        var okm = hmac_1.hmac(this._hash, salt, key);\n        // Initialize HMAC for expanding with extracted key.\n        this._hmac = new hmac_1.HMAC(hash, okm);\n        // Allocate buffer.\n        this._buffer = new Uint8Array(this._hmac.digestLength);\n        this._bufpos = this._buffer.length;\n    }\n    // Fill buffer with new block of HKDF-Extract output.\n    HKDF.prototype._fillBuffer = function() {\n        // Increment counter.\n        this._counter[0]++;\n        var ctr = this._counter[0];\n        // Check if counter overflowed.\n        if (ctr === 0) {\n            throw new Error(\"hkdf: cannot expand more\");\n        }\n        // Prepare HMAC instance for new data with old key.\n        this._hmac.reset();\n        // Hash in previous output if it was generated\n        // (i.e. counter is greater than 1).\n        if (ctr > 1) {\n            this._hmac.update(this._buffer);\n        }\n        // Hash in info if it exists.\n        if (this._info) {\n            this._hmac.update(this._info);\n        }\n        // Hash in the counter.\n        this._hmac.update(this._counter);\n        // Output result to buffer and clean HMAC instance.\n        this._hmac.finish(this._buffer);\n        // Reset buffer position.\n        this._bufpos = 0;\n    };\n    /**\n     * Expand returns next key material of the given length.\n     *\n     * It throws if expansion limit is reached (which is\n     * 254 digests of the underlying HMAC function).\n     */ HKDF.prototype.expand = function(length) {\n        var out = new Uint8Array(length);\n        for(var i = 0; i < out.length; i++){\n            if (this._bufpos === this._buffer.length) {\n                this._fillBuffer();\n            }\n            out[i] = this._buffer[this._bufpos++];\n        }\n        return out;\n    };\n    HKDF.prototype.clean = function() {\n        this._hmac.clean();\n        wipe_1.wipe(this._buffer);\n        wipe_1.wipe(this._counter);\n        this._bufpos = 0;\n    };\n    return HKDF;\n}();\nexports.HKDF = HKDF; // TODO(dchest): maybe implement deriveKey?\n //# sourceMappingURL=hkdf.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0BzdGFibGVsaWIvaGtkZi9saWIvaGtkZi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLHNDQUFzQztBQUN0Qyw2Q0FBNkM7QUFDN0NBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELElBQUlDLFNBQVNDLG1CQUFPQSxDQUFDLDBFQUFpQjtBQUN0QyxJQUFJQyxTQUFTRCxtQkFBT0EsQ0FBQywwRUFBaUI7QUFDdEM7Ozs7Ozs7Q0FPQyxHQUNELElBQUlFLE9BQU8sV0FBVyxHQUFJO0lBQ3RCOzs7Ozs7O0tBT0MsR0FDRCxTQUFTQSxLQUFLQyxJQUFJLEVBQUVDLEdBQUcsRUFBRUMsSUFBSSxFQUFFQyxJQUFJO1FBQy9CLElBQUlELFNBQVMsS0FBSyxHQUFHO1lBQUVBLE9BQU8sSUFBSUUsV0FBVztRQUFJO1FBQ2pELElBQUksQ0FBQ0MsUUFBUSxHQUFHLElBQUlELFdBQVcsSUFBSSxtQkFBbUI7UUFDdEQsSUFBSSxDQUFDRSxLQUFLLEdBQUdOO1FBQ2IsSUFBSSxDQUFDTyxLQUFLLEdBQUdKO1FBQ2IsdURBQXVEO1FBQ3ZELElBQUlLLE1BQU1aLE9BQU9hLElBQUksQ0FBQyxJQUFJLENBQUNILEtBQUssRUFBRUosTUFBTUQ7UUFDeEMsb0RBQW9EO1FBQ3BELElBQUksQ0FBQ1MsS0FBSyxHQUFHLElBQUlkLE9BQU9lLElBQUksQ0FBQ1gsTUFBTVE7UUFDbkMsbUJBQW1CO1FBQ25CLElBQUksQ0FBQ0ksT0FBTyxHQUFHLElBQUlSLFdBQVcsSUFBSSxDQUFDTSxLQUFLLENBQUNHLFlBQVk7UUFDckQsSUFBSSxDQUFDQyxPQUFPLEdBQUcsSUFBSSxDQUFDRixPQUFPLENBQUNHLE1BQU07SUFDdEM7SUFDQSxxREFBcUQ7SUFDckRoQixLQUFLaUIsU0FBUyxDQUFDQyxXQUFXLEdBQUc7UUFDekIscUJBQXFCO1FBQ3JCLElBQUksQ0FBQ1osUUFBUSxDQUFDLEVBQUU7UUFDaEIsSUFBSWEsTUFBTSxJQUFJLENBQUNiLFFBQVEsQ0FBQyxFQUFFO1FBQzFCLCtCQUErQjtRQUMvQixJQUFJYSxRQUFRLEdBQUc7WUFDWCxNQUFNLElBQUlDLE1BQU07UUFDcEI7UUFDQSxtREFBbUQ7UUFDbkQsSUFBSSxDQUFDVCxLQUFLLENBQUNVLEtBQUs7UUFDaEIsOENBQThDO1FBQzlDLG9DQUFvQztRQUNwQyxJQUFJRixNQUFNLEdBQUc7WUFDVCxJQUFJLENBQUNSLEtBQUssQ0FBQ1csTUFBTSxDQUFDLElBQUksQ0FBQ1QsT0FBTztRQUNsQztRQUNBLDZCQUE2QjtRQUM3QixJQUFJLElBQUksQ0FBQ0wsS0FBSyxFQUFFO1lBQ1osSUFBSSxDQUFDRyxLQUFLLENBQUNXLE1BQU0sQ0FBQyxJQUFJLENBQUNkLEtBQUs7UUFDaEM7UUFDQSx1QkFBdUI7UUFDdkIsSUFBSSxDQUFDRyxLQUFLLENBQUNXLE1BQU0sQ0FBQyxJQUFJLENBQUNoQixRQUFRO1FBQy9CLG1EQUFtRDtRQUNuRCxJQUFJLENBQUNLLEtBQUssQ0FBQ1ksTUFBTSxDQUFDLElBQUksQ0FBQ1YsT0FBTztRQUM5Qix5QkFBeUI7UUFDekIsSUFBSSxDQUFDRSxPQUFPLEdBQUc7SUFDbkI7SUFDQTs7Ozs7S0FLQyxHQUNEZixLQUFLaUIsU0FBUyxDQUFDTyxNQUFNLEdBQUcsU0FBVVIsTUFBTTtRQUNwQyxJQUFJUyxNQUFNLElBQUlwQixXQUFXVztRQUN6QixJQUFLLElBQUlVLElBQUksR0FBR0EsSUFBSUQsSUFBSVQsTUFBTSxFQUFFVSxJQUFLO1lBQ2pDLElBQUksSUFBSSxDQUFDWCxPQUFPLEtBQUssSUFBSSxDQUFDRixPQUFPLENBQUNHLE1BQU0sRUFBRTtnQkFDdEMsSUFBSSxDQUFDRSxXQUFXO1lBQ3BCO1lBQ0FPLEdBQUcsQ0FBQ0MsRUFBRSxHQUFHLElBQUksQ0FBQ2IsT0FBTyxDQUFDLElBQUksQ0FBQ0UsT0FBTyxHQUFHO1FBQ3pDO1FBQ0EsT0FBT1U7SUFDWDtJQUNBekIsS0FBS2lCLFNBQVMsQ0FBQ1UsS0FBSyxHQUFHO1FBQ25CLElBQUksQ0FBQ2hCLEtBQUssQ0FBQ2dCLEtBQUs7UUFDaEI1QixPQUFPNkIsSUFBSSxDQUFDLElBQUksQ0FBQ2YsT0FBTztRQUN4QmQsT0FBTzZCLElBQUksQ0FBQyxJQUFJLENBQUN0QixRQUFRO1FBQ3pCLElBQUksQ0FBQ1MsT0FBTyxHQUFHO0lBQ25CO0lBQ0EsT0FBT2Y7QUFDWDtBQUNBTCxZQUFZLEdBQUdLLE1BQ2YsMkNBQTJDO0NBQzNDLGdDQUFnQyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQHN0YWJsZWxpYi9oa2RmL2xpYi9oa2RmLmpzP2NiOGEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKEMpIDIwMTYgRG1pdHJ5IENoZXN0bnlraFxuLy8gTUlUIExpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgZm9yIGRldGFpbHMuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgaG1hY18xID0gcmVxdWlyZShcIkBzdGFibGVsaWIvaG1hY1wiKTtcbnZhciB3aXBlXzEgPSByZXF1aXJlKFwiQHN0YWJsZWxpYi93aXBlXCIpO1xuLyoqXG4gKiBITUFDLWJhc2VkIEV4dHJhY3QtYW5kLUV4cGFuZCBLZXkgRGVyaXZhdGlvbiBGdW5jdGlvbi5cbiAqXG4gKiBJbXBsZW1lbnRzIEhLREYgZnJvbSBSRkM1ODY5LlxuICpcbiAqIEV4cGFuZHMgdGhlIGdpdmVuIG1hc3RlciBrZXkgd2l0aCBzYWx0IGFuZCBpbmZvIGludG9cbiAqIGEgbGltaXRlZCBzdHJlYW0gb2Yga2V5IG1hdGVyaWFsLlxuICovXG52YXIgSEtERiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgSEtERiBpbnN0YW5jZSBmb3IgdGhlIGdpdmVuIGhhc2ggZnVuY3Rpb25cbiAgICAgKiB3aXRoIHRoZSBtYXN0ZXIga2V5LCBvcHRpb25hbCBzYWx0LCBhbmQgaW5mby5cbiAgICAgKlxuICAgICAqIC0gTWFzdGVyIGtleSBpcyBhIGhpZ2gtZW50cm9weSBzZWNyZXQga2V5IChub3QgYSBwYXNzd29yZCkuXG4gICAgICogLSBTYWx0IGlzIGEgbm9uLXNlY3JldCByYW5kb20gdmFsdWUuXG4gICAgICogLSBJbmZvIGlzIGFwcGxpY2F0aW9uLSBhbmQvb3IgY29udGV4dC1zcGVjaWZpYyBpbmZvcm1hdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBIS0RGKGhhc2gsIGtleSwgc2FsdCwgaW5mbykge1xuICAgICAgICBpZiAoc2FsdCA9PT0gdm9pZCAwKSB7IHNhbHQgPSBuZXcgVWludDhBcnJheSgwKTsgfVxuICAgICAgICB0aGlzLl9jb3VudGVyID0gbmV3IFVpbnQ4QXJyYXkoMSk7IC8vIHN0YXJ0cyB3aXRoIHplcm9cbiAgICAgICAgdGhpcy5faGFzaCA9IGhhc2g7XG4gICAgICAgIHRoaXMuX2luZm8gPSBpbmZvO1xuICAgICAgICAvLyBIS0RGLUV4dHJhY3QgdXNlcyBzYWx0IGFzIEhNQUMga2V5LCBhbmQga2V5IGFzIGRhdGEuXG4gICAgICAgIHZhciBva20gPSBobWFjXzEuaG1hYyh0aGlzLl9oYXNoLCBzYWx0LCBrZXkpO1xuICAgICAgICAvLyBJbml0aWFsaXplIEhNQUMgZm9yIGV4cGFuZGluZyB3aXRoIGV4dHJhY3RlZCBrZXkuXG4gICAgICAgIHRoaXMuX2htYWMgPSBuZXcgaG1hY18xLkhNQUMoaGFzaCwgb2ttKTtcbiAgICAgICAgLy8gQWxsb2NhdGUgYnVmZmVyLlxuICAgICAgICB0aGlzLl9idWZmZXIgPSBuZXcgVWludDhBcnJheSh0aGlzLl9obWFjLmRpZ2VzdExlbmd0aCk7XG4gICAgICAgIHRoaXMuX2J1ZnBvcyA9IHRoaXMuX2J1ZmZlci5sZW5ndGg7XG4gICAgfVxuICAgIC8vIEZpbGwgYnVmZmVyIHdpdGggbmV3IGJsb2NrIG9mIEhLREYtRXh0cmFjdCBvdXRwdXQuXG4gICAgSEtERi5wcm90b3R5cGUuX2ZpbGxCdWZmZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIEluY3JlbWVudCBjb3VudGVyLlxuICAgICAgICB0aGlzLl9jb3VudGVyWzBdKys7XG4gICAgICAgIHZhciBjdHIgPSB0aGlzLl9jb3VudGVyWzBdO1xuICAgICAgICAvLyBDaGVjayBpZiBjb3VudGVyIG92ZXJmbG93ZWQuXG4gICAgICAgIGlmIChjdHIgPT09IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImhrZGY6IGNhbm5vdCBleHBhbmQgbW9yZVwiKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBQcmVwYXJlIEhNQUMgaW5zdGFuY2UgZm9yIG5ldyBkYXRhIHdpdGggb2xkIGtleS5cbiAgICAgICAgdGhpcy5faG1hYy5yZXNldCgpO1xuICAgICAgICAvLyBIYXNoIGluIHByZXZpb3VzIG91dHB1dCBpZiBpdCB3YXMgZ2VuZXJhdGVkXG4gICAgICAgIC8vIChpLmUuIGNvdW50ZXIgaXMgZ3JlYXRlciB0aGFuIDEpLlxuICAgICAgICBpZiAoY3RyID4gMSkge1xuICAgICAgICAgICAgdGhpcy5faG1hYy51cGRhdGUodGhpcy5fYnVmZmVyKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBIYXNoIGluIGluZm8gaWYgaXQgZXhpc3RzLlxuICAgICAgICBpZiAodGhpcy5faW5mbykge1xuICAgICAgICAgICAgdGhpcy5faG1hYy51cGRhdGUodGhpcy5faW5mbyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSGFzaCBpbiB0aGUgY291bnRlci5cbiAgICAgICAgdGhpcy5faG1hYy51cGRhdGUodGhpcy5fY291bnRlcik7XG4gICAgICAgIC8vIE91dHB1dCByZXN1bHQgdG8gYnVmZmVyIGFuZCBjbGVhbiBITUFDIGluc3RhbmNlLlxuICAgICAgICB0aGlzLl9obWFjLmZpbmlzaCh0aGlzLl9idWZmZXIpO1xuICAgICAgICAvLyBSZXNldCBidWZmZXIgcG9zaXRpb24uXG4gICAgICAgIHRoaXMuX2J1ZnBvcyA9IDA7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBFeHBhbmQgcmV0dXJucyBuZXh0IGtleSBtYXRlcmlhbCBvZiB0aGUgZ2l2ZW4gbGVuZ3RoLlxuICAgICAqXG4gICAgICogSXQgdGhyb3dzIGlmIGV4cGFuc2lvbiBsaW1pdCBpcyByZWFjaGVkICh3aGljaCBpc1xuICAgICAqIDI1NCBkaWdlc3RzIG9mIHRoZSB1bmRlcmx5aW5nIEhNQUMgZnVuY3Rpb24pLlxuICAgICAqL1xuICAgIEhLREYucHJvdG90eXBlLmV4cGFuZCA9IGZ1bmN0aW9uIChsZW5ndGgpIHtcbiAgICAgICAgdmFyIG91dCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb3V0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fYnVmcG9zID09PSB0aGlzLl9idWZmZXIubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZmlsbEJ1ZmZlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3V0W2ldID0gdGhpcy5fYnVmZmVyW3RoaXMuX2J1ZnBvcysrXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH07XG4gICAgSEtERi5wcm90b3R5cGUuY2xlYW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX2htYWMuY2xlYW4oKTtcbiAgICAgICAgd2lwZV8xLndpcGUodGhpcy5fYnVmZmVyKTtcbiAgICAgICAgd2lwZV8xLndpcGUodGhpcy5fY291bnRlcik7XG4gICAgICAgIHRoaXMuX2J1ZnBvcyA9IDA7XG4gICAgfTtcbiAgICByZXR1cm4gSEtERjtcbn0oKSk7XG5leHBvcnRzLkhLREYgPSBIS0RGO1xuLy8gVE9ETyhkY2hlc3QpOiBtYXliZSBpbXBsZW1lbnQgZGVyaXZlS2V5P1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGtkZi5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJobWFjXzEiLCJyZXF1aXJlIiwid2lwZV8xIiwiSEtERiIsImhhc2giLCJrZXkiLCJzYWx0IiwiaW5mbyIsIlVpbnQ4QXJyYXkiLCJfY291bnRlciIsIl9oYXNoIiwiX2luZm8iLCJva20iLCJobWFjIiwiX2htYWMiLCJITUFDIiwiX2J1ZmZlciIsImRpZ2VzdExlbmd0aCIsIl9idWZwb3MiLCJsZW5ndGgiLCJwcm90b3R5cGUiLCJfZmlsbEJ1ZmZlciIsImN0ciIsIkVycm9yIiwicmVzZXQiLCJ1cGRhdGUiLCJmaW5pc2giLCJleHBhbmQiLCJvdXQiLCJpIiwiY2xlYW4iLCJ3aXBlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@stablelib/hkdf/lib/hkdf.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@stablelib/hmac/lib/hmac.js":
/*!***************************************************!*\
  !*** ../node_modules/@stablelib/hmac/lib/hmac.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n/**\n * Package hmac implements HMAC algorithm.\n */ var hash_1 = __webpack_require__(/*! @stablelib/hash */ \"(ssr)/../node_modules/@stablelib/hash/lib/hash.js\");\nvar constant_time_1 = __webpack_require__(/*! @stablelib/constant-time */ \"(ssr)/../node_modules/@stablelib/constant-time/lib/constant-time.js\");\nvar wipe_1 = __webpack_require__(/*! @stablelib/wipe */ \"(ssr)/../node_modules/@stablelib/wipe/lib/wipe.js\");\n/**\n *  HMAC implements hash-based message authentication algorithm.\n */ var HMAC = /** @class */ function() {\n    /**\n     * Constructs a new HMAC with the given Hash and secret key.\n     */ function HMAC(hash, key) {\n        this._finished = false; // true if HMAC was finalized\n        // Initialize inner and outer hashes.\n        this._inner = new hash();\n        this._outer = new hash();\n        // Set block and digest sizes for this HMAC\n        // instance to values from the hash.\n        this.blockSize = this._outer.blockSize;\n        this.digestLength = this._outer.digestLength;\n        // Pad temporary stores a key (or its hash) padded with zeroes.\n        var pad = new Uint8Array(this.blockSize);\n        if (key.length > this.blockSize) {\n            // If key is bigger than hash block size, it must be\n            // hashed and this hash is used as a key instead.\n            this._inner.update(key).finish(pad).clean();\n        } else {\n            // Otherwise, copy the key into pad.\n            pad.set(key);\n        }\n        // Now two different keys are derived from padded key\n        // by xoring a different byte value to each.\n        // To make inner hash key, xor byte 0x36 into pad.\n        for(var i = 0; i < pad.length; i++){\n            pad[i] ^= 0x36;\n        }\n        // Update inner hash with the result.\n        this._inner.update(pad);\n        // To make outer hash key, xor byte 0x5c into pad.\n        // But since we already xored 0x36 there, we must\n        // first undo this by xoring it again.\n        for(var i = 0; i < pad.length; i++){\n            pad[i] ^= 0x36 ^ 0x5c;\n        }\n        // Update outer hash with the result.\n        this._outer.update(pad);\n        // Save states of both hashes, so that we can quickly restore\n        // them later in reset() without the need to remember the actual\n        // key and perform this initialization again.\n        if (hash_1.isSerializableHash(this._inner) && hash_1.isSerializableHash(this._outer)) {\n            this._innerKeyedState = this._inner.saveState();\n            this._outerKeyedState = this._outer.saveState();\n        }\n        // Clean pad.\n        wipe_1.wipe(pad);\n    }\n    /**\n     * Returns HMAC state to the state initialized with key\n     * to make it possible to run HMAC over the other data with the same\n     * key without creating a new instance.\n     */ HMAC.prototype.reset = function() {\n        if (!hash_1.isSerializableHash(this._inner) || !hash_1.isSerializableHash(this._outer)) {\n            throw new Error(\"hmac: can't reset() because hash doesn't implement restoreState()\");\n        }\n        // Restore keyed states of inner and outer hashes.\n        this._inner.restoreState(this._innerKeyedState);\n        this._outer.restoreState(this._outerKeyedState);\n        this._finished = false;\n        return this;\n    };\n    /**\n     * Cleans HMAC state.\n     */ HMAC.prototype.clean = function() {\n        if (hash_1.isSerializableHash(this._inner)) {\n            this._inner.cleanSavedState(this._innerKeyedState);\n        }\n        if (hash_1.isSerializableHash(this._outer)) {\n            this._outer.cleanSavedState(this._outerKeyedState);\n        }\n        this._inner.clean();\n        this._outer.clean();\n    };\n    /**\n     * Updates state with provided data.\n     */ HMAC.prototype.update = function(data) {\n        this._inner.update(data);\n        return this;\n    };\n    /**\n     * Finalizes HMAC and puts the result in out.\n     */ HMAC.prototype.finish = function(out) {\n        if (this._finished) {\n            // If HMAC was finalized, outer hash is also finalized,\n            // so it produces the same digest it produced when it\n            // was finalized.\n            this._outer.finish(out);\n            return this;\n        }\n        // Finalize inner hash and store the result temporarily.\n        this._inner.finish(out);\n        // Update outer hash with digest of inner hash and and finalize it.\n        this._outer.update(out.subarray(0, this.digestLength)).finish(out);\n        this._finished = true;\n        return this;\n    };\n    /**\n     * Returns the computed message authentication code.\n     */ HMAC.prototype.digest = function() {\n        var out = new Uint8Array(this.digestLength);\n        this.finish(out);\n        return out;\n    };\n    /**\n     * Saves HMAC state.\n     * This function is needed for PBKDF2 optimization.\n     */ HMAC.prototype.saveState = function() {\n        if (!hash_1.isSerializableHash(this._inner)) {\n            throw new Error(\"hmac: can't saveState() because hash doesn't implement it\");\n        }\n        return this._inner.saveState();\n    };\n    HMAC.prototype.restoreState = function(savedState) {\n        if (!hash_1.isSerializableHash(this._inner) || !hash_1.isSerializableHash(this._outer)) {\n            throw new Error(\"hmac: can't restoreState() because hash doesn't implement it\");\n        }\n        this._inner.restoreState(savedState);\n        this._outer.restoreState(this._outerKeyedState);\n        this._finished = false;\n        return this;\n    };\n    HMAC.prototype.cleanSavedState = function(savedState) {\n        if (!hash_1.isSerializableHash(this._inner)) {\n            throw new Error(\"hmac: can't cleanSavedState() because hash doesn't implement it\");\n        }\n        this._inner.cleanSavedState(savedState);\n    };\n    return HMAC;\n}();\nexports.HMAC = HMAC;\n/**\n * Returns HMAC using the given hash constructor for the key over data.\n */ function hmac(hash, key, data) {\n    var h = new HMAC(hash, key);\n    h.update(data);\n    var digest = h.digest();\n    h.clean();\n    return digest;\n}\nexports.hmac = hmac;\n/**\n * Returns true if two HMAC digests are equal.\n * Uses constant-time comparison to avoid leaking timing information.\n *\n * Example:\n *\n *    const receivedDigest = ...\n *    const realDigest = hmac(SHA256, key, data);\n *    if (!equal(receivedDigest, realDigest)) {\n *        throw new Error(\"Authentication error\");\n *    }\n */ exports.equal = constant_time_1.equal; //# sourceMappingURL=hmac.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@stablelib/hmac/lib/hmac.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@stablelib/int/lib/int.js":
/*!*************************************************!*\
  !*** ../node_modules/@stablelib/int/lib/int.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n/**\n * Package int provides helper functions for integerss.\n */ // Shim using 16-bit pieces.\nfunction imulShim(a, b) {\n    var ah = a >>> 16 & 0xffff, al = a & 0xffff;\n    var bh = b >>> 16 & 0xffff, bl = b & 0xffff;\n    return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;\n}\n/** 32-bit integer multiplication.  */ // Use system Math.imul if available, otherwise use our shim.\nexports.mul = Math.imul || imulShim;\n/** 32-bit integer addition.  */ function add(a, b) {\n    return a + b | 0;\n}\nexports.add = add;\n/**  32-bit integer subtraction.  */ function sub(a, b) {\n    return a - b | 0;\n}\nexports.sub = sub;\n/** 32-bit integer left rotation */ function rotl(x, n) {\n    return x << n | x >>> 32 - n;\n}\nexports.rotl = rotl;\n/** 32-bit integer left rotation */ function rotr(x, n) {\n    return x << 32 - n | x >>> n;\n}\nexports.rotr = rotr;\nfunction isIntegerShim(n) {\n    return typeof n === \"number\" && isFinite(n) && Math.floor(n) === n;\n}\n/**\n * Returns true if the argument is an integer number.\n *\n * In ES2015, Number.isInteger.\n */ exports.isInteger = Number.isInteger || isIntegerShim;\n/**\n *  Math.pow(2, 53) - 1\n *\n *  In ES2015 Number.MAX_SAFE_INTEGER.\n */ exports.MAX_SAFE_INTEGER = 9007199254740991;\n/**\n * Returns true if the argument is a safe integer number\n * (-MIN_SAFE_INTEGER < number <= MAX_SAFE_INTEGER)\n *\n * In ES2015, Number.isSafeInteger.\n */ exports.isSafeInteger = function(n) {\n    return exports.isInteger(n) && n >= -exports.MAX_SAFE_INTEGER && n <= exports.MAX_SAFE_INTEGER;\n}; //# sourceMappingURL=int.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0BzdGFibGVsaWIvaW50L2xpYi9pbnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixzQ0FBc0M7QUFDdEMsNkNBQTZDO0FBQzdDQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RDs7Q0FFQyxHQUNELDRCQUE0QjtBQUM1QixTQUFTQyxTQUFTQyxDQUFDLEVBQUVDLENBQUM7SUFDbEIsSUFBSUMsS0FBSyxNQUFPLEtBQU0sUUFBUUMsS0FBS0gsSUFBSTtJQUN2QyxJQUFJSSxLQUFLLE1BQU8sS0FBTSxRQUFRQyxLQUFLSixJQUFJO0lBQ3ZDLE9BQVEsS0FBTUksS0FBTyxNQUFPQSxLQUFLRixLQUFLQyxNQUFPLE9BQVEsS0FBSztBQUM5RDtBQUNBLG9DQUFvQyxHQUNwQyw2REFBNkQ7QUFDN0RQLFdBQVcsR0FBR1UsS0FBS0MsSUFBSSxJQUFJVDtBQUMzQiw4QkFBOEIsR0FDOUIsU0FBU1UsSUFBSVQsQ0FBQyxFQUFFQyxDQUFDO0lBQ2IsT0FBTyxJQUFLQSxJQUFLO0FBQ3JCO0FBQ0FKLFdBQVcsR0FBR1k7QUFDZCxrQ0FBa0MsR0FDbEMsU0FBU0MsSUFBSVYsQ0FBQyxFQUFFQyxDQUFDO0lBQ2IsT0FBTyxJQUFLQSxJQUFLO0FBQ3JCO0FBQ0FKLFdBQVcsR0FBR2E7QUFDZCxpQ0FBaUMsR0FDakMsU0FBU0MsS0FBS0MsQ0FBQyxFQUFFQyxDQUFDO0lBQ2QsT0FBT0QsS0FBS0MsSUFBSUQsTUFBTyxLQUFLQztBQUNoQztBQUNBaEIsWUFBWSxHQUFHYztBQUNmLGlDQUFpQyxHQUNqQyxTQUFTRyxLQUFLRixDQUFDLEVBQUVDLENBQUM7SUFDZCxPQUFPRCxLQUFNLEtBQUtDLElBQUtELE1BQU1DO0FBQ2pDO0FBQ0FoQixZQUFZLEdBQUdpQjtBQUNmLFNBQVNDLGNBQWNGLENBQUM7SUFDcEIsT0FBTyxPQUFPQSxNQUFNLFlBQVlHLFNBQVNILE1BQU1OLEtBQUtVLEtBQUssQ0FBQ0osT0FBT0E7QUFDckU7QUFDQTs7OztDQUlDLEdBQ0RoQixpQkFBaUIsR0FBR3NCLE9BQU9ELFNBQVMsSUFBSUg7QUFDeEM7Ozs7Q0FJQyxHQUNEbEIsd0JBQXdCLEdBQUc7QUFDM0I7Ozs7O0NBS0MsR0FDREEscUJBQXFCLEdBQUcsU0FBVWdCLENBQUM7SUFDL0IsT0FBT2hCLFFBQVFxQixTQUFTLENBQUNMLE1BQU9BLEtBQUssQ0FBQ2hCLFFBQVF1QixnQkFBZ0IsSUFBSVAsS0FBS2hCLFFBQVF1QixnQkFBZ0I7QUFDbkcsR0FDQSwrQkFBK0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BzdGFibGVsaWIvaW50L2xpYi9pbnQuanM/N2NjZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoQykgMjAxNiBEbWl0cnkgQ2hlc3RueWtoXG4vLyBNSVQgTGljZW5zZS4gU2VlIExJQ0VOU0UgZmlsZSBmb3IgZGV0YWlscy5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKlxuICogUGFja2FnZSBpbnQgcHJvdmlkZXMgaGVscGVyIGZ1bmN0aW9ucyBmb3IgaW50ZWdlcnNzLlxuICovXG4vLyBTaGltIHVzaW5nIDE2LWJpdCBwaWVjZXMuXG5mdW5jdGlvbiBpbXVsU2hpbShhLCBiKSB7XG4gICAgdmFyIGFoID0gKGEgPj4+IDE2KSAmIDB4ZmZmZiwgYWwgPSBhICYgMHhmZmZmO1xuICAgIHZhciBiaCA9IChiID4+PiAxNikgJiAweGZmZmYsIGJsID0gYiAmIDB4ZmZmZjtcbiAgICByZXR1cm4gKChhbCAqIGJsKSArICgoKGFoICogYmwgKyBhbCAqIGJoKSA8PCAxNikgPj4+IDApIHwgMCk7XG59XG4vKiogMzItYml0IGludGVnZXIgbXVsdGlwbGljYXRpb24uICAqL1xuLy8gVXNlIHN5c3RlbSBNYXRoLmltdWwgaWYgYXZhaWxhYmxlLCBvdGhlcndpc2UgdXNlIG91ciBzaGltLlxuZXhwb3J0cy5tdWwgPSBNYXRoLmltdWwgfHwgaW11bFNoaW07XG4vKiogMzItYml0IGludGVnZXIgYWRkaXRpb24uICAqL1xuZnVuY3Rpb24gYWRkKGEsIGIpIHtcbiAgICByZXR1cm4gKGEgKyBiKSB8IDA7XG59XG5leHBvcnRzLmFkZCA9IGFkZDtcbi8qKiAgMzItYml0IGludGVnZXIgc3VidHJhY3Rpb24uICAqL1xuZnVuY3Rpb24gc3ViKGEsIGIpIHtcbiAgICByZXR1cm4gKGEgLSBiKSB8IDA7XG59XG5leHBvcnRzLnN1YiA9IHN1Yjtcbi8qKiAzMi1iaXQgaW50ZWdlciBsZWZ0IHJvdGF0aW9uICovXG5mdW5jdGlvbiByb3RsKHgsIG4pIHtcbiAgICByZXR1cm4geCA8PCBuIHwgeCA+Pj4gKDMyIC0gbik7XG59XG5leHBvcnRzLnJvdGwgPSByb3RsO1xuLyoqIDMyLWJpdCBpbnRlZ2VyIGxlZnQgcm90YXRpb24gKi9cbmZ1bmN0aW9uIHJvdHIoeCwgbikge1xuICAgIHJldHVybiB4IDw8ICgzMiAtIG4pIHwgeCA+Pj4gbjtcbn1cbmV4cG9ydHMucm90ciA9IHJvdHI7XG5mdW5jdGlvbiBpc0ludGVnZXJTaGltKG4pIHtcbiAgICByZXR1cm4gdHlwZW9mIG4gPT09IFwibnVtYmVyXCIgJiYgaXNGaW5pdGUobikgJiYgTWF0aC5mbG9vcihuKSA9PT0gbjtcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBhcmd1bWVudCBpcyBhbiBpbnRlZ2VyIG51bWJlci5cbiAqXG4gKiBJbiBFUzIwMTUsIE51bWJlci5pc0ludGVnZXIuXG4gKi9cbmV4cG9ydHMuaXNJbnRlZ2VyID0gTnVtYmVyLmlzSW50ZWdlciB8fCBpc0ludGVnZXJTaGltO1xuLyoqXG4gKiAgTWF0aC5wb3coMiwgNTMpIC0gMVxuICpcbiAqICBJbiBFUzIwMTUgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIuXG4gKi9cbmV4cG9ydHMuTUFYX1NBRkVfSU5URUdFUiA9IDkwMDcxOTkyNTQ3NDA5OTE7XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgYXJndW1lbnQgaXMgYSBzYWZlIGludGVnZXIgbnVtYmVyXG4gKiAoLU1JTl9TQUZFX0lOVEVHRVIgPCBudW1iZXIgPD0gTUFYX1NBRkVfSU5URUdFUilcbiAqXG4gKiBJbiBFUzIwMTUsIE51bWJlci5pc1NhZmVJbnRlZ2VyLlxuICovXG5leHBvcnRzLmlzU2FmZUludGVnZXIgPSBmdW5jdGlvbiAobikge1xuICAgIHJldHVybiBleHBvcnRzLmlzSW50ZWdlcihuKSAmJiAobiA+PSAtZXhwb3J0cy5NQVhfU0FGRV9JTlRFR0VSICYmIG4gPD0gZXhwb3J0cy5NQVhfU0FGRV9JTlRFR0VSKTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbnQuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiaW11bFNoaW0iLCJhIiwiYiIsImFoIiwiYWwiLCJiaCIsImJsIiwibXVsIiwiTWF0aCIsImltdWwiLCJhZGQiLCJzdWIiLCJyb3RsIiwieCIsIm4iLCJyb3RyIiwiaXNJbnRlZ2VyU2hpbSIsImlzRmluaXRlIiwiZmxvb3IiLCJpc0ludGVnZXIiLCJOdW1iZXIiLCJNQVhfU0FGRV9JTlRFR0VSIiwiaXNTYWZlSW50ZWdlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@stablelib/int/lib/int.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@stablelib/poly1305/lib/poly1305.js":
/*!***********************************************************!*\
  !*** ../node_modules/@stablelib/poly1305/lib/poly1305.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n/**\n * Package poly1305 implements Poly1305 one-time message authentication algorithm.\n */ var constant_time_1 = __webpack_require__(/*! @stablelib/constant-time */ \"(ssr)/../node_modules/@stablelib/constant-time/lib/constant-time.js\");\nvar wipe_1 = __webpack_require__(/*! @stablelib/wipe */ \"(ssr)/../node_modules/@stablelib/wipe/lib/wipe.js\");\nexports.DIGEST_LENGTH = 16;\n// Port of Andrew Moon's Poly1305-donna-16. Public domain.\n// https://github.com/floodyberry/poly1305-donna\n/**\n * Poly1305 computes 16-byte authenticator of message using\n * a one-time 32-byte key.\n *\n * Important: key should be used for only one message,\n * it should never repeat.\n */ var Poly1305 = /** @class */ function() {\n    function Poly1305(key) {\n        this.digestLength = exports.DIGEST_LENGTH;\n        this._buffer = new Uint8Array(16);\n        this._r = new Uint16Array(10);\n        this._h = new Uint16Array(10);\n        this._pad = new Uint16Array(8);\n        this._leftover = 0;\n        this._fin = 0;\n        this._finished = false;\n        var t0 = key[0] | key[1] << 8;\n        this._r[0] = t0 & 0x1fff;\n        var t1 = key[2] | key[3] << 8;\n        this._r[1] = (t0 >>> 13 | t1 << 3) & 0x1fff;\n        var t2 = key[4] | key[5] << 8;\n        this._r[2] = (t1 >>> 10 | t2 << 6) & 0x1f03;\n        var t3 = key[6] | key[7] << 8;\n        this._r[3] = (t2 >>> 7 | t3 << 9) & 0x1fff;\n        var t4 = key[8] | key[9] << 8;\n        this._r[4] = (t3 >>> 4 | t4 << 12) & 0x00ff;\n        this._r[5] = t4 >>> 1 & 0x1ffe;\n        var t5 = key[10] | key[11] << 8;\n        this._r[6] = (t4 >>> 14 | t5 << 2) & 0x1fff;\n        var t6 = key[12] | key[13] << 8;\n        this._r[7] = (t5 >>> 11 | t6 << 5) & 0x1f81;\n        var t7 = key[14] | key[15] << 8;\n        this._r[8] = (t6 >>> 8 | t7 << 8) & 0x1fff;\n        this._r[9] = t7 >>> 5 & 0x007f;\n        this._pad[0] = key[16] | key[17] << 8;\n        this._pad[1] = key[18] | key[19] << 8;\n        this._pad[2] = key[20] | key[21] << 8;\n        this._pad[3] = key[22] | key[23] << 8;\n        this._pad[4] = key[24] | key[25] << 8;\n        this._pad[5] = key[26] | key[27] << 8;\n        this._pad[6] = key[28] | key[29] << 8;\n        this._pad[7] = key[30] | key[31] << 8;\n    }\n    Poly1305.prototype._blocks = function(m, mpos, bytes) {\n        var hibit = this._fin ? 0 : 1 << 11;\n        var h0 = this._h[0], h1 = this._h[1], h2 = this._h[2], h3 = this._h[3], h4 = this._h[4], h5 = this._h[5], h6 = this._h[6], h7 = this._h[7], h8 = this._h[8], h9 = this._h[9];\n        var r0 = this._r[0], r1 = this._r[1], r2 = this._r[2], r3 = this._r[3], r4 = this._r[4], r5 = this._r[5], r6 = this._r[6], r7 = this._r[7], r8 = this._r[8], r9 = this._r[9];\n        while(bytes >= 16){\n            var t0 = m[mpos + 0] | m[mpos + 1] << 8;\n            h0 += t0 & 0x1fff;\n            var t1 = m[mpos + 2] | m[mpos + 3] << 8;\n            h1 += (t0 >>> 13 | t1 << 3) & 0x1fff;\n            var t2 = m[mpos + 4] | m[mpos + 5] << 8;\n            h2 += (t1 >>> 10 | t2 << 6) & 0x1fff;\n            var t3 = m[mpos + 6] | m[mpos + 7] << 8;\n            h3 += (t2 >>> 7 | t3 << 9) & 0x1fff;\n            var t4 = m[mpos + 8] | m[mpos + 9] << 8;\n            h4 += (t3 >>> 4 | t4 << 12) & 0x1fff;\n            h5 += t4 >>> 1 & 0x1fff;\n            var t5 = m[mpos + 10] | m[mpos + 11] << 8;\n            h6 += (t4 >>> 14 | t5 << 2) & 0x1fff;\n            var t6 = m[mpos + 12] | m[mpos + 13] << 8;\n            h7 += (t5 >>> 11 | t6 << 5) & 0x1fff;\n            var t7 = m[mpos + 14] | m[mpos + 15] << 8;\n            h8 += (t6 >>> 8 | t7 << 8) & 0x1fff;\n            h9 += t7 >>> 5 | hibit;\n            var c = 0;\n            var d0 = c;\n            d0 += h0 * r0;\n            d0 += h1 * (5 * r9);\n            d0 += h2 * (5 * r8);\n            d0 += h3 * (5 * r7);\n            d0 += h4 * (5 * r6);\n            c = d0 >>> 13;\n            d0 &= 0x1fff;\n            d0 += h5 * (5 * r5);\n            d0 += h6 * (5 * r4);\n            d0 += h7 * (5 * r3);\n            d0 += h8 * (5 * r2);\n            d0 += h9 * (5 * r1);\n            c += d0 >>> 13;\n            d0 &= 0x1fff;\n            var d1 = c;\n            d1 += h0 * r1;\n            d1 += h1 * r0;\n            d1 += h2 * (5 * r9);\n            d1 += h3 * (5 * r8);\n            d1 += h4 * (5 * r7);\n            c = d1 >>> 13;\n            d1 &= 0x1fff;\n            d1 += h5 * (5 * r6);\n            d1 += h6 * (5 * r5);\n            d1 += h7 * (5 * r4);\n            d1 += h8 * (5 * r3);\n            d1 += h9 * (5 * r2);\n            c += d1 >>> 13;\n            d1 &= 0x1fff;\n            var d2 = c;\n            d2 += h0 * r2;\n            d2 += h1 * r1;\n            d2 += h2 * r0;\n            d2 += h3 * (5 * r9);\n            d2 += h4 * (5 * r8);\n            c = d2 >>> 13;\n            d2 &= 0x1fff;\n            d2 += h5 * (5 * r7);\n            d2 += h6 * (5 * r6);\n            d2 += h7 * (5 * r5);\n            d2 += h8 * (5 * r4);\n            d2 += h9 * (5 * r3);\n            c += d2 >>> 13;\n            d2 &= 0x1fff;\n            var d3 = c;\n            d3 += h0 * r3;\n            d3 += h1 * r2;\n            d3 += h2 * r1;\n            d3 += h3 * r0;\n            d3 += h4 * (5 * r9);\n            c = d3 >>> 13;\n            d3 &= 0x1fff;\n            d3 += h5 * (5 * r8);\n            d3 += h6 * (5 * r7);\n            d3 += h7 * (5 * r6);\n            d3 += h8 * (5 * r5);\n            d3 += h9 * (5 * r4);\n            c += d3 >>> 13;\n            d3 &= 0x1fff;\n            var d4 = c;\n            d4 += h0 * r4;\n            d4 += h1 * r3;\n            d4 += h2 * r2;\n            d4 += h3 * r1;\n            d4 += h4 * r0;\n            c = d4 >>> 13;\n            d4 &= 0x1fff;\n            d4 += h5 * (5 * r9);\n            d4 += h6 * (5 * r8);\n            d4 += h7 * (5 * r7);\n            d4 += h8 * (5 * r6);\n            d4 += h9 * (5 * r5);\n            c += d4 >>> 13;\n            d4 &= 0x1fff;\n            var d5 = c;\n            d5 += h0 * r5;\n            d5 += h1 * r4;\n            d5 += h2 * r3;\n            d5 += h3 * r2;\n            d5 += h4 * r1;\n            c = d5 >>> 13;\n            d5 &= 0x1fff;\n            d5 += h5 * r0;\n            d5 += h6 * (5 * r9);\n            d5 += h7 * (5 * r8);\n            d5 += h8 * (5 * r7);\n            d5 += h9 * (5 * r6);\n            c += d5 >>> 13;\n            d5 &= 0x1fff;\n            var d6 = c;\n            d6 += h0 * r6;\n            d6 += h1 * r5;\n            d6 += h2 * r4;\n            d6 += h3 * r3;\n            d6 += h4 * r2;\n            c = d6 >>> 13;\n            d6 &= 0x1fff;\n            d6 += h5 * r1;\n            d6 += h6 * r0;\n            d6 += h7 * (5 * r9);\n            d6 += h8 * (5 * r8);\n            d6 += h9 * (5 * r7);\n            c += d6 >>> 13;\n            d6 &= 0x1fff;\n            var d7 = c;\n            d7 += h0 * r7;\n            d7 += h1 * r6;\n            d7 += h2 * r5;\n            d7 += h3 * r4;\n            d7 += h4 * r3;\n            c = d7 >>> 13;\n            d7 &= 0x1fff;\n            d7 += h5 * r2;\n            d7 += h6 * r1;\n            d7 += h7 * r0;\n            d7 += h8 * (5 * r9);\n            d7 += h9 * (5 * r8);\n            c += d7 >>> 13;\n            d7 &= 0x1fff;\n            var d8 = c;\n            d8 += h0 * r8;\n            d8 += h1 * r7;\n            d8 += h2 * r6;\n            d8 += h3 * r5;\n            d8 += h4 * r4;\n            c = d8 >>> 13;\n            d8 &= 0x1fff;\n            d8 += h5 * r3;\n            d8 += h6 * r2;\n            d8 += h7 * r1;\n            d8 += h8 * r0;\n            d8 += h9 * (5 * r9);\n            c += d8 >>> 13;\n            d8 &= 0x1fff;\n            var d9 = c;\n            d9 += h0 * r9;\n            d9 += h1 * r8;\n            d9 += h2 * r7;\n            d9 += h3 * r6;\n            d9 += h4 * r5;\n            c = d9 >>> 13;\n            d9 &= 0x1fff;\n            d9 += h5 * r4;\n            d9 += h6 * r3;\n            d9 += h7 * r2;\n            d9 += h8 * r1;\n            d9 += h9 * r0;\n            c += d9 >>> 13;\n            d9 &= 0x1fff;\n            c = (c << 2) + c | 0;\n            c = c + d0 | 0;\n            d0 = c & 0x1fff;\n            c = c >>> 13;\n            d1 += c;\n            h0 = d0;\n            h1 = d1;\n            h2 = d2;\n            h3 = d3;\n            h4 = d4;\n            h5 = d5;\n            h6 = d6;\n            h7 = d7;\n            h8 = d8;\n            h9 = d9;\n            mpos += 16;\n            bytes -= 16;\n        }\n        this._h[0] = h0;\n        this._h[1] = h1;\n        this._h[2] = h2;\n        this._h[3] = h3;\n        this._h[4] = h4;\n        this._h[5] = h5;\n        this._h[6] = h6;\n        this._h[7] = h7;\n        this._h[8] = h8;\n        this._h[9] = h9;\n    };\n    Poly1305.prototype.finish = function(mac, macpos) {\n        if (macpos === void 0) {\n            macpos = 0;\n        }\n        var g = new Uint16Array(10);\n        var c;\n        var mask;\n        var f;\n        var i;\n        if (this._leftover) {\n            i = this._leftover;\n            this._buffer[i++] = 1;\n            for(; i < 16; i++){\n                this._buffer[i] = 0;\n            }\n            this._fin = 1;\n            this._blocks(this._buffer, 0, 16);\n        }\n        c = this._h[1] >>> 13;\n        this._h[1] &= 0x1fff;\n        for(i = 2; i < 10; i++){\n            this._h[i] += c;\n            c = this._h[i] >>> 13;\n            this._h[i] &= 0x1fff;\n        }\n        this._h[0] += c * 5;\n        c = this._h[0] >>> 13;\n        this._h[0] &= 0x1fff;\n        this._h[1] += c;\n        c = this._h[1] >>> 13;\n        this._h[1] &= 0x1fff;\n        this._h[2] += c;\n        g[0] = this._h[0] + 5;\n        c = g[0] >>> 13;\n        g[0] &= 0x1fff;\n        for(i = 1; i < 10; i++){\n            g[i] = this._h[i] + c;\n            c = g[i] >>> 13;\n            g[i] &= 0x1fff;\n        }\n        g[9] -= 1 << 13;\n        mask = (c ^ 1) - 1;\n        for(i = 0; i < 10; i++){\n            g[i] &= mask;\n        }\n        mask = ~mask;\n        for(i = 0; i < 10; i++){\n            this._h[i] = this._h[i] & mask | g[i];\n        }\n        this._h[0] = (this._h[0] | this._h[1] << 13) & 0xffff;\n        this._h[1] = (this._h[1] >>> 3 | this._h[2] << 10) & 0xffff;\n        this._h[2] = (this._h[2] >>> 6 | this._h[3] << 7) & 0xffff;\n        this._h[3] = (this._h[3] >>> 9 | this._h[4] << 4) & 0xffff;\n        this._h[4] = (this._h[4] >>> 12 | this._h[5] << 1 | this._h[6] << 14) & 0xffff;\n        this._h[5] = (this._h[6] >>> 2 | this._h[7] << 11) & 0xffff;\n        this._h[6] = (this._h[7] >>> 5 | this._h[8] << 8) & 0xffff;\n        this._h[7] = (this._h[8] >>> 8 | this._h[9] << 5) & 0xffff;\n        f = this._h[0] + this._pad[0];\n        this._h[0] = f & 0xffff;\n        for(i = 1; i < 8; i++){\n            f = (this._h[i] + this._pad[i] | 0) + (f >>> 16) | 0;\n            this._h[i] = f & 0xffff;\n        }\n        mac[macpos + 0] = this._h[0] >>> 0;\n        mac[macpos + 1] = this._h[0] >>> 8;\n        mac[macpos + 2] = this._h[1] >>> 0;\n        mac[macpos + 3] = this._h[1] >>> 8;\n        mac[macpos + 4] = this._h[2] >>> 0;\n        mac[macpos + 5] = this._h[2] >>> 8;\n        mac[macpos + 6] = this._h[3] >>> 0;\n        mac[macpos + 7] = this._h[3] >>> 8;\n        mac[macpos + 8] = this._h[4] >>> 0;\n        mac[macpos + 9] = this._h[4] >>> 8;\n        mac[macpos + 10] = this._h[5] >>> 0;\n        mac[macpos + 11] = this._h[5] >>> 8;\n        mac[macpos + 12] = this._h[6] >>> 0;\n        mac[macpos + 13] = this._h[6] >>> 8;\n        mac[macpos + 14] = this._h[7] >>> 0;\n        mac[macpos + 15] = this._h[7] >>> 8;\n        this._finished = true;\n        return this;\n    };\n    Poly1305.prototype.update = function(m) {\n        var mpos = 0;\n        var bytes = m.length;\n        var want;\n        if (this._leftover) {\n            want = 16 - this._leftover;\n            if (want > bytes) {\n                want = bytes;\n            }\n            for(var i = 0; i < want; i++){\n                this._buffer[this._leftover + i] = m[mpos + i];\n            }\n            bytes -= want;\n            mpos += want;\n            this._leftover += want;\n            if (this._leftover < 16) {\n                return this;\n            }\n            this._blocks(this._buffer, 0, 16);\n            this._leftover = 0;\n        }\n        if (bytes >= 16) {\n            want = bytes - bytes % 16;\n            this._blocks(m, mpos, want);\n            mpos += want;\n            bytes -= want;\n        }\n        if (bytes) {\n            for(var i = 0; i < bytes; i++){\n                this._buffer[this._leftover + i] = m[mpos + i];\n            }\n            this._leftover += bytes;\n        }\n        return this;\n    };\n    Poly1305.prototype.digest = function() {\n        // TODO(dchest): it behaves differently than other hashes/HMAC,\n        // because it throws when finished — others just return saved result.\n        if (this._finished) {\n            throw new Error(\"Poly1305 was finished\");\n        }\n        var mac = new Uint8Array(16);\n        this.finish(mac);\n        return mac;\n    };\n    Poly1305.prototype.clean = function() {\n        wipe_1.wipe(this._buffer);\n        wipe_1.wipe(this._r);\n        wipe_1.wipe(this._h);\n        wipe_1.wipe(this._pad);\n        this._leftover = 0;\n        this._fin = 0;\n        this._finished = true; // mark as finished even if not\n        return this;\n    };\n    return Poly1305;\n}();\nexports.Poly1305 = Poly1305;\n/**\n * Returns 16-byte authenticator of data using a one-time 32-byte key.\n *\n * Important: key should be used for only one message, it should never repeat.\n */ function oneTimeAuth(key, data) {\n    var h = new Poly1305(key);\n    h.update(data);\n    var digest = h.digest();\n    h.clean();\n    return digest;\n}\nexports.oneTimeAuth = oneTimeAuth;\n/**\n * Returns true if two authenticators are 16-byte long and equal.\n * Uses contant-time comparison to avoid leaking timing information.\n */ function equal(a, b) {\n    if (a.length !== exports.DIGEST_LENGTH || b.length !== exports.DIGEST_LENGTH) {\n        return false;\n    }\n    return constant_time_1.equal(a, b);\n}\nexports.equal = equal; //# sourceMappingURL=poly1305.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@stablelib/poly1305/lib/poly1305.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@stablelib/random/lib/random.js":
/*!*******************************************************!*\
  !*** ../node_modules/@stablelib/random/lib/random.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.randomStringForEntropy = exports.randomString = exports.randomUint32 = exports.randomBytes = exports.defaultRandomSource = void 0;\nconst system_1 = __webpack_require__(/*! ./source/system */ \"(ssr)/../node_modules/@stablelib/random/lib/source/system.js\");\nconst binary_1 = __webpack_require__(/*! @stablelib/binary */ \"(ssr)/../node_modules/@stablelib/binary/lib/binary.js\");\nconst wipe_1 = __webpack_require__(/*! @stablelib/wipe */ \"(ssr)/../node_modules/@stablelib/wipe/lib/wipe.js\");\nexports.defaultRandomSource = new system_1.SystemRandomSource();\nfunction randomBytes(length, prng = exports.defaultRandomSource) {\n    return prng.randomBytes(length);\n}\nexports.randomBytes = randomBytes;\n/**\n * Returns a uniformly random unsigned 32-bit integer.\n */ function randomUint32(prng = exports.defaultRandomSource) {\n    // Generate 4-byte random buffer.\n    const buf = randomBytes(4, prng);\n    // Convert bytes from buffer into a 32-bit integer.\n    // It's not important which byte order to use, since\n    // the result is random.\n    const result = (0, binary_1.readUint32LE)(buf);\n    // Clean the buffer.\n    (0, wipe_1.wipe)(buf);\n    return result;\n}\nexports.randomUint32 = randomUint32;\n/** 62 alphanumeric characters for default charset of randomString() */ const ALPHANUMERIC = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n/**\n * Returns a uniform random string of the given length\n * with characters from the given charset.\n *\n * Charset must not have more than 256 characters.\n *\n * Default charset generates case-sensitive alphanumeric\n * strings (0-9, A-Z, a-z).\n */ function randomString(length, charset = ALPHANUMERIC, prng = exports.defaultRandomSource) {\n    if (charset.length < 2) {\n        throw new Error(\"randomString charset is too short\");\n    }\n    if (charset.length > 256) {\n        throw new Error(\"randomString charset is too long\");\n    }\n    let out = \"\";\n    const charsLen = charset.length;\n    const maxByte = 256 - 256 % charsLen;\n    while(length > 0){\n        const buf = randomBytes(Math.ceil(length * 256 / maxByte), prng);\n        for(let i = 0; i < buf.length && length > 0; i++){\n            const randomByte = buf[i];\n            if (randomByte < maxByte) {\n                out += charset.charAt(randomByte % charsLen);\n                length--;\n            }\n        }\n        (0, wipe_1.wipe)(buf);\n    }\n    return out;\n}\nexports.randomString = randomString;\n/**\n * Returns uniform random string containing at least the given\n * number of bits of entropy.\n *\n * For example, randomStringForEntropy(128) will return a 22-character\n * alphanumeric string, while randomStringForEntropy(128, \"0123456789\")\n * will return a 39-character numeric string, both will contain at\n * least 128 bits of entropy.\n *\n * Default charset generates case-sensitive alphanumeric\n * strings (0-9, A-Z, a-z).\n */ function randomStringForEntropy(bits, charset = ALPHANUMERIC, prng = exports.defaultRandomSource) {\n    const length = Math.ceil(bits / (Math.log(charset.length) / Math.LN2));\n    return randomString(length, charset, prng);\n}\nexports.randomStringForEntropy = randomStringForEntropy; //# sourceMappingURL=random.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0BzdGFibGVsaWIvcmFuZG9tL2xpYi9yYW5kb20uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixzQ0FBc0M7QUFDdEMsNkNBQTZDO0FBQzdDQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsOEJBQThCLEdBQUdBLG9CQUFvQixHQUFHQSxvQkFBb0IsR0FBR0EsbUJBQW1CLEdBQUdBLDJCQUEyQixHQUFHLEtBQUs7QUFDeEksTUFBTU8sV0FBV0MsbUJBQU9BLENBQUMscUZBQWlCO0FBQzFDLE1BQU1DLFdBQVdELG1CQUFPQSxDQUFDLGdGQUFtQjtBQUM1QyxNQUFNRSxTQUFTRixtQkFBT0EsQ0FBQywwRUFBaUI7QUFDeENSLDJCQUEyQixHQUFHLElBQUlPLFNBQVNJLGtCQUFrQjtBQUM3RCxTQUFTTixZQUFZTyxNQUFNLEVBQUVDLE9BQU9iLFFBQVFNLG1CQUFtQjtJQUMzRCxPQUFPTyxLQUFLUixXQUFXLENBQUNPO0FBQzVCO0FBQ0FaLG1CQUFtQixHQUFHSztBQUN0Qjs7Q0FFQyxHQUNELFNBQVNELGFBQWFTLE9BQU9iLFFBQVFNLG1CQUFtQjtJQUNwRCxpQ0FBaUM7SUFDakMsTUFBTVEsTUFBTVQsWUFBWSxHQUFHUTtJQUMzQixtREFBbUQ7SUFDbkQsb0RBQW9EO0lBQ3BELHdCQUF3QjtJQUN4QixNQUFNRSxTQUFTLENBQUMsR0FBR04sU0FBU08sWUFBWSxFQUFFRjtJQUMxQyxvQkFBb0I7SUFDbkIsSUFBR0osT0FBT08sSUFBSSxFQUFFSDtJQUNqQixPQUFPQztBQUNYO0FBQ0FmLG9CQUFvQixHQUFHSTtBQUN2QixxRUFBcUUsR0FDckUsTUFBTWMsZUFBZTtBQUNyQjs7Ozs7Ozs7Q0FRQyxHQUNELFNBQVNmLGFBQWFTLE1BQU0sRUFBRU8sVUFBVUQsWUFBWSxFQUFFTCxPQUFPYixRQUFRTSxtQkFBbUI7SUFDcEYsSUFBSWEsUUFBUVAsTUFBTSxHQUFHLEdBQUc7UUFDcEIsTUFBTSxJQUFJUSxNQUFNO0lBQ3BCO0lBQ0EsSUFBSUQsUUFBUVAsTUFBTSxHQUFHLEtBQUs7UUFDdEIsTUFBTSxJQUFJUSxNQUFNO0lBQ3BCO0lBQ0EsSUFBSUMsTUFBTTtJQUNWLE1BQU1DLFdBQVdILFFBQVFQLE1BQU07SUFDL0IsTUFBTVcsVUFBVSxNQUFPLE1BQU1EO0lBQzdCLE1BQU9WLFNBQVMsRUFBRztRQUNmLE1BQU1FLE1BQU1ULFlBQVltQixLQUFLQyxJQUFJLENBQUNiLFNBQVMsTUFBTVcsVUFBVVY7UUFDM0QsSUFBSyxJQUFJYSxJQUFJLEdBQUdBLElBQUlaLElBQUlGLE1BQU0sSUFBSUEsU0FBUyxHQUFHYyxJQUFLO1lBQy9DLE1BQU1DLGFBQWFiLEdBQUcsQ0FBQ1ksRUFBRTtZQUN6QixJQUFJQyxhQUFhSixTQUFTO2dCQUN0QkYsT0FBT0YsUUFBUVMsTUFBTSxDQUFDRCxhQUFhTDtnQkFDbkNWO1lBQ0o7UUFDSjtRQUNDLElBQUdGLE9BQU9PLElBQUksRUFBRUg7SUFDckI7SUFDQSxPQUFPTztBQUNYO0FBQ0FyQixvQkFBb0IsR0FBR0c7QUFDdkI7Ozs7Ozs7Ozs7O0NBV0MsR0FDRCxTQUFTRCx1QkFBdUIyQixJQUFJLEVBQUVWLFVBQVVELFlBQVksRUFBRUwsT0FBT2IsUUFBUU0sbUJBQW1CO0lBQzVGLE1BQU1NLFNBQVNZLEtBQUtDLElBQUksQ0FBQ0ksT0FBUUwsQ0FBQUEsS0FBS00sR0FBRyxDQUFDWCxRQUFRUCxNQUFNLElBQUlZLEtBQUtPLEdBQUc7SUFDcEUsT0FBTzVCLGFBQWFTLFFBQVFPLFNBQVNOO0FBQ3pDO0FBQ0FiLDhCQUE4QixHQUFHRSx3QkFDakMsa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9Ac3RhYmxlbGliL3JhbmRvbS9saWIvcmFuZG9tLmpzPzYyN2IiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKEMpIDIwMTYgRG1pdHJ5IENoZXN0bnlraFxuLy8gTUlUIExpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgZm9yIGRldGFpbHMuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnJhbmRvbVN0cmluZ0ZvckVudHJvcHkgPSBleHBvcnRzLnJhbmRvbVN0cmluZyA9IGV4cG9ydHMucmFuZG9tVWludDMyID0gZXhwb3J0cy5yYW5kb21CeXRlcyA9IGV4cG9ydHMuZGVmYXVsdFJhbmRvbVNvdXJjZSA9IHZvaWQgMDtcbmNvbnN0IHN5c3RlbV8xID0gcmVxdWlyZShcIi4vc291cmNlL3N5c3RlbVwiKTtcbmNvbnN0IGJpbmFyeV8xID0gcmVxdWlyZShcIkBzdGFibGVsaWIvYmluYXJ5XCIpO1xuY29uc3Qgd2lwZV8xID0gcmVxdWlyZShcIkBzdGFibGVsaWIvd2lwZVwiKTtcbmV4cG9ydHMuZGVmYXVsdFJhbmRvbVNvdXJjZSA9IG5ldyBzeXN0ZW1fMS5TeXN0ZW1SYW5kb21Tb3VyY2UoKTtcbmZ1bmN0aW9uIHJhbmRvbUJ5dGVzKGxlbmd0aCwgcHJuZyA9IGV4cG9ydHMuZGVmYXVsdFJhbmRvbVNvdXJjZSkge1xuICAgIHJldHVybiBwcm5nLnJhbmRvbUJ5dGVzKGxlbmd0aCk7XG59XG5leHBvcnRzLnJhbmRvbUJ5dGVzID0gcmFuZG9tQnl0ZXM7XG4vKipcbiAqIFJldHVybnMgYSB1bmlmb3JtbHkgcmFuZG9tIHVuc2lnbmVkIDMyLWJpdCBpbnRlZ2VyLlxuICovXG5mdW5jdGlvbiByYW5kb21VaW50MzIocHJuZyA9IGV4cG9ydHMuZGVmYXVsdFJhbmRvbVNvdXJjZSkge1xuICAgIC8vIEdlbmVyYXRlIDQtYnl0ZSByYW5kb20gYnVmZmVyLlxuICAgIGNvbnN0IGJ1ZiA9IHJhbmRvbUJ5dGVzKDQsIHBybmcpO1xuICAgIC8vIENvbnZlcnQgYnl0ZXMgZnJvbSBidWZmZXIgaW50byBhIDMyLWJpdCBpbnRlZ2VyLlxuICAgIC8vIEl0J3Mgbm90IGltcG9ydGFudCB3aGljaCBieXRlIG9yZGVyIHRvIHVzZSwgc2luY2VcbiAgICAvLyB0aGUgcmVzdWx0IGlzIHJhbmRvbS5cbiAgICBjb25zdCByZXN1bHQgPSAoMCwgYmluYXJ5XzEucmVhZFVpbnQzMkxFKShidWYpO1xuICAgIC8vIENsZWFuIHRoZSBidWZmZXIuXG4gICAgKDAsIHdpcGVfMS53aXBlKShidWYpO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG5leHBvcnRzLnJhbmRvbVVpbnQzMiA9IHJhbmRvbVVpbnQzMjtcbi8qKiA2MiBhbHBoYW51bWVyaWMgY2hhcmFjdGVycyBmb3IgZGVmYXVsdCBjaGFyc2V0IG9mIHJhbmRvbVN0cmluZygpICovXG5jb25zdCBBTFBIQU5VTUVSSUMgPSBcIjAxMjM0NTY3ODlBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6XCI7XG4vKipcbiAqIFJldHVybnMgYSB1bmlmb3JtIHJhbmRvbSBzdHJpbmcgb2YgdGhlIGdpdmVuIGxlbmd0aFxuICogd2l0aCBjaGFyYWN0ZXJzIGZyb20gdGhlIGdpdmVuIGNoYXJzZXQuXG4gKlxuICogQ2hhcnNldCBtdXN0IG5vdCBoYXZlIG1vcmUgdGhhbiAyNTYgY2hhcmFjdGVycy5cbiAqXG4gKiBEZWZhdWx0IGNoYXJzZXQgZ2VuZXJhdGVzIGNhc2Utc2Vuc2l0aXZlIGFscGhhbnVtZXJpY1xuICogc3RyaW5ncyAoMC05LCBBLVosIGEteikuXG4gKi9cbmZ1bmN0aW9uIHJhbmRvbVN0cmluZyhsZW5ndGgsIGNoYXJzZXQgPSBBTFBIQU5VTUVSSUMsIHBybmcgPSBleHBvcnRzLmRlZmF1bHRSYW5kb21Tb3VyY2UpIHtcbiAgICBpZiAoY2hhcnNldC5sZW5ndGggPCAyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcInJhbmRvbVN0cmluZyBjaGFyc2V0IGlzIHRvbyBzaG9ydFwiKTtcbiAgICB9XG4gICAgaWYgKGNoYXJzZXQubGVuZ3RoID4gMjU2KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcInJhbmRvbVN0cmluZyBjaGFyc2V0IGlzIHRvbyBsb25nXCIpO1xuICAgIH1cbiAgICBsZXQgb3V0ID0gJyc7XG4gICAgY29uc3QgY2hhcnNMZW4gPSBjaGFyc2V0Lmxlbmd0aDtcbiAgICBjb25zdCBtYXhCeXRlID0gMjU2IC0gKDI1NiAlIGNoYXJzTGVuKTtcbiAgICB3aGlsZSAobGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCBidWYgPSByYW5kb21CeXRlcyhNYXRoLmNlaWwobGVuZ3RoICogMjU2IC8gbWF4Qnl0ZSksIHBybmcpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ1Zi5sZW5ndGggJiYgbGVuZ3RoID4gMDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCByYW5kb21CeXRlID0gYnVmW2ldO1xuICAgICAgICAgICAgaWYgKHJhbmRvbUJ5dGUgPCBtYXhCeXRlKSB7XG4gICAgICAgICAgICAgICAgb3V0ICs9IGNoYXJzZXQuY2hhckF0KHJhbmRvbUJ5dGUgJSBjaGFyc0xlbik7XG4gICAgICAgICAgICAgICAgbGVuZ3RoLS07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgKDAsIHdpcGVfMS53aXBlKShidWYpO1xuICAgIH1cbiAgICByZXR1cm4gb3V0O1xufVxuZXhwb3J0cy5yYW5kb21TdHJpbmcgPSByYW5kb21TdHJpbmc7XG4vKipcbiAqIFJldHVybnMgdW5pZm9ybSByYW5kb20gc3RyaW5nIGNvbnRhaW5pbmcgYXQgbGVhc3QgdGhlIGdpdmVuXG4gKiBudW1iZXIgb2YgYml0cyBvZiBlbnRyb3B5LlxuICpcbiAqIEZvciBleGFtcGxlLCByYW5kb21TdHJpbmdGb3JFbnRyb3B5KDEyOCkgd2lsbCByZXR1cm4gYSAyMi1jaGFyYWN0ZXJcbiAqIGFscGhhbnVtZXJpYyBzdHJpbmcsIHdoaWxlIHJhbmRvbVN0cmluZ0ZvckVudHJvcHkoMTI4LCBcIjAxMjM0NTY3ODlcIilcbiAqIHdpbGwgcmV0dXJuIGEgMzktY2hhcmFjdGVyIG51bWVyaWMgc3RyaW5nLCBib3RoIHdpbGwgY29udGFpbiBhdFxuICogbGVhc3QgMTI4IGJpdHMgb2YgZW50cm9weS5cbiAqXG4gKiBEZWZhdWx0IGNoYXJzZXQgZ2VuZXJhdGVzIGNhc2Utc2Vuc2l0aXZlIGFscGhhbnVtZXJpY1xuICogc3RyaW5ncyAoMC05LCBBLVosIGEteikuXG4gKi9cbmZ1bmN0aW9uIHJhbmRvbVN0cmluZ0ZvckVudHJvcHkoYml0cywgY2hhcnNldCA9IEFMUEhBTlVNRVJJQywgcHJuZyA9IGV4cG9ydHMuZGVmYXVsdFJhbmRvbVNvdXJjZSkge1xuICAgIGNvbnN0IGxlbmd0aCA9IE1hdGguY2VpbChiaXRzIC8gKE1hdGgubG9nKGNoYXJzZXQubGVuZ3RoKSAvIE1hdGguTE4yKSk7XG4gICAgcmV0dXJuIHJhbmRvbVN0cmluZyhsZW5ndGgsIGNoYXJzZXQsIHBybmcpO1xufVxuZXhwb3J0cy5yYW5kb21TdHJpbmdGb3JFbnRyb3B5ID0gcmFuZG9tU3RyaW5nRm9yRW50cm9weTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJhbmRvbS5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJyYW5kb21TdHJpbmdGb3JFbnRyb3B5IiwicmFuZG9tU3RyaW5nIiwicmFuZG9tVWludDMyIiwicmFuZG9tQnl0ZXMiLCJkZWZhdWx0UmFuZG9tU291cmNlIiwic3lzdGVtXzEiLCJyZXF1aXJlIiwiYmluYXJ5XzEiLCJ3aXBlXzEiLCJTeXN0ZW1SYW5kb21Tb3VyY2UiLCJsZW5ndGgiLCJwcm5nIiwiYnVmIiwicmVzdWx0IiwicmVhZFVpbnQzMkxFIiwid2lwZSIsIkFMUEhBTlVNRVJJQyIsImNoYXJzZXQiLCJFcnJvciIsIm91dCIsImNoYXJzTGVuIiwibWF4Qnl0ZSIsIk1hdGgiLCJjZWlsIiwiaSIsInJhbmRvbUJ5dGUiLCJjaGFyQXQiLCJiaXRzIiwibG9nIiwiTE4yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@stablelib/random/lib/random.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@stablelib/random/lib/source/browser.js":
/*!***************************************************************!*\
  !*** ../node_modules/@stablelib/random/lib/source/browser.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.BrowserRandomSource = void 0;\nconst QUOTA = 65536;\nclass BrowserRandomSource {\n    constructor(){\n        this.isAvailable = false;\n        this.isInstantiated = false;\n        const browserCrypto = typeof self !== \"undefined\" ? self.crypto || self.msCrypto // IE11 has msCrypto\n         : null;\n        if (browserCrypto && browserCrypto.getRandomValues !== undefined) {\n            this._crypto = browserCrypto;\n            this.isAvailable = true;\n            this.isInstantiated = true;\n        }\n    }\n    randomBytes(length) {\n        if (!this.isAvailable || !this._crypto) {\n            throw new Error(\"Browser random byte generator is not available.\");\n        }\n        const out = new Uint8Array(length);\n        for(let i = 0; i < out.length; i += QUOTA){\n            this._crypto.getRandomValues(out.subarray(i, i + Math.min(out.length - i, QUOTA)));\n        }\n        return out;\n    }\n}\nexports.BrowserRandomSource = BrowserRandomSource; //# sourceMappingURL=browser.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0BzdGFibGVsaWIvcmFuZG9tL2xpYi9zb3VyY2UvYnJvd3Nlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLHNDQUFzQztBQUN0Qyw2Q0FBNkM7QUFDN0NBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCwyQkFBMkIsR0FBRyxLQUFLO0FBQ25DLE1BQU1HLFFBQVE7QUFDZCxNQUFNRDtJQUNGRSxhQUFjO1FBQ1YsSUFBSSxDQUFDQyxXQUFXLEdBQUc7UUFDbkIsSUFBSSxDQUFDQyxjQUFjLEdBQUc7UUFDdEIsTUFBTUMsZ0JBQWdCLE9BQU9DLFNBQVMsY0FDL0JBLEtBQUtDLE1BQU0sSUFBSUQsS0FBS0UsUUFBUSxDQUFFLG9CQUFvQjtXQUNuRDtRQUNOLElBQUlILGlCQUFpQkEsY0FBY0ksZUFBZSxLQUFLQyxXQUFXO1lBQzlELElBQUksQ0FBQ0MsT0FBTyxHQUFHTjtZQUNmLElBQUksQ0FBQ0YsV0FBVyxHQUFHO1lBQ25CLElBQUksQ0FBQ0MsY0FBYyxHQUFHO1FBQzFCO0lBQ0o7SUFDQVEsWUFBWUMsTUFBTSxFQUFFO1FBQ2hCLElBQUksQ0FBQyxJQUFJLENBQUNWLFdBQVcsSUFBSSxDQUFDLElBQUksQ0FBQ1EsT0FBTyxFQUFFO1lBQ3BDLE1BQU0sSUFBSUcsTUFBTTtRQUNwQjtRQUNBLE1BQU1DLE1BQU0sSUFBSUMsV0FBV0g7UUFDM0IsSUFBSyxJQUFJSSxJQUFJLEdBQUdBLElBQUlGLElBQUlGLE1BQU0sRUFBRUksS0FBS2hCLE1BQU87WUFDeEMsSUFBSSxDQUFDVSxPQUFPLENBQUNGLGVBQWUsQ0FBQ00sSUFBSUcsUUFBUSxDQUFDRCxHQUFHQSxJQUFJRSxLQUFLQyxHQUFHLENBQUNMLElBQUlGLE1BQU0sR0FBR0ksR0FBR2hCO1FBQzlFO1FBQ0EsT0FBT2M7SUFDWDtBQUNKO0FBQ0FqQiwyQkFBMkIsR0FBR0UscUJBQzlCLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQHN0YWJsZWxpYi9yYW5kb20vbGliL3NvdXJjZS9icm93c2VyLmpzPzFjNmYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKEMpIDIwMTYgRG1pdHJ5IENoZXN0bnlraFxuLy8gTUlUIExpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgZm9yIGRldGFpbHMuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkJyb3dzZXJSYW5kb21Tb3VyY2UgPSB2b2lkIDA7XG5jb25zdCBRVU9UQSA9IDY1NTM2O1xuY2xhc3MgQnJvd3NlclJhbmRvbVNvdXJjZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuaXNBdmFpbGFibGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pc0luc3RhbnRpYXRlZCA9IGZhbHNlO1xuICAgICAgICBjb25zdCBicm93c2VyQ3J5cHRvID0gdHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnXG4gICAgICAgICAgICA/IChzZWxmLmNyeXB0byB8fCBzZWxmLm1zQ3J5cHRvKSAvLyBJRTExIGhhcyBtc0NyeXB0b1xuICAgICAgICAgICAgOiBudWxsO1xuICAgICAgICBpZiAoYnJvd3NlckNyeXB0byAmJiBicm93c2VyQ3J5cHRvLmdldFJhbmRvbVZhbHVlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLl9jcnlwdG8gPSBicm93c2VyQ3J5cHRvO1xuICAgICAgICAgICAgdGhpcy5pc0F2YWlsYWJsZSA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLmlzSW5zdGFudGlhdGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByYW5kb21CeXRlcyhsZW5ndGgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzQXZhaWxhYmxlIHx8ICF0aGlzLl9jcnlwdG8pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkJyb3dzZXIgcmFuZG9tIGJ5dGUgZ2VuZXJhdG9yIGlzIG5vdCBhdmFpbGFibGUuXCIpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG91dCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3V0Lmxlbmd0aDsgaSArPSBRVU9UQSkge1xuICAgICAgICAgICAgdGhpcy5fY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhvdXQuc3ViYXJyYXkoaSwgaSArIE1hdGgubWluKG91dC5sZW5ndGggLSBpLCBRVU9UQSkpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH1cbn1cbmV4cG9ydHMuQnJvd3NlclJhbmRvbVNvdXJjZSA9IEJyb3dzZXJSYW5kb21Tb3VyY2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1icm93c2VyLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkJyb3dzZXJSYW5kb21Tb3VyY2UiLCJRVU9UQSIsImNvbnN0cnVjdG9yIiwiaXNBdmFpbGFibGUiLCJpc0luc3RhbnRpYXRlZCIsImJyb3dzZXJDcnlwdG8iLCJzZWxmIiwiY3J5cHRvIiwibXNDcnlwdG8iLCJnZXRSYW5kb21WYWx1ZXMiLCJ1bmRlZmluZWQiLCJfY3J5cHRvIiwicmFuZG9tQnl0ZXMiLCJsZW5ndGgiLCJFcnJvciIsIm91dCIsIlVpbnQ4QXJyYXkiLCJpIiwic3ViYXJyYXkiLCJNYXRoIiwibWluIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@stablelib/random/lib/source/browser.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@stablelib/random/lib/source/node.js":
/*!************************************************************!*\
  !*** ../node_modules/@stablelib/random/lib/source/node.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.NodeRandomSource = void 0;\nconst wipe_1 = __webpack_require__(/*! @stablelib/wipe */ \"(ssr)/../node_modules/@stablelib/wipe/lib/wipe.js\");\nclass NodeRandomSource {\n    constructor(){\n        this.isAvailable = false;\n        this.isInstantiated = false;\n        if (true) {\n            const nodeCrypto = __webpack_require__(/*! crypto */ \"crypto\");\n            if (nodeCrypto && nodeCrypto.randomBytes) {\n                this._crypto = nodeCrypto;\n                this.isAvailable = true;\n                this.isInstantiated = true;\n            }\n        }\n    }\n    randomBytes(length) {\n        if (!this.isAvailable || !this._crypto) {\n            throw new Error(\"Node.js random byte generator is not available.\");\n        }\n        // Get random bytes (result is Buffer).\n        let buffer = this._crypto.randomBytes(length);\n        // Make sure we got the length that we requested.\n        if (buffer.length !== length) {\n            throw new Error(\"NodeRandomSource: got fewer bytes than requested\");\n        }\n        // Allocate output array.\n        const out = new Uint8Array(length);\n        // Copy bytes from buffer to output.\n        for(let i = 0; i < out.length; i++){\n            out[i] = buffer[i];\n        }\n        // Cleanup.\n        (0, wipe_1.wipe)(buffer);\n        return out;\n    }\n}\nexports.NodeRandomSource = NodeRandomSource; //# sourceMappingURL=node.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0BzdGFibGVsaWIvcmFuZG9tL2xpYi9zb3VyY2Uvbm9kZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLHNDQUFzQztBQUN0Qyw2Q0FBNkM7QUFDN0NBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCx3QkFBd0IsR0FBRyxLQUFLO0FBQ2hDLE1BQU1HLFNBQVNDLG1CQUFPQSxDQUFDLDBFQUFpQjtBQUN4QyxNQUFNRjtJQUNGRyxhQUFjO1FBQ1YsSUFBSSxDQUFDQyxXQUFXLEdBQUc7UUFDbkIsSUFBSSxDQUFDQyxjQUFjLEdBQUc7UUFDdEIsSUFBSSxJQUE4QixFQUFFO1lBQ2hDLE1BQU1DLGFBQWFKLG1CQUFPQSxDQUFDLHNCQUFRO1lBQ25DLElBQUlJLGNBQWNBLFdBQVdDLFdBQVcsRUFBRTtnQkFDdEMsSUFBSSxDQUFDQyxPQUFPLEdBQUdGO2dCQUNmLElBQUksQ0FBQ0YsV0FBVyxHQUFHO2dCQUNuQixJQUFJLENBQUNDLGNBQWMsR0FBRztZQUMxQjtRQUNKO0lBQ0o7SUFDQUUsWUFBWUUsTUFBTSxFQUFFO1FBQ2hCLElBQUksQ0FBQyxJQUFJLENBQUNMLFdBQVcsSUFBSSxDQUFDLElBQUksQ0FBQ0ksT0FBTyxFQUFFO1lBQ3BDLE1BQU0sSUFBSUUsTUFBTTtRQUNwQjtRQUNBLHVDQUF1QztRQUN2QyxJQUFJQyxTQUFTLElBQUksQ0FBQ0gsT0FBTyxDQUFDRCxXQUFXLENBQUNFO1FBQ3RDLGlEQUFpRDtRQUNqRCxJQUFJRSxPQUFPRixNQUFNLEtBQUtBLFFBQVE7WUFDMUIsTUFBTSxJQUFJQyxNQUFNO1FBQ3BCO1FBQ0EseUJBQXlCO1FBQ3pCLE1BQU1FLE1BQU0sSUFBSUMsV0FBV0o7UUFDM0Isb0NBQW9DO1FBQ3BDLElBQUssSUFBSUssSUFBSSxHQUFHQSxJQUFJRixJQUFJSCxNQUFNLEVBQUVLLElBQUs7WUFDakNGLEdBQUcsQ0FBQ0UsRUFBRSxHQUFHSCxNQUFNLENBQUNHLEVBQUU7UUFDdEI7UUFDQSxXQUFXO1FBQ1YsSUFBR2IsT0FBT2MsSUFBSSxFQUFFSjtRQUNqQixPQUFPQztJQUNYO0FBQ0o7QUFDQWQsd0JBQXdCLEdBQUdFLGtCQUMzQixnQ0FBZ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BzdGFibGVsaWIvcmFuZG9tL2xpYi9zb3VyY2Uvbm9kZS5qcz9kYTU2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChDKSAyMDE2IERtaXRyeSBDaGVzdG55a2hcbi8vIE1JVCBMaWNlbnNlLiBTZWUgTElDRU5TRSBmaWxlIGZvciBkZXRhaWxzLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Ob2RlUmFuZG9tU291cmNlID0gdm9pZCAwO1xuY29uc3Qgd2lwZV8xID0gcmVxdWlyZShcIkBzdGFibGVsaWIvd2lwZVwiKTtcbmNsYXNzIE5vZGVSYW5kb21Tb3VyY2Uge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmlzQXZhaWxhYmxlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaXNJbnN0YW50aWF0ZWQgPSBmYWxzZTtcbiAgICAgICAgaWYgKHR5cGVvZiByZXF1aXJlICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICBjb25zdCBub2RlQ3J5cHRvID0gcmVxdWlyZShcImNyeXB0b1wiKTtcbiAgICAgICAgICAgIGlmIChub2RlQ3J5cHRvICYmIG5vZGVDcnlwdG8ucmFuZG9tQnl0ZXMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jcnlwdG8gPSBub2RlQ3J5cHRvO1xuICAgICAgICAgICAgICAgIHRoaXMuaXNBdmFpbGFibGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuaXNJbnN0YW50aWF0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJhbmRvbUJ5dGVzKGxlbmd0aCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNBdmFpbGFibGUgfHwgIXRoaXMuX2NyeXB0bykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm9kZS5qcyByYW5kb20gYnl0ZSBnZW5lcmF0b3IgaXMgbm90IGF2YWlsYWJsZS5cIik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gR2V0IHJhbmRvbSBieXRlcyAocmVzdWx0IGlzIEJ1ZmZlcikuXG4gICAgICAgIGxldCBidWZmZXIgPSB0aGlzLl9jcnlwdG8ucmFuZG9tQnl0ZXMobGVuZ3RoKTtcbiAgICAgICAgLy8gTWFrZSBzdXJlIHdlIGdvdCB0aGUgbGVuZ3RoIHRoYXQgd2UgcmVxdWVzdGVkLlxuICAgICAgICBpZiAoYnVmZmVyLmxlbmd0aCAhPT0gbGVuZ3RoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJOb2RlUmFuZG9tU291cmNlOiBnb3QgZmV3ZXIgYnl0ZXMgdGhhbiByZXF1ZXN0ZWRcIik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQWxsb2NhdGUgb3V0cHV0IGFycmF5LlxuICAgICAgICBjb25zdCBvdXQgPSBuZXcgVWludDhBcnJheShsZW5ndGgpO1xuICAgICAgICAvLyBDb3B5IGJ5dGVzIGZyb20gYnVmZmVyIHRvIG91dHB1dC5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvdXQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIG91dFtpXSA9IGJ1ZmZlcltpXTtcbiAgICAgICAgfVxuICAgICAgICAvLyBDbGVhbnVwLlxuICAgICAgICAoMCwgd2lwZV8xLndpcGUpKGJ1ZmZlcik7XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxufVxuZXhwb3J0cy5Ob2RlUmFuZG9tU291cmNlID0gTm9kZVJhbmRvbVNvdXJjZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5vZGUuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiTm9kZVJhbmRvbVNvdXJjZSIsIndpcGVfMSIsInJlcXVpcmUiLCJjb25zdHJ1Y3RvciIsImlzQXZhaWxhYmxlIiwiaXNJbnN0YW50aWF0ZWQiLCJub2RlQ3J5cHRvIiwicmFuZG9tQnl0ZXMiLCJfY3J5cHRvIiwibGVuZ3RoIiwiRXJyb3IiLCJidWZmZXIiLCJvdXQiLCJVaW50OEFycmF5IiwiaSIsIndpcGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@stablelib/random/lib/source/node.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@stablelib/random/lib/source/system.js":
/*!**************************************************************!*\
  !*** ../node_modules/@stablelib/random/lib/source/system.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.SystemRandomSource = void 0;\nconst browser_1 = __webpack_require__(/*! ./browser */ \"(ssr)/../node_modules/@stablelib/random/lib/source/browser.js\");\nconst node_1 = __webpack_require__(/*! ./node */ \"(ssr)/../node_modules/@stablelib/random/lib/source/node.js\");\nclass SystemRandomSource {\n    constructor(){\n        this.isAvailable = false;\n        this.name = \"\";\n        // Try browser.\n        this._source = new browser_1.BrowserRandomSource();\n        if (this._source.isAvailable) {\n            this.isAvailable = true;\n            this.name = \"Browser\";\n            return;\n        }\n        // If no browser source, try Node.\n        this._source = new node_1.NodeRandomSource();\n        if (this._source.isAvailable) {\n            this.isAvailable = true;\n            this.name = \"Node\";\n            return;\n        }\n    // No sources, we're out of options.\n    }\n    randomBytes(length) {\n        if (!this.isAvailable) {\n            throw new Error(\"System random byte generator is not available.\");\n        }\n        return this._source.randomBytes(length);\n    }\n}\nexports.SystemRandomSource = SystemRandomSource; //# sourceMappingURL=system.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0BzdGFibGVsaWIvcmFuZG9tL2xpYi9zb3VyY2Uvc3lzdGVtLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2Isc0NBQXNDO0FBQ3RDLDZDQUE2QztBQUM3Q0EsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELDBCQUEwQixHQUFHLEtBQUs7QUFDbEMsTUFBTUcsWUFBWUMsbUJBQU9BLENBQUMsZ0ZBQVc7QUFDckMsTUFBTUMsU0FBU0QsbUJBQU9BLENBQUMsMEVBQVE7QUFDL0IsTUFBTUY7SUFDRkksYUFBYztRQUNWLElBQUksQ0FBQ0MsV0FBVyxHQUFHO1FBQ25CLElBQUksQ0FBQ0MsSUFBSSxHQUFHO1FBQ1osZUFBZTtRQUNmLElBQUksQ0FBQ0MsT0FBTyxHQUFHLElBQUlOLFVBQVVPLG1CQUFtQjtRQUNoRCxJQUFJLElBQUksQ0FBQ0QsT0FBTyxDQUFDRixXQUFXLEVBQUU7WUFDMUIsSUFBSSxDQUFDQSxXQUFXLEdBQUc7WUFDbkIsSUFBSSxDQUFDQyxJQUFJLEdBQUc7WUFDWjtRQUNKO1FBQ0Esa0NBQWtDO1FBQ2xDLElBQUksQ0FBQ0MsT0FBTyxHQUFHLElBQUlKLE9BQU9NLGdCQUFnQjtRQUMxQyxJQUFJLElBQUksQ0FBQ0YsT0FBTyxDQUFDRixXQUFXLEVBQUU7WUFDMUIsSUFBSSxDQUFDQSxXQUFXLEdBQUc7WUFDbkIsSUFBSSxDQUFDQyxJQUFJLEdBQUc7WUFDWjtRQUNKO0lBQ0Esb0NBQW9DO0lBQ3hDO0lBQ0FJLFlBQVlDLE1BQU0sRUFBRTtRQUNoQixJQUFJLENBQUMsSUFBSSxDQUFDTixXQUFXLEVBQUU7WUFDbkIsTUFBTSxJQUFJTyxNQUFNO1FBQ3BCO1FBQ0EsT0FBTyxJQUFJLENBQUNMLE9BQU8sQ0FBQ0csV0FBVyxDQUFDQztJQUNwQztBQUNKO0FBQ0FiLDBCQUEwQixHQUFHRSxvQkFDN0Isa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9Ac3RhYmxlbGliL3JhbmRvbS9saWIvc291cmNlL3N5c3RlbS5qcz8wZDcyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChDKSAyMDE2IERtaXRyeSBDaGVzdG55a2hcbi8vIE1JVCBMaWNlbnNlLiBTZWUgTElDRU5TRSBmaWxlIGZvciBkZXRhaWxzLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TeXN0ZW1SYW5kb21Tb3VyY2UgPSB2b2lkIDA7XG5jb25zdCBicm93c2VyXzEgPSByZXF1aXJlKFwiLi9icm93c2VyXCIpO1xuY29uc3Qgbm9kZV8xID0gcmVxdWlyZShcIi4vbm9kZVwiKTtcbmNsYXNzIFN5c3RlbVJhbmRvbVNvdXJjZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuaXNBdmFpbGFibGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJcIjtcbiAgICAgICAgLy8gVHJ5IGJyb3dzZXIuXG4gICAgICAgIHRoaXMuX3NvdXJjZSA9IG5ldyBicm93c2VyXzEuQnJvd3NlclJhbmRvbVNvdXJjZSgpO1xuICAgICAgICBpZiAodGhpcy5fc291cmNlLmlzQXZhaWxhYmxlKSB7XG4gICAgICAgICAgICB0aGlzLmlzQXZhaWxhYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMubmFtZSA9IFwiQnJvd3NlclwiO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIElmIG5vIGJyb3dzZXIgc291cmNlLCB0cnkgTm9kZS5cbiAgICAgICAgdGhpcy5fc291cmNlID0gbmV3IG5vZGVfMS5Ob2RlUmFuZG9tU291cmNlKCk7XG4gICAgICAgIGlmICh0aGlzLl9zb3VyY2UuaXNBdmFpbGFibGUpIHtcbiAgICAgICAgICAgIHRoaXMuaXNBdmFpbGFibGUgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5uYW1lID0gXCJOb2RlXCI7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gTm8gc291cmNlcywgd2UncmUgb3V0IG9mIG9wdGlvbnMuXG4gICAgfVxuICAgIHJhbmRvbUJ5dGVzKGxlbmd0aCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNBdmFpbGFibGUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlN5c3RlbSByYW5kb20gYnl0ZSBnZW5lcmF0b3IgaXMgbm90IGF2YWlsYWJsZS5cIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3NvdXJjZS5yYW5kb21CeXRlcyhsZW5ndGgpO1xuICAgIH1cbn1cbmV4cG9ydHMuU3lzdGVtUmFuZG9tU291cmNlID0gU3lzdGVtUmFuZG9tU291cmNlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3lzdGVtLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlN5c3RlbVJhbmRvbVNvdXJjZSIsImJyb3dzZXJfMSIsInJlcXVpcmUiLCJub2RlXzEiLCJjb25zdHJ1Y3RvciIsImlzQXZhaWxhYmxlIiwibmFtZSIsIl9zb3VyY2UiLCJCcm93c2VyUmFuZG9tU291cmNlIiwiTm9kZVJhbmRvbVNvdXJjZSIsInJhbmRvbUJ5dGVzIiwibGVuZ3RoIiwiRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@stablelib/random/lib/source/system.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@stablelib/sha256/lib/sha256.js":
/*!*******************************************************!*\
  !*** ../node_modules/@stablelib/sha256/lib/sha256.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar binary_1 = __webpack_require__(/*! @stablelib/binary */ \"(ssr)/../node_modules/@stablelib/binary/lib/binary.js\");\nvar wipe_1 = __webpack_require__(/*! @stablelib/wipe */ \"(ssr)/../node_modules/@stablelib/wipe/lib/wipe.js\");\nexports.DIGEST_LENGTH = 32;\nexports.BLOCK_SIZE = 64;\n/**\n * SHA2-256 cryptographic hash algorithm.\n */ var SHA256 = /** @class */ function() {\n    function SHA256() {\n        /** Length of hash output */ this.digestLength = exports.DIGEST_LENGTH;\n        /** Block size */ this.blockSize = exports.BLOCK_SIZE;\n        // Note: Int32Array is used instead of Uint32Array for performance reasons.\n        this._state = new Int32Array(8); // hash state\n        this._temp = new Int32Array(64); // temporary state\n        this._buffer = new Uint8Array(128); // buffer for data to hash\n        this._bufferLength = 0; // number of bytes in buffer\n        this._bytesHashed = 0; // number of total bytes hashed\n        this._finished = false; // indicates whether the hash was finalized\n        this.reset();\n    }\n    SHA256.prototype._initState = function() {\n        this._state[0] = 0x6a09e667;\n        this._state[1] = 0xbb67ae85;\n        this._state[2] = 0x3c6ef372;\n        this._state[3] = 0xa54ff53a;\n        this._state[4] = 0x510e527f;\n        this._state[5] = 0x9b05688c;\n        this._state[6] = 0x1f83d9ab;\n        this._state[7] = 0x5be0cd19;\n    };\n    /**\n     * Resets hash state making it possible\n     * to re-use this instance to hash other data.\n     */ SHA256.prototype.reset = function() {\n        this._initState();\n        this._bufferLength = 0;\n        this._bytesHashed = 0;\n        this._finished = false;\n        return this;\n    };\n    /**\n     * Cleans internal buffers and resets hash state.\n     */ SHA256.prototype.clean = function() {\n        wipe_1.wipe(this._buffer);\n        wipe_1.wipe(this._temp);\n        this.reset();\n    };\n    /**\n     * Updates hash state with the given data.\n     *\n     * Throws error when trying to update already finalized hash:\n     * instance must be reset to update it again.\n     */ SHA256.prototype.update = function(data, dataLength) {\n        if (dataLength === void 0) {\n            dataLength = data.length;\n        }\n        if (this._finished) {\n            throw new Error(\"SHA256: can't update because hash was finished.\");\n        }\n        var dataPos = 0;\n        this._bytesHashed += dataLength;\n        if (this._bufferLength > 0) {\n            while(this._bufferLength < this.blockSize && dataLength > 0){\n                this._buffer[this._bufferLength++] = data[dataPos++];\n                dataLength--;\n            }\n            if (this._bufferLength === this.blockSize) {\n                hashBlocks(this._temp, this._state, this._buffer, 0, this.blockSize);\n                this._bufferLength = 0;\n            }\n        }\n        if (dataLength >= this.blockSize) {\n            dataPos = hashBlocks(this._temp, this._state, data, dataPos, dataLength);\n            dataLength %= this.blockSize;\n        }\n        while(dataLength > 0){\n            this._buffer[this._bufferLength++] = data[dataPos++];\n            dataLength--;\n        }\n        return this;\n    };\n    /**\n     * Finalizes hash state and puts hash into out.\n     * If hash was already finalized, puts the same value.\n     */ SHA256.prototype.finish = function(out) {\n        if (!this._finished) {\n            var bytesHashed = this._bytesHashed;\n            var left = this._bufferLength;\n            var bitLenHi = bytesHashed / 0x20000000 | 0;\n            var bitLenLo = bytesHashed << 3;\n            var padLength = bytesHashed % 64 < 56 ? 64 : 128;\n            this._buffer[left] = 0x80;\n            for(var i = left + 1; i < padLength - 8; i++){\n                this._buffer[i] = 0;\n            }\n            binary_1.writeUint32BE(bitLenHi, this._buffer, padLength - 8);\n            binary_1.writeUint32BE(bitLenLo, this._buffer, padLength - 4);\n            hashBlocks(this._temp, this._state, this._buffer, 0, padLength);\n            this._finished = true;\n        }\n        for(var i = 0; i < this.digestLength / 4; i++){\n            binary_1.writeUint32BE(this._state[i], out, i * 4);\n        }\n        return this;\n    };\n    /**\n     * Returns the final hash digest.\n     */ SHA256.prototype.digest = function() {\n        var out = new Uint8Array(this.digestLength);\n        this.finish(out);\n        return out;\n    };\n    /**\n     * Function useful for HMAC/PBKDF2 optimization.\n     * Returns hash state to be used with restoreState().\n     * Only chain value is saved, not buffers or other\n     * state variables.\n     */ SHA256.prototype.saveState = function() {\n        if (this._finished) {\n            throw new Error(\"SHA256: cannot save finished state\");\n        }\n        return {\n            state: new Int32Array(this._state),\n            buffer: this._bufferLength > 0 ? new Uint8Array(this._buffer) : undefined,\n            bufferLength: this._bufferLength,\n            bytesHashed: this._bytesHashed\n        };\n    };\n    /**\n     * Function useful for HMAC/PBKDF2 optimization.\n     * Restores state saved by saveState() and sets bytesHashed\n     * to the given value.\n     */ SHA256.prototype.restoreState = function(savedState) {\n        this._state.set(savedState.state);\n        this._bufferLength = savedState.bufferLength;\n        if (savedState.buffer) {\n            this._buffer.set(savedState.buffer);\n        }\n        this._bytesHashed = savedState.bytesHashed;\n        this._finished = false;\n        return this;\n    };\n    /**\n     * Cleans state returned by saveState().\n     */ SHA256.prototype.cleanSavedState = function(savedState) {\n        wipe_1.wipe(savedState.state);\n        if (savedState.buffer) {\n            wipe_1.wipe(savedState.buffer);\n        }\n        savedState.bufferLength = 0;\n        savedState.bytesHashed = 0;\n    };\n    return SHA256;\n}();\nexports.SHA256 = SHA256;\n// Constants\nvar K = new Int32Array([\n    0x428a2f98,\n    0x71374491,\n    0xb5c0fbcf,\n    0xe9b5dba5,\n    0x3956c25b,\n    0x59f111f1,\n    0x923f82a4,\n    0xab1c5ed5,\n    0xd807aa98,\n    0x12835b01,\n    0x243185be,\n    0x550c7dc3,\n    0x72be5d74,\n    0x80deb1fe,\n    0x9bdc06a7,\n    0xc19bf174,\n    0xe49b69c1,\n    0xefbe4786,\n    0x0fc19dc6,\n    0x240ca1cc,\n    0x2de92c6f,\n    0x4a7484aa,\n    0x5cb0a9dc,\n    0x76f988da,\n    0x983e5152,\n    0xa831c66d,\n    0xb00327c8,\n    0xbf597fc7,\n    0xc6e00bf3,\n    0xd5a79147,\n    0x06ca6351,\n    0x14292967,\n    0x27b70a85,\n    0x2e1b2138,\n    0x4d2c6dfc,\n    0x53380d13,\n    0x650a7354,\n    0x766a0abb,\n    0x81c2c92e,\n    0x92722c85,\n    0xa2bfe8a1,\n    0xa81a664b,\n    0xc24b8b70,\n    0xc76c51a3,\n    0xd192e819,\n    0xd6990624,\n    0xf40e3585,\n    0x106aa070,\n    0x19a4c116,\n    0x1e376c08,\n    0x2748774c,\n    0x34b0bcb5,\n    0x391c0cb3,\n    0x4ed8aa4a,\n    0x5b9cca4f,\n    0x682e6ff3,\n    0x748f82ee,\n    0x78a5636f,\n    0x84c87814,\n    0x8cc70208,\n    0x90befffa,\n    0xa4506ceb,\n    0xbef9a3f7,\n    0xc67178f2\n]);\nfunction hashBlocks(w, v, p, pos, len) {\n    while(len >= 64){\n        var a = v[0];\n        var b = v[1];\n        var c = v[2];\n        var d = v[3];\n        var e = v[4];\n        var f = v[5];\n        var g = v[6];\n        var h = v[7];\n        for(var i = 0; i < 16; i++){\n            var j = pos + i * 4;\n            w[i] = binary_1.readUint32BE(p, j);\n        }\n        for(var i = 16; i < 64; i++){\n            var u = w[i - 2];\n            var t1 = (u >>> 17 | u << 32 - 17) ^ (u >>> 19 | u << 32 - 19) ^ u >>> 10;\n            u = w[i - 15];\n            var t2 = (u >>> 7 | u << 32 - 7) ^ (u >>> 18 | u << 32 - 18) ^ u >>> 3;\n            w[i] = (t1 + w[i - 7] | 0) + (t2 + w[i - 16] | 0);\n        }\n        for(var i = 0; i < 64; i++){\n            var t1 = (((e >>> 6 | e << 32 - 6) ^ (e >>> 11 | e << 32 - 11) ^ (e >>> 25 | e << 32 - 25)) + (e & f ^ ~e & g) | 0) + (h + (K[i] + w[i] | 0) | 0) | 0;\n            var t2 = ((a >>> 2 | a << 32 - 2) ^ (a >>> 13 | a << 32 - 13) ^ (a >>> 22 | a << 32 - 22)) + (a & b ^ a & c ^ b & c) | 0;\n            h = g;\n            g = f;\n            f = e;\n            e = d + t1 | 0;\n            d = c;\n            c = b;\n            b = a;\n            a = t1 + t2 | 0;\n        }\n        v[0] += a;\n        v[1] += b;\n        v[2] += c;\n        v[3] += d;\n        v[4] += e;\n        v[5] += f;\n        v[6] += g;\n        v[7] += h;\n        pos += 64;\n        len -= 64;\n    }\n    return pos;\n}\nfunction hash(data) {\n    var h = new SHA256();\n    h.update(data);\n    var digest = h.digest();\n    h.clean();\n    return digest;\n}\nexports.hash = hash; //# sourceMappingURL=sha256.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@stablelib/sha256/lib/sha256.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@stablelib/sha512/lib/sha512.js":
/*!*******************************************************!*\
  !*** ../node_modules/@stablelib/sha512/lib/sha512.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar binary_1 = __webpack_require__(/*! @stablelib/binary */ \"(ssr)/../node_modules/@stablelib/binary/lib/binary.js\");\nvar wipe_1 = __webpack_require__(/*! @stablelib/wipe */ \"(ssr)/../node_modules/@stablelib/wipe/lib/wipe.js\");\nexports.DIGEST_LENGTH = 64;\nexports.BLOCK_SIZE = 128;\n/**\n * SHA-2-512 cryptographic hash algorithm.\n */ var SHA512 = /** @class */ function() {\n    function SHA512() {\n        /** Length of hash output */ this.digestLength = exports.DIGEST_LENGTH;\n        /** Block size */ this.blockSize = exports.BLOCK_SIZE;\n        // Note: Int32Array is used instead of Uint32Array for performance reasons.\n        this._stateHi = new Int32Array(8); // hash state, high bytes\n        this._stateLo = new Int32Array(8); // hash state, low bytes\n        this._tempHi = new Int32Array(16); // temporary state, high bytes\n        this._tempLo = new Int32Array(16); // temporary state, low bytes\n        this._buffer = new Uint8Array(256); // buffer for data to hash\n        this._bufferLength = 0; // number of bytes in buffer\n        this._bytesHashed = 0; // number of total bytes hashed\n        this._finished = false; // indicates whether the hash was finalized\n        this.reset();\n    }\n    SHA512.prototype._initState = function() {\n        this._stateHi[0] = 0x6a09e667;\n        this._stateHi[1] = 0xbb67ae85;\n        this._stateHi[2] = 0x3c6ef372;\n        this._stateHi[3] = 0xa54ff53a;\n        this._stateHi[4] = 0x510e527f;\n        this._stateHi[5] = 0x9b05688c;\n        this._stateHi[6] = 0x1f83d9ab;\n        this._stateHi[7] = 0x5be0cd19;\n        this._stateLo[0] = 0xf3bcc908;\n        this._stateLo[1] = 0x84caa73b;\n        this._stateLo[2] = 0xfe94f82b;\n        this._stateLo[3] = 0x5f1d36f1;\n        this._stateLo[4] = 0xade682d1;\n        this._stateLo[5] = 0x2b3e6c1f;\n        this._stateLo[6] = 0xfb41bd6b;\n        this._stateLo[7] = 0x137e2179;\n    };\n    /**\n     * Resets hash state making it possible\n     * to re-use this instance to hash other data.\n     */ SHA512.prototype.reset = function() {\n        this._initState();\n        this._bufferLength = 0;\n        this._bytesHashed = 0;\n        this._finished = false;\n        return this;\n    };\n    /**\n     * Cleans internal buffers and resets hash state.\n     */ SHA512.prototype.clean = function() {\n        wipe_1.wipe(this._buffer);\n        wipe_1.wipe(this._tempHi);\n        wipe_1.wipe(this._tempLo);\n        this.reset();\n    };\n    /**\n     * Updates hash state with the given data.\n     *\n     * Throws error when trying to update already finalized hash:\n     * instance must be reset to update it again.\n     */ SHA512.prototype.update = function(data, dataLength) {\n        if (dataLength === void 0) {\n            dataLength = data.length;\n        }\n        if (this._finished) {\n            throw new Error(\"SHA512: can't update because hash was finished.\");\n        }\n        var dataPos = 0;\n        this._bytesHashed += dataLength;\n        if (this._bufferLength > 0) {\n            while(this._bufferLength < exports.BLOCK_SIZE && dataLength > 0){\n                this._buffer[this._bufferLength++] = data[dataPos++];\n                dataLength--;\n            }\n            if (this._bufferLength === this.blockSize) {\n                hashBlocks(this._tempHi, this._tempLo, this._stateHi, this._stateLo, this._buffer, 0, this.blockSize);\n                this._bufferLength = 0;\n            }\n        }\n        if (dataLength >= this.blockSize) {\n            dataPos = hashBlocks(this._tempHi, this._tempLo, this._stateHi, this._stateLo, data, dataPos, dataLength);\n            dataLength %= this.blockSize;\n        }\n        while(dataLength > 0){\n            this._buffer[this._bufferLength++] = data[dataPos++];\n            dataLength--;\n        }\n        return this;\n    };\n    /**\n     * Finalizes hash state and puts hash into out.\n     * If hash was already finalized, puts the same value.\n     */ SHA512.prototype.finish = function(out) {\n        if (!this._finished) {\n            var bytesHashed = this._bytesHashed;\n            var left = this._bufferLength;\n            var bitLenHi = bytesHashed / 0x20000000 | 0;\n            var bitLenLo = bytesHashed << 3;\n            var padLength = bytesHashed % 128 < 112 ? 128 : 256;\n            this._buffer[left] = 0x80;\n            for(var i = left + 1; i < padLength - 8; i++){\n                this._buffer[i] = 0;\n            }\n            binary_1.writeUint32BE(bitLenHi, this._buffer, padLength - 8);\n            binary_1.writeUint32BE(bitLenLo, this._buffer, padLength - 4);\n            hashBlocks(this._tempHi, this._tempLo, this._stateHi, this._stateLo, this._buffer, 0, padLength);\n            this._finished = true;\n        }\n        for(var i = 0; i < this.digestLength / 8; i++){\n            binary_1.writeUint32BE(this._stateHi[i], out, i * 8);\n            binary_1.writeUint32BE(this._stateLo[i], out, i * 8 + 4);\n        }\n        return this;\n    };\n    /**\n     * Returns the final hash digest.\n     */ SHA512.prototype.digest = function() {\n        var out = new Uint8Array(this.digestLength);\n        this.finish(out);\n        return out;\n    };\n    /**\n     * Function useful for HMAC/PBKDF2 optimization. Returns hash state to be\n     * used with restoreState(). Only chain value is saved, not buffers or\n     * other state variables.\n     */ SHA512.prototype.saveState = function() {\n        if (this._finished) {\n            throw new Error(\"SHA256: cannot save finished state\");\n        }\n        return {\n            stateHi: new Int32Array(this._stateHi),\n            stateLo: new Int32Array(this._stateLo),\n            buffer: this._bufferLength > 0 ? new Uint8Array(this._buffer) : undefined,\n            bufferLength: this._bufferLength,\n            bytesHashed: this._bytesHashed\n        };\n    };\n    /**\n     * Function useful for HMAC/PBKDF2 optimization. Restores state saved by\n     * saveState() and sets bytesHashed to the given value.\n     */ SHA512.prototype.restoreState = function(savedState) {\n        this._stateHi.set(savedState.stateHi);\n        this._stateLo.set(savedState.stateLo);\n        this._bufferLength = savedState.bufferLength;\n        if (savedState.buffer) {\n            this._buffer.set(savedState.buffer);\n        }\n        this._bytesHashed = savedState.bytesHashed;\n        this._finished = false;\n        return this;\n    };\n    /**\n     * Cleans state returned by saveState().\n     */ SHA512.prototype.cleanSavedState = function(savedState) {\n        wipe_1.wipe(savedState.stateHi);\n        wipe_1.wipe(savedState.stateLo);\n        if (savedState.buffer) {\n            wipe_1.wipe(savedState.buffer);\n        }\n        savedState.bufferLength = 0;\n        savedState.bytesHashed = 0;\n    };\n    return SHA512;\n}();\nexports.SHA512 = SHA512;\n// Constants\nvar K = new Int32Array([\n    0x428a2f98,\n    0xd728ae22,\n    0x71374491,\n    0x23ef65cd,\n    0xb5c0fbcf,\n    0xec4d3b2f,\n    0xe9b5dba5,\n    0x8189dbbc,\n    0x3956c25b,\n    0xf348b538,\n    0x59f111f1,\n    0xb605d019,\n    0x923f82a4,\n    0xaf194f9b,\n    0xab1c5ed5,\n    0xda6d8118,\n    0xd807aa98,\n    0xa3030242,\n    0x12835b01,\n    0x45706fbe,\n    0x243185be,\n    0x4ee4b28c,\n    0x550c7dc3,\n    0xd5ffb4e2,\n    0x72be5d74,\n    0xf27b896f,\n    0x80deb1fe,\n    0x3b1696b1,\n    0x9bdc06a7,\n    0x25c71235,\n    0xc19bf174,\n    0xcf692694,\n    0xe49b69c1,\n    0x9ef14ad2,\n    0xefbe4786,\n    0x384f25e3,\n    0x0fc19dc6,\n    0x8b8cd5b5,\n    0x240ca1cc,\n    0x77ac9c65,\n    0x2de92c6f,\n    0x592b0275,\n    0x4a7484aa,\n    0x6ea6e483,\n    0x5cb0a9dc,\n    0xbd41fbd4,\n    0x76f988da,\n    0x831153b5,\n    0x983e5152,\n    0xee66dfab,\n    0xa831c66d,\n    0x2db43210,\n    0xb00327c8,\n    0x98fb213f,\n    0xbf597fc7,\n    0xbeef0ee4,\n    0xc6e00bf3,\n    0x3da88fc2,\n    0xd5a79147,\n    0x930aa725,\n    0x06ca6351,\n    0xe003826f,\n    0x14292967,\n    0x0a0e6e70,\n    0x27b70a85,\n    0x46d22ffc,\n    0x2e1b2138,\n    0x5c26c926,\n    0x4d2c6dfc,\n    0x5ac42aed,\n    0x53380d13,\n    0x9d95b3df,\n    0x650a7354,\n    0x8baf63de,\n    0x766a0abb,\n    0x3c77b2a8,\n    0x81c2c92e,\n    0x47edaee6,\n    0x92722c85,\n    0x1482353b,\n    0xa2bfe8a1,\n    0x4cf10364,\n    0xa81a664b,\n    0xbc423001,\n    0xc24b8b70,\n    0xd0f89791,\n    0xc76c51a3,\n    0x0654be30,\n    0xd192e819,\n    0xd6ef5218,\n    0xd6990624,\n    0x5565a910,\n    0xf40e3585,\n    0x5771202a,\n    0x106aa070,\n    0x32bbd1b8,\n    0x19a4c116,\n    0xb8d2d0c8,\n    0x1e376c08,\n    0x5141ab53,\n    0x2748774c,\n    0xdf8eeb99,\n    0x34b0bcb5,\n    0xe19b48a8,\n    0x391c0cb3,\n    0xc5c95a63,\n    0x4ed8aa4a,\n    0xe3418acb,\n    0x5b9cca4f,\n    0x7763e373,\n    0x682e6ff3,\n    0xd6b2b8a3,\n    0x748f82ee,\n    0x5defb2fc,\n    0x78a5636f,\n    0x43172f60,\n    0x84c87814,\n    0xa1f0ab72,\n    0x8cc70208,\n    0x1a6439ec,\n    0x90befffa,\n    0x23631e28,\n    0xa4506ceb,\n    0xde82bde9,\n    0xbef9a3f7,\n    0xb2c67915,\n    0xc67178f2,\n    0xe372532b,\n    0xca273ece,\n    0xea26619c,\n    0xd186b8c7,\n    0x21c0c207,\n    0xeada7dd6,\n    0xcde0eb1e,\n    0xf57d4f7f,\n    0xee6ed178,\n    0x06f067aa,\n    0x72176fba,\n    0x0a637dc5,\n    0xa2c898a6,\n    0x113f9804,\n    0xbef90dae,\n    0x1b710b35,\n    0x131c471b,\n    0x28db77f5,\n    0x23047d84,\n    0x32caab7b,\n    0x40c72493,\n    0x3c9ebe0a,\n    0x15c9bebc,\n    0x431d67c4,\n    0x9c100d4c,\n    0x4cc5d4be,\n    0xcb3e42b6,\n    0x597f299c,\n    0xfc657e2a,\n    0x5fcb6fab,\n    0x3ad6faec,\n    0x6c44198c,\n    0x4a475817\n]);\nfunction hashBlocks(wh, wl, hh, hl, m, pos, len) {\n    var ah0 = hh[0], ah1 = hh[1], ah2 = hh[2], ah3 = hh[3], ah4 = hh[4], ah5 = hh[5], ah6 = hh[6], ah7 = hh[7], al0 = hl[0], al1 = hl[1], al2 = hl[2], al3 = hl[3], al4 = hl[4], al5 = hl[5], al6 = hl[6], al7 = hl[7];\n    var h, l;\n    var th, tl;\n    var a, b, c, d;\n    while(len >= 128){\n        for(var i = 0; i < 16; i++){\n            var j = 8 * i + pos;\n            wh[i] = binary_1.readUint32BE(m, j);\n            wl[i] = binary_1.readUint32BE(m, j + 4);\n        }\n        for(var i = 0; i < 80; i++){\n            var bh0 = ah0;\n            var bh1 = ah1;\n            var bh2 = ah2;\n            var bh3 = ah3;\n            var bh4 = ah4;\n            var bh5 = ah5;\n            var bh6 = ah6;\n            var bh7 = ah7;\n            var bl0 = al0;\n            var bl1 = al1;\n            var bl2 = al2;\n            var bl3 = al3;\n            var bl4 = al4;\n            var bl5 = al5;\n            var bl6 = al6;\n            var bl7 = al7;\n            // add\n            h = ah7;\n            l = al7;\n            a = l & 0xffff;\n            b = l >>> 16;\n            c = h & 0xffff;\n            d = h >>> 16;\n            // Sigma1\n            h = (ah4 >>> 14 | al4 << 32 - 14) ^ (ah4 >>> 18 | al4 << 32 - 18) ^ (al4 >>> 41 - 32 | ah4 << 32 - (41 - 32));\n            l = (al4 >>> 14 | ah4 << 32 - 14) ^ (al4 >>> 18 | ah4 << 32 - 18) ^ (ah4 >>> 41 - 32 | al4 << 32 - (41 - 32));\n            a += l & 0xffff;\n            b += l >>> 16;\n            c += h & 0xffff;\n            d += h >>> 16;\n            // Ch\n            h = ah4 & ah5 ^ ~ah4 & ah6;\n            l = al4 & al5 ^ ~al4 & al6;\n            a += l & 0xffff;\n            b += l >>> 16;\n            c += h & 0xffff;\n            d += h >>> 16;\n            // K\n            h = K[i * 2];\n            l = K[i * 2 + 1];\n            a += l & 0xffff;\n            b += l >>> 16;\n            c += h & 0xffff;\n            d += h >>> 16;\n            // w\n            h = wh[i % 16];\n            l = wl[i % 16];\n            a += l & 0xffff;\n            b += l >>> 16;\n            c += h & 0xffff;\n            d += h >>> 16;\n            b += a >>> 16;\n            c += b >>> 16;\n            d += c >>> 16;\n            th = c & 0xffff | d << 16;\n            tl = a & 0xffff | b << 16;\n            // add\n            h = th;\n            l = tl;\n            a = l & 0xffff;\n            b = l >>> 16;\n            c = h & 0xffff;\n            d = h >>> 16;\n            // Sigma0\n            h = (ah0 >>> 28 | al0 << 32 - 28) ^ (al0 >>> 34 - 32 | ah0 << 32 - (34 - 32)) ^ (al0 >>> 39 - 32 | ah0 << 32 - (39 - 32));\n            l = (al0 >>> 28 | ah0 << 32 - 28) ^ (ah0 >>> 34 - 32 | al0 << 32 - (34 - 32)) ^ (ah0 >>> 39 - 32 | al0 << 32 - (39 - 32));\n            a += l & 0xffff;\n            b += l >>> 16;\n            c += h & 0xffff;\n            d += h >>> 16;\n            // Maj\n            h = ah0 & ah1 ^ ah0 & ah2 ^ ah1 & ah2;\n            l = al0 & al1 ^ al0 & al2 ^ al1 & al2;\n            a += l & 0xffff;\n            b += l >>> 16;\n            c += h & 0xffff;\n            d += h >>> 16;\n            b += a >>> 16;\n            c += b >>> 16;\n            d += c >>> 16;\n            bh7 = c & 0xffff | d << 16;\n            bl7 = a & 0xffff | b << 16;\n            // add\n            h = bh3;\n            l = bl3;\n            a = l & 0xffff;\n            b = l >>> 16;\n            c = h & 0xffff;\n            d = h >>> 16;\n            h = th;\n            l = tl;\n            a += l & 0xffff;\n            b += l >>> 16;\n            c += h & 0xffff;\n            d += h >>> 16;\n            b += a >>> 16;\n            c += b >>> 16;\n            d += c >>> 16;\n            bh3 = c & 0xffff | d << 16;\n            bl3 = a & 0xffff | b << 16;\n            ah1 = bh0;\n            ah2 = bh1;\n            ah3 = bh2;\n            ah4 = bh3;\n            ah5 = bh4;\n            ah6 = bh5;\n            ah7 = bh6;\n            ah0 = bh7;\n            al1 = bl0;\n            al2 = bl1;\n            al3 = bl2;\n            al4 = bl3;\n            al5 = bl4;\n            al6 = bl5;\n            al7 = bl6;\n            al0 = bl7;\n            if (i % 16 === 15) {\n                for(var j = 0; j < 16; j++){\n                    // add\n                    h = wh[j];\n                    l = wl[j];\n                    a = l & 0xffff;\n                    b = l >>> 16;\n                    c = h & 0xffff;\n                    d = h >>> 16;\n                    h = wh[(j + 9) % 16];\n                    l = wl[(j + 9) % 16];\n                    a += l & 0xffff;\n                    b += l >>> 16;\n                    c += h & 0xffff;\n                    d += h >>> 16;\n                    // sigma0\n                    th = wh[(j + 1) % 16];\n                    tl = wl[(j + 1) % 16];\n                    h = (th >>> 1 | tl << 32 - 1) ^ (th >>> 8 | tl << 32 - 8) ^ th >>> 7;\n                    l = (tl >>> 1 | th << 32 - 1) ^ (tl >>> 8 | th << 32 - 8) ^ (tl >>> 7 | th << 32 - 7);\n                    a += l & 0xffff;\n                    b += l >>> 16;\n                    c += h & 0xffff;\n                    d += h >>> 16;\n                    // sigma1\n                    th = wh[(j + 14) % 16];\n                    tl = wl[(j + 14) % 16];\n                    h = (th >>> 19 | tl << 32 - 19) ^ (tl >>> 61 - 32 | th << 32 - (61 - 32)) ^ th >>> 6;\n                    l = (tl >>> 19 | th << 32 - 19) ^ (th >>> 61 - 32 | tl << 32 - (61 - 32)) ^ (tl >>> 6 | th << 32 - 6);\n                    a += l & 0xffff;\n                    b += l >>> 16;\n                    c += h & 0xffff;\n                    d += h >>> 16;\n                    b += a >>> 16;\n                    c += b >>> 16;\n                    d += c >>> 16;\n                    wh[j] = c & 0xffff | d << 16;\n                    wl[j] = a & 0xffff | b << 16;\n                }\n            }\n        }\n        // add\n        h = ah0;\n        l = al0;\n        a = l & 0xffff;\n        b = l >>> 16;\n        c = h & 0xffff;\n        d = h >>> 16;\n        h = hh[0];\n        l = hl[0];\n        a += l & 0xffff;\n        b += l >>> 16;\n        c += h & 0xffff;\n        d += h >>> 16;\n        b += a >>> 16;\n        c += b >>> 16;\n        d += c >>> 16;\n        hh[0] = ah0 = c & 0xffff | d << 16;\n        hl[0] = al0 = a & 0xffff | b << 16;\n        h = ah1;\n        l = al1;\n        a = l & 0xffff;\n        b = l >>> 16;\n        c = h & 0xffff;\n        d = h >>> 16;\n        h = hh[1];\n        l = hl[1];\n        a += l & 0xffff;\n        b += l >>> 16;\n        c += h & 0xffff;\n        d += h >>> 16;\n        b += a >>> 16;\n        c += b >>> 16;\n        d += c >>> 16;\n        hh[1] = ah1 = c & 0xffff | d << 16;\n        hl[1] = al1 = a & 0xffff | b << 16;\n        h = ah2;\n        l = al2;\n        a = l & 0xffff;\n        b = l >>> 16;\n        c = h & 0xffff;\n        d = h >>> 16;\n        h = hh[2];\n        l = hl[2];\n        a += l & 0xffff;\n        b += l >>> 16;\n        c += h & 0xffff;\n        d += h >>> 16;\n        b += a >>> 16;\n        c += b >>> 16;\n        d += c >>> 16;\n        hh[2] = ah2 = c & 0xffff | d << 16;\n        hl[2] = al2 = a & 0xffff | b << 16;\n        h = ah3;\n        l = al3;\n        a = l & 0xffff;\n        b = l >>> 16;\n        c = h & 0xffff;\n        d = h >>> 16;\n        h = hh[3];\n        l = hl[3];\n        a += l & 0xffff;\n        b += l >>> 16;\n        c += h & 0xffff;\n        d += h >>> 16;\n        b += a >>> 16;\n        c += b >>> 16;\n        d += c >>> 16;\n        hh[3] = ah3 = c & 0xffff | d << 16;\n        hl[3] = al3 = a & 0xffff | b << 16;\n        h = ah4;\n        l = al4;\n        a = l & 0xffff;\n        b = l >>> 16;\n        c = h & 0xffff;\n        d = h >>> 16;\n        h = hh[4];\n        l = hl[4];\n        a += l & 0xffff;\n        b += l >>> 16;\n        c += h & 0xffff;\n        d += h >>> 16;\n        b += a >>> 16;\n        c += b >>> 16;\n        d += c >>> 16;\n        hh[4] = ah4 = c & 0xffff | d << 16;\n        hl[4] = al4 = a & 0xffff | b << 16;\n        h = ah5;\n        l = al5;\n        a = l & 0xffff;\n        b = l >>> 16;\n        c = h & 0xffff;\n        d = h >>> 16;\n        h = hh[5];\n        l = hl[5];\n        a += l & 0xffff;\n        b += l >>> 16;\n        c += h & 0xffff;\n        d += h >>> 16;\n        b += a >>> 16;\n        c += b >>> 16;\n        d += c >>> 16;\n        hh[5] = ah5 = c & 0xffff | d << 16;\n        hl[5] = al5 = a & 0xffff | b << 16;\n        h = ah6;\n        l = al6;\n        a = l & 0xffff;\n        b = l >>> 16;\n        c = h & 0xffff;\n        d = h >>> 16;\n        h = hh[6];\n        l = hl[6];\n        a += l & 0xffff;\n        b += l >>> 16;\n        c += h & 0xffff;\n        d += h >>> 16;\n        b += a >>> 16;\n        c += b >>> 16;\n        d += c >>> 16;\n        hh[6] = ah6 = c & 0xffff | d << 16;\n        hl[6] = al6 = a & 0xffff | b << 16;\n        h = ah7;\n        l = al7;\n        a = l & 0xffff;\n        b = l >>> 16;\n        c = h & 0xffff;\n        d = h >>> 16;\n        h = hh[7];\n        l = hl[7];\n        a += l & 0xffff;\n        b += l >>> 16;\n        c += h & 0xffff;\n        d += h >>> 16;\n        b += a >>> 16;\n        c += b >>> 16;\n        d += c >>> 16;\n        hh[7] = ah7 = c & 0xffff | d << 16;\n        hl[7] = al7 = a & 0xffff | b << 16;\n        pos += 128;\n        len -= 128;\n    }\n    return pos;\n}\nfunction hash(data) {\n    var h = new SHA512();\n    h.update(data);\n    var digest = h.digest();\n    h.clean();\n    return digest;\n}\nexports.hash = hash; //# sourceMappingURL=sha512.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@stablelib/sha512/lib/sha512.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@stablelib/wipe/lib/wipe.js":
/*!***************************************************!*\
  !*** ../node_modules/@stablelib/wipe/lib/wipe.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n/**\n * Sets all values in the given array to zero and returns it.\n *\n * The fact that it sets bytes to zero can be relied on.\n *\n * There is no guarantee that this function makes data disappear from memory,\n * as runtime implementation can, for example, have copying garbage collector\n * that will make copies of sensitive data before we wipe it. Or that an\n * operating system will write our data to swap or sleep image. Another thing\n * is that an optimizing compiler can remove calls to this function or make it\n * no-op. There's nothing we can do with it, so we just do our best and hope\n * that everything will be okay and good will triumph over evil.\n */ function wipe(array) {\n    // Right now it's similar to array.fill(0). If it turns\n    // out that runtimes optimize this call away, maybe\n    // we can try something else.\n    for(var i = 0; i < array.length; i++){\n        array[i] = 0;\n    }\n    return array;\n}\nexports.wipe = wipe; //# sourceMappingURL=wipe.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0BzdGFibGVsaWIvd2lwZS9saWIvd2lwZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLHNDQUFzQztBQUN0Qyw2Q0FBNkM7QUFDN0NBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdEOzs7Ozs7Ozs7Ozs7Q0FZQyxHQUNELFNBQVNDLEtBQUtDLEtBQUs7SUFDZix1REFBdUQ7SUFDdkQsbURBQW1EO0lBQ25ELDZCQUE2QjtJQUM3QixJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUQsTUFBTUUsTUFBTSxFQUFFRCxJQUFLO1FBQ25DRCxLQUFLLENBQUNDLEVBQUUsR0FBRztJQUNmO0lBQ0EsT0FBT0Q7QUFDWDtBQUNBSCxZQUFZLEdBQUdFLE1BQ2YsZ0NBQWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9Ac3RhYmxlbGliL3dpcGUvbGliL3dpcGUuanM/OWUzNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoQykgMjAxNiBEbWl0cnkgQ2hlc3RueWtoXG4vLyBNSVQgTGljZW5zZS4gU2VlIExJQ0VOU0UgZmlsZSBmb3IgZGV0YWlscy5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKlxuICogU2V0cyBhbGwgdmFsdWVzIGluIHRoZSBnaXZlbiBhcnJheSB0byB6ZXJvIGFuZCByZXR1cm5zIGl0LlxuICpcbiAqIFRoZSBmYWN0IHRoYXQgaXQgc2V0cyBieXRlcyB0byB6ZXJvIGNhbiBiZSByZWxpZWQgb24uXG4gKlxuICogVGhlcmUgaXMgbm8gZ3VhcmFudGVlIHRoYXQgdGhpcyBmdW5jdGlvbiBtYWtlcyBkYXRhIGRpc2FwcGVhciBmcm9tIG1lbW9yeSxcbiAqIGFzIHJ1bnRpbWUgaW1wbGVtZW50YXRpb24gY2FuLCBmb3IgZXhhbXBsZSwgaGF2ZSBjb3B5aW5nIGdhcmJhZ2UgY29sbGVjdG9yXG4gKiB0aGF0IHdpbGwgbWFrZSBjb3BpZXMgb2Ygc2Vuc2l0aXZlIGRhdGEgYmVmb3JlIHdlIHdpcGUgaXQuIE9yIHRoYXQgYW5cbiAqIG9wZXJhdGluZyBzeXN0ZW0gd2lsbCB3cml0ZSBvdXIgZGF0YSB0byBzd2FwIG9yIHNsZWVwIGltYWdlLiBBbm90aGVyIHRoaW5nXG4gKiBpcyB0aGF0IGFuIG9wdGltaXppbmcgY29tcGlsZXIgY2FuIHJlbW92ZSBjYWxscyB0byB0aGlzIGZ1bmN0aW9uIG9yIG1ha2UgaXRcbiAqIG5vLW9wLiBUaGVyZSdzIG5vdGhpbmcgd2UgY2FuIGRvIHdpdGggaXQsIHNvIHdlIGp1c3QgZG8gb3VyIGJlc3QgYW5kIGhvcGVcbiAqIHRoYXQgZXZlcnl0aGluZyB3aWxsIGJlIG9rYXkgYW5kIGdvb2Qgd2lsbCB0cml1bXBoIG92ZXIgZXZpbC5cbiAqL1xuZnVuY3Rpb24gd2lwZShhcnJheSkge1xuICAgIC8vIFJpZ2h0IG5vdyBpdCdzIHNpbWlsYXIgdG8gYXJyYXkuZmlsbCgwKS4gSWYgaXQgdHVybnNcbiAgICAvLyBvdXQgdGhhdCBydW50aW1lcyBvcHRpbWl6ZSB0aGlzIGNhbGwgYXdheSwgbWF5YmVcbiAgICAvLyB3ZSBjYW4gdHJ5IHNvbWV0aGluZyBlbHNlLlxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYXJyYXlbaV0gPSAwO1xuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG59XG5leHBvcnRzLndpcGUgPSB3aXBlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d2lwZS5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ3aXBlIiwiYXJyYXkiLCJpIiwibGVuZ3RoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@stablelib/wipe/lib/wipe.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@stablelib/x25519/lib/x25519.js":
/*!*******************************************************!*\
  !*** ../node_modules/@stablelib/x25519/lib/x25519.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.sharedKey = exports.generateKeyPair = exports.generateKeyPairFromSeed = exports.scalarMultBase = exports.scalarMult = exports.SHARED_KEY_LENGTH = exports.SECRET_KEY_LENGTH = exports.PUBLIC_KEY_LENGTH = void 0;\n/**\n * Package x25519 implements X25519 key agreement.\n */ const random_1 = __webpack_require__(/*! @stablelib/random */ \"(ssr)/../node_modules/@stablelib/random/lib/random.js\");\nconst wipe_1 = __webpack_require__(/*! @stablelib/wipe */ \"(ssr)/../node_modules/@stablelib/wipe/lib/wipe.js\");\nexports.PUBLIC_KEY_LENGTH = 32;\nexports.SECRET_KEY_LENGTH = 32;\nexports.SHARED_KEY_LENGTH = 32;\n// Returns new zero-filled 16-element GF (Float64Array).\n// If passed an array of numbers, prefills the returned\n// array with them.\n//\n// We use Float64Array, because we need 48-bit numbers\n// for this implementation.\nfunction gf(init) {\n    const r = new Float64Array(16);\n    if (init) {\n        for(let i = 0; i < init.length; i++){\n            r[i] = init[i];\n        }\n    }\n    return r;\n}\n// Base point.\nconst _9 = new Uint8Array(32);\n_9[0] = 9;\nconst _121665 = gf([\n    0xdb41,\n    1\n]);\nfunction car25519(o) {\n    let c = 1;\n    for(let i = 0; i < 16; i++){\n        let v = o[i] + c + 65535;\n        c = Math.floor(v / 65536);\n        o[i] = v - c * 65536;\n    }\n    o[0] += c - 1 + 37 * (c - 1);\n}\nfunction sel25519(p, q, b) {\n    const c = ~(b - 1);\n    for(let i = 0; i < 16; i++){\n        const t = c & (p[i] ^ q[i]);\n        p[i] ^= t;\n        q[i] ^= t;\n    }\n}\nfunction pack25519(o, n) {\n    const m = gf();\n    const t = gf();\n    for(let i = 0; i < 16; i++){\n        t[i] = n[i];\n    }\n    car25519(t);\n    car25519(t);\n    car25519(t);\n    for(let j = 0; j < 2; j++){\n        m[0] = t[0] - 0xffed;\n        for(let i = 1; i < 15; i++){\n            m[i] = t[i] - 0xffff - (m[i - 1] >> 16 & 1);\n            m[i - 1] &= 0xffff;\n        }\n        m[15] = t[15] - 0x7fff - (m[14] >> 16 & 1);\n        const b = m[15] >> 16 & 1;\n        m[14] &= 0xffff;\n        sel25519(t, m, 1 - b);\n    }\n    for(let i = 0; i < 16; i++){\n        o[2 * i] = t[i] & 0xff;\n        o[2 * i + 1] = t[i] >> 8;\n    }\n}\nfunction unpack25519(o, n) {\n    for(let i = 0; i < 16; i++){\n        o[i] = n[2 * i] + (n[2 * i + 1] << 8);\n    }\n    o[15] &= 0x7fff;\n}\nfunction add(o, a, b) {\n    for(let i = 0; i < 16; i++){\n        o[i] = a[i] + b[i];\n    }\n}\nfunction sub(o, a, b) {\n    for(let i = 0; i < 16; i++){\n        o[i] = a[i] - b[i];\n    }\n}\nfunction mul(o, a, b) {\n    let v, c, t0 = 0, t1 = 0, t2 = 0, t3 = 0, t4 = 0, t5 = 0, t6 = 0, t7 = 0, t8 = 0, t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0, t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0, t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0, b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7], b8 = b[8], b9 = b[9], b10 = b[10], b11 = b[11], b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];\n    v = a[0];\n    t0 += v * b0;\n    t1 += v * b1;\n    t2 += v * b2;\n    t3 += v * b3;\n    t4 += v * b4;\n    t5 += v * b5;\n    t6 += v * b6;\n    t7 += v * b7;\n    t8 += v * b8;\n    t9 += v * b9;\n    t10 += v * b10;\n    t11 += v * b11;\n    t12 += v * b12;\n    t13 += v * b13;\n    t14 += v * b14;\n    t15 += v * b15;\n    v = a[1];\n    t1 += v * b0;\n    t2 += v * b1;\n    t3 += v * b2;\n    t4 += v * b3;\n    t5 += v * b4;\n    t6 += v * b5;\n    t7 += v * b6;\n    t8 += v * b7;\n    t9 += v * b8;\n    t10 += v * b9;\n    t11 += v * b10;\n    t12 += v * b11;\n    t13 += v * b12;\n    t14 += v * b13;\n    t15 += v * b14;\n    t16 += v * b15;\n    v = a[2];\n    t2 += v * b0;\n    t3 += v * b1;\n    t4 += v * b2;\n    t5 += v * b3;\n    t6 += v * b4;\n    t7 += v * b5;\n    t8 += v * b6;\n    t9 += v * b7;\n    t10 += v * b8;\n    t11 += v * b9;\n    t12 += v * b10;\n    t13 += v * b11;\n    t14 += v * b12;\n    t15 += v * b13;\n    t16 += v * b14;\n    t17 += v * b15;\n    v = a[3];\n    t3 += v * b0;\n    t4 += v * b1;\n    t5 += v * b2;\n    t6 += v * b3;\n    t7 += v * b4;\n    t8 += v * b5;\n    t9 += v * b6;\n    t10 += v * b7;\n    t11 += v * b8;\n    t12 += v * b9;\n    t13 += v * b10;\n    t14 += v * b11;\n    t15 += v * b12;\n    t16 += v * b13;\n    t17 += v * b14;\n    t18 += v * b15;\n    v = a[4];\n    t4 += v * b0;\n    t5 += v * b1;\n    t6 += v * b2;\n    t7 += v * b3;\n    t8 += v * b4;\n    t9 += v * b5;\n    t10 += v * b6;\n    t11 += v * b7;\n    t12 += v * b8;\n    t13 += v * b9;\n    t14 += v * b10;\n    t15 += v * b11;\n    t16 += v * b12;\n    t17 += v * b13;\n    t18 += v * b14;\n    t19 += v * b15;\n    v = a[5];\n    t5 += v * b0;\n    t6 += v * b1;\n    t7 += v * b2;\n    t8 += v * b3;\n    t9 += v * b4;\n    t10 += v * b5;\n    t11 += v * b6;\n    t12 += v * b7;\n    t13 += v * b8;\n    t14 += v * b9;\n    t15 += v * b10;\n    t16 += v * b11;\n    t17 += v * b12;\n    t18 += v * b13;\n    t19 += v * b14;\n    t20 += v * b15;\n    v = a[6];\n    t6 += v * b0;\n    t7 += v * b1;\n    t8 += v * b2;\n    t9 += v * b3;\n    t10 += v * b4;\n    t11 += v * b5;\n    t12 += v * b6;\n    t13 += v * b7;\n    t14 += v * b8;\n    t15 += v * b9;\n    t16 += v * b10;\n    t17 += v * b11;\n    t18 += v * b12;\n    t19 += v * b13;\n    t20 += v * b14;\n    t21 += v * b15;\n    v = a[7];\n    t7 += v * b0;\n    t8 += v * b1;\n    t9 += v * b2;\n    t10 += v * b3;\n    t11 += v * b4;\n    t12 += v * b5;\n    t13 += v * b6;\n    t14 += v * b7;\n    t15 += v * b8;\n    t16 += v * b9;\n    t17 += v * b10;\n    t18 += v * b11;\n    t19 += v * b12;\n    t20 += v * b13;\n    t21 += v * b14;\n    t22 += v * b15;\n    v = a[8];\n    t8 += v * b0;\n    t9 += v * b1;\n    t10 += v * b2;\n    t11 += v * b3;\n    t12 += v * b4;\n    t13 += v * b5;\n    t14 += v * b6;\n    t15 += v * b7;\n    t16 += v * b8;\n    t17 += v * b9;\n    t18 += v * b10;\n    t19 += v * b11;\n    t20 += v * b12;\n    t21 += v * b13;\n    t22 += v * b14;\n    t23 += v * b15;\n    v = a[9];\n    t9 += v * b0;\n    t10 += v * b1;\n    t11 += v * b2;\n    t12 += v * b3;\n    t13 += v * b4;\n    t14 += v * b5;\n    t15 += v * b6;\n    t16 += v * b7;\n    t17 += v * b8;\n    t18 += v * b9;\n    t19 += v * b10;\n    t20 += v * b11;\n    t21 += v * b12;\n    t22 += v * b13;\n    t23 += v * b14;\n    t24 += v * b15;\n    v = a[10];\n    t10 += v * b0;\n    t11 += v * b1;\n    t12 += v * b2;\n    t13 += v * b3;\n    t14 += v * b4;\n    t15 += v * b5;\n    t16 += v * b6;\n    t17 += v * b7;\n    t18 += v * b8;\n    t19 += v * b9;\n    t20 += v * b10;\n    t21 += v * b11;\n    t22 += v * b12;\n    t23 += v * b13;\n    t24 += v * b14;\n    t25 += v * b15;\n    v = a[11];\n    t11 += v * b0;\n    t12 += v * b1;\n    t13 += v * b2;\n    t14 += v * b3;\n    t15 += v * b4;\n    t16 += v * b5;\n    t17 += v * b6;\n    t18 += v * b7;\n    t19 += v * b8;\n    t20 += v * b9;\n    t21 += v * b10;\n    t22 += v * b11;\n    t23 += v * b12;\n    t24 += v * b13;\n    t25 += v * b14;\n    t26 += v * b15;\n    v = a[12];\n    t12 += v * b0;\n    t13 += v * b1;\n    t14 += v * b2;\n    t15 += v * b3;\n    t16 += v * b4;\n    t17 += v * b5;\n    t18 += v * b6;\n    t19 += v * b7;\n    t20 += v * b8;\n    t21 += v * b9;\n    t22 += v * b10;\n    t23 += v * b11;\n    t24 += v * b12;\n    t25 += v * b13;\n    t26 += v * b14;\n    t27 += v * b15;\n    v = a[13];\n    t13 += v * b0;\n    t14 += v * b1;\n    t15 += v * b2;\n    t16 += v * b3;\n    t17 += v * b4;\n    t18 += v * b5;\n    t19 += v * b6;\n    t20 += v * b7;\n    t21 += v * b8;\n    t22 += v * b9;\n    t23 += v * b10;\n    t24 += v * b11;\n    t25 += v * b12;\n    t26 += v * b13;\n    t27 += v * b14;\n    t28 += v * b15;\n    v = a[14];\n    t14 += v * b0;\n    t15 += v * b1;\n    t16 += v * b2;\n    t17 += v * b3;\n    t18 += v * b4;\n    t19 += v * b5;\n    t20 += v * b6;\n    t21 += v * b7;\n    t22 += v * b8;\n    t23 += v * b9;\n    t24 += v * b10;\n    t25 += v * b11;\n    t26 += v * b12;\n    t27 += v * b13;\n    t28 += v * b14;\n    t29 += v * b15;\n    v = a[15];\n    t15 += v * b0;\n    t16 += v * b1;\n    t17 += v * b2;\n    t18 += v * b3;\n    t19 += v * b4;\n    t20 += v * b5;\n    t21 += v * b6;\n    t22 += v * b7;\n    t23 += v * b8;\n    t24 += v * b9;\n    t25 += v * b10;\n    t26 += v * b11;\n    t27 += v * b12;\n    t28 += v * b13;\n    t29 += v * b14;\n    t30 += v * b15;\n    t0 += 38 * t16;\n    t1 += 38 * t17;\n    t2 += 38 * t18;\n    t3 += 38 * t19;\n    t4 += 38 * t20;\n    t5 += 38 * t21;\n    t6 += 38 * t22;\n    t7 += 38 * t23;\n    t8 += 38 * t24;\n    t9 += 38 * t25;\n    t10 += 38 * t26;\n    t11 += 38 * t27;\n    t12 += 38 * t28;\n    t13 += 38 * t29;\n    t14 += 38 * t30;\n    // t15 left as is\n    // first car\n    c = 1;\n    v = t0 + c + 65535;\n    c = Math.floor(v / 65536);\n    t0 = v - c * 65536;\n    v = t1 + c + 65535;\n    c = Math.floor(v / 65536);\n    t1 = v - c * 65536;\n    v = t2 + c + 65535;\n    c = Math.floor(v / 65536);\n    t2 = v - c * 65536;\n    v = t3 + c + 65535;\n    c = Math.floor(v / 65536);\n    t3 = v - c * 65536;\n    v = t4 + c + 65535;\n    c = Math.floor(v / 65536);\n    t4 = v - c * 65536;\n    v = t5 + c + 65535;\n    c = Math.floor(v / 65536);\n    t5 = v - c * 65536;\n    v = t6 + c + 65535;\n    c = Math.floor(v / 65536);\n    t6 = v - c * 65536;\n    v = t7 + c + 65535;\n    c = Math.floor(v / 65536);\n    t7 = v - c * 65536;\n    v = t8 + c + 65535;\n    c = Math.floor(v / 65536);\n    t8 = v - c * 65536;\n    v = t9 + c + 65535;\n    c = Math.floor(v / 65536);\n    t9 = v - c * 65536;\n    v = t10 + c + 65535;\n    c = Math.floor(v / 65536);\n    t10 = v - c * 65536;\n    v = t11 + c + 65535;\n    c = Math.floor(v / 65536);\n    t11 = v - c * 65536;\n    v = t12 + c + 65535;\n    c = Math.floor(v / 65536);\n    t12 = v - c * 65536;\n    v = t13 + c + 65535;\n    c = Math.floor(v / 65536);\n    t13 = v - c * 65536;\n    v = t14 + c + 65535;\n    c = Math.floor(v / 65536);\n    t14 = v - c * 65536;\n    v = t15 + c + 65535;\n    c = Math.floor(v / 65536);\n    t15 = v - c * 65536;\n    t0 += c - 1 + 37 * (c - 1);\n    // second car\n    c = 1;\n    v = t0 + c + 65535;\n    c = Math.floor(v / 65536);\n    t0 = v - c * 65536;\n    v = t1 + c + 65535;\n    c = Math.floor(v / 65536);\n    t1 = v - c * 65536;\n    v = t2 + c + 65535;\n    c = Math.floor(v / 65536);\n    t2 = v - c * 65536;\n    v = t3 + c + 65535;\n    c = Math.floor(v / 65536);\n    t3 = v - c * 65536;\n    v = t4 + c + 65535;\n    c = Math.floor(v / 65536);\n    t4 = v - c * 65536;\n    v = t5 + c + 65535;\n    c = Math.floor(v / 65536);\n    t5 = v - c * 65536;\n    v = t6 + c + 65535;\n    c = Math.floor(v / 65536);\n    t6 = v - c * 65536;\n    v = t7 + c + 65535;\n    c = Math.floor(v / 65536);\n    t7 = v - c * 65536;\n    v = t8 + c + 65535;\n    c = Math.floor(v / 65536);\n    t8 = v - c * 65536;\n    v = t9 + c + 65535;\n    c = Math.floor(v / 65536);\n    t9 = v - c * 65536;\n    v = t10 + c + 65535;\n    c = Math.floor(v / 65536);\n    t10 = v - c * 65536;\n    v = t11 + c + 65535;\n    c = Math.floor(v / 65536);\n    t11 = v - c * 65536;\n    v = t12 + c + 65535;\n    c = Math.floor(v / 65536);\n    t12 = v - c * 65536;\n    v = t13 + c + 65535;\n    c = Math.floor(v / 65536);\n    t13 = v - c * 65536;\n    v = t14 + c + 65535;\n    c = Math.floor(v / 65536);\n    t14 = v - c * 65536;\n    v = t15 + c + 65535;\n    c = Math.floor(v / 65536);\n    t15 = v - c * 65536;\n    t0 += c - 1 + 37 * (c - 1);\n    o[0] = t0;\n    o[1] = t1;\n    o[2] = t2;\n    o[3] = t3;\n    o[4] = t4;\n    o[5] = t5;\n    o[6] = t6;\n    o[7] = t7;\n    o[8] = t8;\n    o[9] = t9;\n    o[10] = t10;\n    o[11] = t11;\n    o[12] = t12;\n    o[13] = t13;\n    o[14] = t14;\n    o[15] = t15;\n}\nfunction square(o, a) {\n    mul(o, a, a);\n}\nfunction inv25519(o, inp) {\n    const c = gf();\n    for(let i = 0; i < 16; i++){\n        c[i] = inp[i];\n    }\n    for(let i = 253; i >= 0; i--){\n        square(c, c);\n        if (i !== 2 && i !== 4) {\n            mul(c, c, inp);\n        }\n    }\n    for(let i = 0; i < 16; i++){\n        o[i] = c[i];\n    }\n}\nfunction scalarMult(n, p) {\n    const z = new Uint8Array(32);\n    const x = new Float64Array(80);\n    const a = gf(), b = gf(), c = gf(), d = gf(), e = gf(), f = gf();\n    for(let i = 0; i < 31; i++){\n        z[i] = n[i];\n    }\n    z[31] = n[31] & 127 | 64;\n    z[0] &= 248;\n    unpack25519(x, p);\n    for(let i = 0; i < 16; i++){\n        b[i] = x[i];\n    }\n    a[0] = d[0] = 1;\n    for(let i = 254; i >= 0; --i){\n        const r = z[i >>> 3] >>> (i & 7) & 1;\n        sel25519(a, b, r);\n        sel25519(c, d, r);\n        add(e, a, c);\n        sub(a, a, c);\n        add(c, b, d);\n        sub(b, b, d);\n        square(d, e);\n        square(f, a);\n        mul(a, c, a);\n        mul(c, b, e);\n        add(e, a, c);\n        sub(a, a, c);\n        square(b, a);\n        sub(c, d, f);\n        mul(a, c, _121665);\n        add(a, a, d);\n        mul(c, c, a);\n        mul(a, d, f);\n        mul(d, b, x);\n        square(b, e);\n        sel25519(a, b, r);\n        sel25519(c, d, r);\n    }\n    for(let i = 0; i < 16; i++){\n        x[i + 16] = a[i];\n        x[i + 32] = c[i];\n        x[i + 48] = b[i];\n        x[i + 64] = d[i];\n    }\n    const x32 = x.subarray(32);\n    const x16 = x.subarray(16);\n    inv25519(x32, x32);\n    mul(x16, x16, x32);\n    const q = new Uint8Array(32);\n    pack25519(q, x16);\n    return q;\n}\nexports.scalarMult = scalarMult;\nfunction scalarMultBase(n) {\n    return scalarMult(n, _9);\n}\nexports.scalarMultBase = scalarMultBase;\nfunction generateKeyPairFromSeed(seed) {\n    if (seed.length !== exports.SECRET_KEY_LENGTH) {\n        throw new Error(`x25519: seed must be ${exports.SECRET_KEY_LENGTH} bytes`);\n    }\n    const secretKey = new Uint8Array(seed);\n    const publicKey = scalarMultBase(secretKey);\n    return {\n        publicKey,\n        secretKey\n    };\n}\nexports.generateKeyPairFromSeed = generateKeyPairFromSeed;\nfunction generateKeyPair(prng) {\n    const seed = (0, random_1.randomBytes)(32, prng);\n    const result = generateKeyPairFromSeed(seed);\n    (0, wipe_1.wipe)(seed);\n    return result;\n}\nexports.generateKeyPair = generateKeyPair;\n/**\n * Returns a shared key between our secret key and a peer's public key.\n *\n * Throws an error if the given keys are of wrong length.\n *\n * If rejectZero is true throws if the calculated shared key is all-zero.\n * From RFC 7748:\n *\n * > Protocol designers using Diffie-Hellman over the curves defined in\n * > this document must not assume \"contributory behavior\".  Specially,\n * > contributory behavior means that both parties' private keys\n * > contribute to the resulting shared key.  Since curve25519 and\n * > curve448 have cofactors of 8 and 4 (respectively), an input point of\n * > small order will eliminate any contribution from the other party's\n * > private key.  This situation can be detected by checking for the all-\n * > zero output, which implementations MAY do, as specified in Section 6.\n * > However, a large number of existing implementations do not do this.\n *\n * IMPORTANT: the returned key is a raw result of scalar multiplication.\n * To use it as a key material, hash it with a cryptographic hash function.\n */ function sharedKey(mySecretKey, theirPublicKey, rejectZero = false) {\n    if (mySecretKey.length !== exports.PUBLIC_KEY_LENGTH) {\n        throw new Error(\"X25519: incorrect secret key length\");\n    }\n    if (theirPublicKey.length !== exports.PUBLIC_KEY_LENGTH) {\n        throw new Error(\"X25519: incorrect public key length\");\n    }\n    const result = scalarMult(mySecretKey, theirPublicKey);\n    if (rejectZero) {\n        let zeros = 0;\n        for(let i = 0; i < result.length; i++){\n            zeros |= result[i];\n        }\n        if (zeros === 0) {\n            throw new Error(\"X25519: invalid shared key\");\n        }\n    }\n    return result;\n}\nexports.sharedKey = sharedKey; //# sourceMappingURL=x25519.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@stablelib/x25519/lib/x25519.js\n");

/***/ })

};
;