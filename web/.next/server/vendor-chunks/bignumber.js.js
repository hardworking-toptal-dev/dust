"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/bignumber.js";
exports.ids = ["vendor-chunks/bignumber.js"];
exports.modules = {

/***/ "(ssr)/../node_modules/bignumber.js/bignumber.mjs":
/*!**************************************************!*\
  !*** ../node_modules/bignumber.js/bignumber.mjs ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BigNumber: () => (/* binding */ BigNumber),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/*\r\n *      bignumber.js v9.1.2\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */ var isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i, mathceil = Math.ceil, mathfloor = Math.floor, bignumberError = \"[BigNumber Error] \", tooManyDigits = bignumberError + \"Number primitive has more than 15 significant digits: \", BASE = 1e14, LOG_BASE = 14, MAX_SAFE_INTEGER = 0x1fffffffffffff, // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\nPOWS_TEN = [\n    1,\n    10,\n    100,\n    1e3,\n    1e4,\n    1e5,\n    1e6,\n    1e7,\n    1e8,\n    1e9,\n    1e10,\n    1e11,\n    1e12,\n    1e13\n], SQRT_BASE = 1e7, // EDITABLE\n// The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\n// the arguments to toExponential, toFixed, toFormat, and toPrecision.\nMAX = 1E9; // 0 to MAX_INT32\n/*\r\n * Create and return a BigNumber constructor.\r\n */ function clone(configObject) {\n    var div, convertBase, parseNumeric, P = BigNumber.prototype = {\n        constructor: BigNumber,\n        toString: null,\n        valueOf: null\n    }, ONE = new BigNumber(1), //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\n    // The default values below must be integers within the inclusive ranges stated.\n    // The values can also be changed at run-time using BigNumber.set.\n    // The maximum number of decimal places for operations involving division.\n    DECIMAL_PLACES = 20, // The rounding mode used when rounding to the above decimal places, and when using\n    // toExponential, toFixed, toFormat and toPrecision, and round (default value).\n    // UP         0 Away from zero.\n    // DOWN       1 Towards zero.\n    // CEIL       2 Towards +Infinity.\n    // FLOOR      3 Towards -Infinity.\n    // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\n    // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\n    // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\n    // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\n    // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\n    ROUNDING_MODE = 4, // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\n    // The exponent value at and beneath which toString returns exponential notation.\n    // Number type: -7\n    TO_EXP_NEG = -7, // The exponent value at and above which toString returns exponential notation.\n    // Number type: 21\n    TO_EXP_POS = 21, // RANGE : [MIN_EXP, MAX_EXP]\n    // The minimum exponent value, beneath which underflow to zero occurs.\n    // Number type: -324  (5e-324)\n    MIN_EXP = -1e7, // The maximum exponent value, above which overflow to Infinity occurs.\n    // Number type:  308  (1.7976931348623157e+308)\n    // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\n    MAX_EXP = 1e7, // Whether to use cryptographically-secure random number generation, if available.\n    CRYPTO = false, // The modulo mode used when calculating the modulus: a mod n.\n    // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\n    // The remainder (r) is calculated as: r = a - n * q.\n    //\n    // UP        0 The remainder is positive if the dividend is negative, else is negative.\n    // DOWN      1 The remainder has the same sign as the dividend.\n    //             This modulo mode is commonly known as 'truncated division' and is\n    //             equivalent to (a % n) in JavaScript.\n    // FLOOR     3 The remainder has the same sign as the divisor (Python %).\n    // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\n    // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\n    //             The remainder is always positive.\n    //\n    // The truncated division, floored division, Euclidian division and IEEE 754 remainder\n    // modes are commonly used for the modulus operation.\n    // Although the other rounding modes can also be used, they may not give useful results.\n    MODULO_MODE = 1, // The maximum number of significant digits of the result of the exponentiatedBy operation.\n    // If POW_PRECISION is 0, there will be unlimited significant digits.\n    POW_PRECISION = 0, // The format specification used by the BigNumber.prototype.toFormat method.\n    FORMAT = {\n        prefix: \"\",\n        groupSize: 3,\n        secondaryGroupSize: 0,\n        groupSeparator: \",\",\n        decimalSeparator: \".\",\n        fractionGroupSize: 0,\n        fractionGroupSeparator: \"\\xa0\",\n        suffix: \"\"\n    }, // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\n    // '-', '.', whitespace, or repeated character.\n    // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\n    ALPHABET = \"0123456789abcdefghijklmnopqrstuvwxyz\", alphabetHasNormalDecimalDigits = true;\n    //------------------------------------------------------------------------------------------\n    // CONSTRUCTOR\n    /*\r\n   * The BigNumber constructor and exported function.\r\n   * Create and return a new instance of a BigNumber object.\r\n   *\r\n   * v {number|string|BigNumber} A numeric value.\r\n   * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n   */ function BigNumber(v, b) {\n        var alphabet, c, caseChanged, e, i, isNum, len, str, x = this;\n        // Enable constructor call without `new`.\n        if (!(x instanceof BigNumber)) return new BigNumber(v, b);\n        if (b == null) {\n            if (v && v._isBigNumber === true) {\n                x.s = v.s;\n                if (!v.c || v.e > MAX_EXP) {\n                    x.c = x.e = null;\n                } else if (v.e < MIN_EXP) {\n                    x.c = [\n                        x.e = 0\n                    ];\n                } else {\n                    x.e = v.e;\n                    x.c = v.c.slice();\n                }\n                return;\n            }\n            if ((isNum = typeof v == \"number\") && v * 0 == 0) {\n                // Use `1 / n` to handle minus zero also.\n                x.s = 1 / v < 0 ? (v = -v, -1) : 1;\n                // Fast path for integers, where n < 2147483648 (2**31).\n                if (v === ~~v) {\n                    for(e = 0, i = v; i >= 10; i /= 10, e++);\n                    if (e > MAX_EXP) {\n                        x.c = x.e = null;\n                    } else {\n                        x.e = e;\n                        x.c = [\n                            v\n                        ];\n                    }\n                    return;\n                }\n                str = String(v);\n            } else {\n                if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\n                x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\n            }\n            // Decimal point?\n            if ((e = str.indexOf(\".\")) > -1) str = str.replace(\".\", \"\");\n            // Exponential form?\n            if ((i = str.search(/e/i)) > 0) {\n                // Determine exponent.\n                if (e < 0) e = i;\n                e += +str.slice(i + 1);\n                str = str.substring(0, i);\n            } else if (e < 0) {\n                // Integer.\n                e = str.length;\n            }\n        } else {\n            // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\n            intCheck(b, 2, ALPHABET.length, \"Base\");\n            // Allow exponential notation to be used with base 10 argument, while\n            // also rounding to DECIMAL_PLACES as with other bases.\n            if (b == 10 && alphabetHasNormalDecimalDigits) {\n                x = new BigNumber(v);\n                return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\n            }\n            str = String(v);\n            if (isNum = typeof v == \"number\") {\n                // Avoid potential interpretation of Infinity and NaN as base 44+ values.\n                if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\n                x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\n                // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\n                if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, \"\").length > 15) {\n                    throw Error(tooManyDigits + v);\n                }\n            } else {\n                x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\n            }\n            alphabet = ALPHABET.slice(0, b);\n            e = i = 0;\n            // Check that str is a valid base b number.\n            // Don't use RegExp, so alphabet can contain special characters.\n            for(len = str.length; i < len; i++){\n                if (alphabet.indexOf(c = str.charAt(i)) < 0) {\n                    if (c == \".\") {\n                        // If '.' is not the first character and it has not be found before.\n                        if (i > e) {\n                            e = len;\n                            continue;\n                        }\n                    } else if (!caseChanged) {\n                        // Allow e.g. hexadecimal 'FF' as well as 'ff'.\n                        if (str == str.toUpperCase() && (str = str.toLowerCase()) || str == str.toLowerCase() && (str = str.toUpperCase())) {\n                            caseChanged = true;\n                            i = -1;\n                            e = 0;\n                            continue;\n                        }\n                    }\n                    return parseNumeric(x, String(v), isNum, b);\n                }\n            }\n            // Prevent later check for length on converted number.\n            isNum = false;\n            str = convertBase(str, b, 10, x.s);\n            // Decimal point?\n            if ((e = str.indexOf(\".\")) > -1) str = str.replace(\".\", \"\");\n            else e = str.length;\n        }\n        // Determine leading zeros.\n        for(i = 0; str.charCodeAt(i) === 48; i++);\n        // Determine trailing zeros.\n        for(len = str.length; str.charCodeAt(--len) === 48;);\n        if (str = str.slice(i, ++len)) {\n            len -= i;\n            // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\n            if (isNum && BigNumber.DEBUG && len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\n                throw Error(tooManyDigits + x.s * v);\n            }\n            // Overflow?\n            if ((e = e - i - 1) > MAX_EXP) {\n                // Infinity.\n                x.c = x.e = null;\n            // Underflow?\n            } else if (e < MIN_EXP) {\n                // Zero.\n                x.c = [\n                    x.e = 0\n                ];\n            } else {\n                x.e = e;\n                x.c = [];\n                // Transform base\n                // e is the base 10 exponent.\n                // i is where to slice str to get the first element of the coefficient array.\n                i = (e + 1) % LOG_BASE;\n                if (e < 0) i += LOG_BASE; // i < 1\n                if (i < len) {\n                    if (i) x.c.push(+str.slice(0, i));\n                    for(len -= LOG_BASE; i < len;){\n                        x.c.push(+str.slice(i, i += LOG_BASE));\n                    }\n                    i = LOG_BASE - (str = str.slice(i)).length;\n                } else {\n                    i -= len;\n                }\n                for(; i--; str += \"0\");\n                x.c.push(+str);\n            }\n        } else {\n            // Zero.\n            x.c = [\n                x.e = 0\n            ];\n        }\n    }\n    // CONSTRUCTOR PROPERTIES\n    BigNumber.clone = clone;\n    BigNumber.ROUND_UP = 0;\n    BigNumber.ROUND_DOWN = 1;\n    BigNumber.ROUND_CEIL = 2;\n    BigNumber.ROUND_FLOOR = 3;\n    BigNumber.ROUND_HALF_UP = 4;\n    BigNumber.ROUND_HALF_DOWN = 5;\n    BigNumber.ROUND_HALF_EVEN = 6;\n    BigNumber.ROUND_HALF_CEIL = 7;\n    BigNumber.ROUND_HALF_FLOOR = 8;\n    BigNumber.EUCLID = 9;\n    /*\r\n   * Configure infrequently-changing library-wide settings.\r\n   *\r\n   * Accept an object with the following optional properties (if the value of a property is\r\n   * a number, it must be an integer within the inclusive range stated):\r\n   *\r\n   *   DECIMAL_PLACES   {number}           0 to MAX\r\n   *   ROUNDING_MODE    {number}           0 to 8\r\n   *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n   *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n   *   CRYPTO           {boolean}          true or false\r\n   *   MODULO_MODE      {number}           0 to 9\r\n   *   POW_PRECISION       {number}           0 to MAX\r\n   *   ALPHABET         {string}           A string of two or more unique characters which does\r\n   *                                       not contain '.'.\r\n   *   FORMAT           {object}           An object with some of the following properties:\r\n   *     prefix                 {string}\r\n   *     groupSize              {number}\r\n   *     secondaryGroupSize     {number}\r\n   *     groupSeparator         {string}\r\n   *     decimalSeparator       {string}\r\n   *     fractionGroupSize      {number}\r\n   *     fractionGroupSeparator {string}\r\n   *     suffix                 {string}\r\n   *\r\n   * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n   *\r\n   * E.g.\r\n   * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n   *\r\n   * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n   *\r\n   * Return an object with the properties current values.\r\n   */ BigNumber.config = BigNumber.set = function(obj) {\n        var p, v;\n        if (obj != null) {\n            if (typeof obj == \"object\") {\n                // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\n                // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\n                if (obj.hasOwnProperty(p = \"DECIMAL_PLACES\")) {\n                    v = obj[p];\n                    intCheck(v, 0, MAX, p);\n                    DECIMAL_PLACES = v;\n                }\n                // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\n                // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\n                if (obj.hasOwnProperty(p = \"ROUNDING_MODE\")) {\n                    v = obj[p];\n                    intCheck(v, 0, 8, p);\n                    ROUNDING_MODE = v;\n                }\n                // EXPONENTIAL_AT {number|number[]}\n                // Integer, -MAX to MAX inclusive or\n                // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\n                // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\n                if (obj.hasOwnProperty(p = \"EXPONENTIAL_AT\")) {\n                    v = obj[p];\n                    if (v && v.pop) {\n                        intCheck(v[0], -MAX, 0, p);\n                        intCheck(v[1], 0, MAX, p);\n                        TO_EXP_NEG = v[0];\n                        TO_EXP_POS = v[1];\n                    } else {\n                        intCheck(v, -MAX, MAX, p);\n                        TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\n                    }\n                }\n                // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\n                // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\n                // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\n                if (obj.hasOwnProperty(p = \"RANGE\")) {\n                    v = obj[p];\n                    if (v && v.pop) {\n                        intCheck(v[0], -MAX, -1, p);\n                        intCheck(v[1], 1, MAX, p);\n                        MIN_EXP = v[0];\n                        MAX_EXP = v[1];\n                    } else {\n                        intCheck(v, -MAX, MAX, p);\n                        if (v) {\n                            MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\n                        } else {\n                            throw Error(bignumberError + p + \" cannot be zero: \" + v);\n                        }\n                    }\n                }\n                // CRYPTO {boolean} true or false.\n                // '[BigNumber Error] CRYPTO not true or false: {v}'\n                // '[BigNumber Error] crypto unavailable'\n                if (obj.hasOwnProperty(p = \"CRYPTO\")) {\n                    v = obj[p];\n                    if (v === !!v) {\n                        if (v) {\n                            if (typeof crypto != \"undefined\" && crypto && (crypto.getRandomValues || crypto.randomBytes)) {\n                                CRYPTO = v;\n                            } else {\n                                CRYPTO = !v;\n                                throw Error(bignumberError + \"crypto unavailable\");\n                            }\n                        } else {\n                            CRYPTO = v;\n                        }\n                    } else {\n                        throw Error(bignumberError + p + \" not true or false: \" + v);\n                    }\n                }\n                // MODULO_MODE {number} Integer, 0 to 9 inclusive.\n                // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\n                if (obj.hasOwnProperty(p = \"MODULO_MODE\")) {\n                    v = obj[p];\n                    intCheck(v, 0, 9, p);\n                    MODULO_MODE = v;\n                }\n                // POW_PRECISION {number} Integer, 0 to MAX inclusive.\n                // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\n                if (obj.hasOwnProperty(p = \"POW_PRECISION\")) {\n                    v = obj[p];\n                    intCheck(v, 0, MAX, p);\n                    POW_PRECISION = v;\n                }\n                // FORMAT {object}\n                // '[BigNumber Error] FORMAT not an object: {v}'\n                if (obj.hasOwnProperty(p = \"FORMAT\")) {\n                    v = obj[p];\n                    if (typeof v == \"object\") FORMAT = v;\n                    else throw Error(bignumberError + p + \" not an object: \" + v);\n                }\n                // ALPHABET {string}\n                // '[BigNumber Error] ALPHABET invalid: {v}'\n                if (obj.hasOwnProperty(p = \"ALPHABET\")) {\n                    v = obj[p];\n                    // Disallow if less than two characters,\n                    // or if it contains '+', '-', '.', whitespace, or a repeated character.\n                    if (typeof v == \"string\" && !/^.?$|[+\\-.\\s]|(.).*\\1/.test(v)) {\n                        alphabetHasNormalDecimalDigits = v.slice(0, 10) == \"0123456789\";\n                        ALPHABET = v;\n                    } else {\n                        throw Error(bignumberError + p + \" invalid: \" + v);\n                    }\n                }\n            } else {\n                // '[BigNumber Error] Object expected: {v}'\n                throw Error(bignumberError + \"Object expected: \" + obj);\n            }\n        }\n        return {\n            DECIMAL_PLACES: DECIMAL_PLACES,\n            ROUNDING_MODE: ROUNDING_MODE,\n            EXPONENTIAL_AT: [\n                TO_EXP_NEG,\n                TO_EXP_POS\n            ],\n            RANGE: [\n                MIN_EXP,\n                MAX_EXP\n            ],\n            CRYPTO: CRYPTO,\n            MODULO_MODE: MODULO_MODE,\n            POW_PRECISION: POW_PRECISION,\n            FORMAT: FORMAT,\n            ALPHABET: ALPHABET\n        };\n    };\n    /*\r\n   * Return true if v is a BigNumber instance, otherwise return false.\r\n   *\r\n   * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n   *\r\n   * v {any}\r\n   *\r\n   * '[BigNumber Error] Invalid BigNumber: {v}'\r\n   */ BigNumber.isBigNumber = function(v) {\n        if (!v || v._isBigNumber !== true) return false;\n        if (!BigNumber.DEBUG) return true;\n        var i, n, c = v.c, e = v.e, s = v.s;\n        out: if (({}).toString.call(c) == \"[object Array]\") {\n            if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\n                // If the first element is zero, the BigNumber value must be zero.\n                if (c[0] === 0) {\n                    if (e === 0 && c.length === 1) return true;\n                    break out;\n                }\n                // Calculate number of digits that c[0] should have, based on the exponent.\n                i = (e + 1) % LOG_BASE;\n                if (i < 1) i += LOG_BASE;\n                // Calculate number of digits of c[0].\n                //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\n                if (String(c[0]).length == i) {\n                    for(i = 0; i < c.length; i++){\n                        n = c[i];\n                        if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\n                    }\n                    // Last element cannot be zero, unless it is the only element.\n                    if (n !== 0) return true;\n                }\n            }\n        // Infinity/NaN\n        } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\n            return true;\n        }\n        throw Error(bignumberError + \"Invalid BigNumber: \" + v);\n    };\n    /*\r\n   * Return a new BigNumber whose value is the maximum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */ BigNumber.maximum = BigNumber.max = function() {\n        return maxOrMin(arguments, -1);\n    };\n    /*\r\n   * Return a new BigNumber whose value is the minimum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */ BigNumber.minimum = BigNumber.min = function() {\n        return maxOrMin(arguments, 1);\n    };\n    /*\r\n   * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n   * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n   * zeros are produced).\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n   * '[BigNumber Error] crypto unavailable'\r\n   */ BigNumber.random = function() {\n        var pow2_53 = 0x20000000000000;\n        // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\n        // Check if Math.random() produces more than 32 bits of randomness.\n        // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\n        // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\n        var random53bitInt = Math.random() * pow2_53 & 0x1fffff ? function() {\n            return mathfloor(Math.random() * pow2_53);\n        } : function() {\n            return (Math.random() * 0x40000000 | 0) * 0x800000 + (Math.random() * 0x800000 | 0);\n        };\n        return function(dp) {\n            var a, b, e, k, v, i = 0, c = [], rand = new BigNumber(ONE);\n            if (dp == null) dp = DECIMAL_PLACES;\n            else intCheck(dp, 0, MAX);\n            k = mathceil(dp / LOG_BASE);\n            if (CRYPTO) {\n                // Browsers supporting crypto.getRandomValues.\n                if (crypto.getRandomValues) {\n                    a = crypto.getRandomValues(new Uint32Array(k *= 2));\n                    for(; i < k;){\n                        // 53 bits:\n                        // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\n                        // 11111 11111111 11111111 11111111 11100000 00000000 00000000\n                        // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\n                        //                                     11111 11111111 11111111\n                        // 0x20000 is 2^21.\n                        v = a[i] * 0x20000 + (a[i + 1] >>> 11);\n                        // Rejection sampling:\n                        // 0 <= v < 9007199254740992\n                        // Probability that v >= 9e15, is\n                        // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\n                        if (v >= 9e15) {\n                            b = crypto.getRandomValues(new Uint32Array(2));\n                            a[i] = b[0];\n                            a[i + 1] = b[1];\n                        } else {\n                            // 0 <= v <= 8999999999999999\n                            // 0 <= (v % 1e14) <= 99999999999999\n                            c.push(v % 1e14);\n                            i += 2;\n                        }\n                    }\n                    i = k / 2;\n                // Node.js supporting crypto.randomBytes.\n                } else if (crypto.randomBytes) {\n                    // buffer\n                    a = crypto.randomBytes(k *= 7);\n                    for(; i < k;){\n                        // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\n                        // 0x100000000 is 2^32, 0x1000000 is 2^24\n                        // 11111 11111111 11111111 11111111 11111111 11111111 11111111\n                        // 0 <= v < 9007199254740992\n                        v = (a[i] & 31) * 0x1000000000000 + a[i + 1] * 0x10000000000 + a[i + 2] * 0x100000000 + a[i + 3] * 0x1000000 + (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\n                        if (v >= 9e15) {\n                            crypto.randomBytes(7).copy(a, i);\n                        } else {\n                            // 0 <= (v % 1e14) <= 99999999999999\n                            c.push(v % 1e14);\n                            i += 7;\n                        }\n                    }\n                    i = k / 7;\n                } else {\n                    CRYPTO = false;\n                    throw Error(bignumberError + \"crypto unavailable\");\n                }\n            }\n            // Use Math.random.\n            if (!CRYPTO) {\n                for(; i < k;){\n                    v = random53bitInt();\n                    if (v < 9e15) c[i++] = v % 1e14;\n                }\n            }\n            k = c[--i];\n            dp %= LOG_BASE;\n            // Convert trailing digits to zeros according to dp.\n            if (k && dp) {\n                v = POWS_TEN[LOG_BASE - dp];\n                c[i] = mathfloor(k / v) * v;\n            }\n            // Remove trailing elements which are zero.\n            for(; c[i] === 0; c.pop(), i--);\n            // Zero?\n            if (i < 0) {\n                c = [\n                    e = 0\n                ];\n            } else {\n                // Remove leading elements which are zero and adjust exponent accordingly.\n                for(e = -1; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\n                // Count the digits of the first element of c to determine leading zeros, and...\n                for(i = 1, v = c[0]; v >= 10; v /= 10, i++);\n                // adjust the exponent accordingly.\n                if (i < LOG_BASE) e -= LOG_BASE - i;\n            }\n            rand.e = e;\n            rand.c = c;\n            return rand;\n        };\n    }();\n    /*\r\n   * Return a BigNumber whose value is the sum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */ BigNumber.sum = function() {\n        var i = 1, args = arguments, sum = new BigNumber(args[0]);\n        for(; i < args.length;)sum = sum.plus(args[i++]);\n        return sum;\n    };\n    // PRIVATE FUNCTIONS\n    // Called by BigNumber and BigNumber.prototype.toString.\n    convertBase = function() {\n        var decimal = \"0123456789\";\n        /*\r\n     * Convert string of baseIn to an array of numbers of baseOut.\r\n     * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n     * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n     */ function toBaseOut(str, baseIn, baseOut, alphabet) {\n            var j, arr = [\n                0\n            ], arrL, i = 0, len = str.length;\n            for(; i < len;){\n                for(arrL = arr.length; arrL--; arr[arrL] *= baseIn);\n                arr[0] += alphabet.indexOf(str.charAt(i++));\n                for(j = 0; j < arr.length; j++){\n                    if (arr[j] > baseOut - 1) {\n                        if (arr[j + 1] == null) arr[j + 1] = 0;\n                        arr[j + 1] += arr[j] / baseOut | 0;\n                        arr[j] %= baseOut;\n                    }\n                }\n            }\n            return arr.reverse();\n        }\n        // Convert a numeric string of baseIn to a numeric string of baseOut.\n        // If the caller is toString, we are converting from base 10 to baseOut.\n        // If the caller is BigNumber, we are converting from baseIn to base 10.\n        return function(str, baseIn, baseOut, sign, callerIsToString) {\n            var alphabet, d, e, k, r, x, xc, y, i = str.indexOf(\".\"), dp = DECIMAL_PLACES, rm = ROUNDING_MODE;\n            // Non-integer.\n            if (i >= 0) {\n                k = POW_PRECISION;\n                // Unlimited precision.\n                POW_PRECISION = 0;\n                str = str.replace(\".\", \"\");\n                y = new BigNumber(baseIn);\n                x = y.pow(str.length - i);\n                POW_PRECISION = k;\n                // Convert str as if an integer, then restore the fraction part by dividing the\n                // result by its base raised to a power.\n                y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, \"0\"), 10, baseOut, decimal);\n                y.e = y.c.length;\n            }\n            // Convert the number as integer.\n            xc = toBaseOut(str, baseIn, baseOut, callerIsToString ? (alphabet = ALPHABET, decimal) : (alphabet = decimal, ALPHABET));\n            // xc now represents str as an integer and converted to baseOut. e is the exponent.\n            e = k = xc.length;\n            // Remove trailing zeros.\n            for(; xc[--k] == 0; xc.pop());\n            // Zero?\n            if (!xc[0]) return alphabet.charAt(0);\n            // Does str represent an integer? If so, no need for the division.\n            if (i < 0) {\n                --e;\n            } else {\n                x.c = xc;\n                x.e = e;\n                // The sign is needed for correct rounding.\n                x.s = sign;\n                x = div(x, y, dp, rm, baseOut);\n                xc = x.c;\n                r = x.r;\n                e = x.e;\n            }\n            // xc now represents str converted to baseOut.\n            // THe index of the rounding digit.\n            d = e + dp + 1;\n            // The rounding digit: the digit to the right of the digit that may be rounded up.\n            i = xc[d];\n            // Look at the rounding digits and mode to determine whether to round up.\n            k = baseOut / 2;\n            r = r || d < 0 || xc[d + 1] != null;\n            r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : i > k || i == k && (rm == 4 || r || rm == 6 && xc[d - 1] & 1 || rm == (x.s < 0 ? 8 : 7));\n            // If the index of the rounding digit is not greater than zero, or xc represents\n            // zero, then the result of the base conversion is zero or, if rounding up, a value\n            // such as 0.00001.\n            if (d < 1 || !xc[0]) {\n                // 1^-dp or 0\n                str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\n            } else {\n                // Truncate xc to the required number of decimal places.\n                xc.length = d;\n                // Round up?\n                if (r) {\n                    // Rounding up may mean the previous digit has to be rounded up and so on.\n                    for(--baseOut; ++xc[--d] > baseOut;){\n                        xc[d] = 0;\n                        if (!d) {\n                            ++e;\n                            xc = [\n                                1\n                            ].concat(xc);\n                        }\n                    }\n                }\n                // Determine trailing zeros.\n                for(k = xc.length; !xc[--k];);\n                // E.g. [4, 11, 15] becomes 4bf.\n                for(i = 0, str = \"\"; i <= k; str += alphabet.charAt(xc[i++]));\n                // Add leading zeros, decimal point and trailing zeros as required.\n                str = toFixedPoint(str, e, alphabet.charAt(0));\n            }\n            // The caller will add the sign.\n            return str;\n        };\n    }();\n    // Perform division in the specified base. Called by div and convertBase.\n    div = function() {\n        // Assume non-zero x and k.\n        function multiply(x, k, base) {\n            var m, temp, xlo, xhi, carry = 0, i = x.length, klo = k % SQRT_BASE, khi = k / SQRT_BASE | 0;\n            for(x = x.slice(); i--;){\n                xlo = x[i] % SQRT_BASE;\n                xhi = x[i] / SQRT_BASE | 0;\n                m = khi * xlo + xhi * klo;\n                temp = klo * xlo + m % SQRT_BASE * SQRT_BASE + carry;\n                carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\n                x[i] = temp % base;\n            }\n            if (carry) x = [\n                carry\n            ].concat(x);\n            return x;\n        }\n        function compare(a, b, aL, bL) {\n            var i, cmp;\n            if (aL != bL) {\n                cmp = aL > bL ? 1 : -1;\n            } else {\n                for(i = cmp = 0; i < aL; i++){\n                    if (a[i] != b[i]) {\n                        cmp = a[i] > b[i] ? 1 : -1;\n                        break;\n                    }\n                }\n            }\n            return cmp;\n        }\n        function subtract(a, b, aL, base) {\n            var i = 0;\n            // Subtract b from a.\n            for(; aL--;){\n                a[aL] -= i;\n                i = a[aL] < b[aL] ? 1 : 0;\n                a[aL] = i * base + a[aL] - b[aL];\n            }\n            // Remove leading zeros.\n            for(; !a[0] && a.length > 1; a.splice(0, 1));\n        }\n        // x: dividend, y: divisor.\n        return function(x, y, dp, rm, base) {\n            var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0, yL, yz, s = x.s == y.s ? 1 : -1, xc = x.c, yc = y.c;\n            // Either NaN, Infinity or 0?\n            if (!xc || !xc[0] || !yc || !yc[0]) {\n                return new BigNumber(// Return NaN if either NaN, or both Infinity or 0.\n                !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN : // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\n                xc && xc[0] == 0 || !yc ? s * 0 : s / 0);\n            }\n            q = new BigNumber(s);\n            qc = q.c = [];\n            e = x.e - y.e;\n            s = dp + e + 1;\n            if (!base) {\n                base = BASE;\n                e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\n                s = s / LOG_BASE | 0;\n            }\n            // Result exponent may be one less then the current value of e.\n            // The coefficients of the BigNumbers from convertBase may have trailing zeros.\n            for(i = 0; yc[i] == (xc[i] || 0); i++);\n            if (yc[i] > (xc[i] || 0)) e--;\n            if (s < 0) {\n                qc.push(1);\n                more = true;\n            } else {\n                xL = xc.length;\n                yL = yc.length;\n                i = 0;\n                s += 2;\n                // Normalise xc and yc so highest order digit of yc is >= base / 2.\n                n = mathfloor(base / (yc[0] + 1));\n                // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\n                // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\n                if (n > 1) {\n                    yc = multiply(yc, n, base);\n                    xc = multiply(xc, n, base);\n                    yL = yc.length;\n                    xL = xc.length;\n                }\n                xi = yL;\n                rem = xc.slice(0, yL);\n                remL = rem.length;\n                // Add zeros to make remainder as long as divisor.\n                for(; remL < yL; rem[remL++] = 0);\n                yz = yc.slice();\n                yz = [\n                    0\n                ].concat(yz);\n                yc0 = yc[0];\n                if (yc[1] >= base / 2) yc0++;\n                // Not necessary, but to prevent trial digit n > base, when using base 3.\n                // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\n                do {\n                    n = 0;\n                    // Compare divisor and remainder.\n                    cmp = compare(yc, rem, yL, remL);\n                    // If divisor < remainder.\n                    if (cmp < 0) {\n                        // Calculate trial digit, n.\n                        rem0 = rem[0];\n                        if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\n                        // n is how many times the divisor goes into the current remainder.\n                        n = mathfloor(rem0 / yc0);\n                        //  Algorithm:\n                        //  product = divisor multiplied by trial digit (n).\n                        //  Compare product and remainder.\n                        //  If product is greater than remainder:\n                        //    Subtract divisor from product, decrement trial digit.\n                        //  Subtract product from remainder.\n                        //  If product was less than remainder at the last compare:\n                        //    Compare new remainder and divisor.\n                        //    If remainder is greater than divisor:\n                        //      Subtract divisor from remainder, increment trial digit.\n                        if (n > 1) {\n                            // n may be > base only when base is 3.\n                            if (n >= base) n = base - 1;\n                            // product = divisor * trial digit.\n                            prod = multiply(yc, n, base);\n                            prodL = prod.length;\n                            remL = rem.length;\n                            // Compare product and remainder.\n                            // If product > remainder then trial digit n too high.\n                            // n is 1 too high about 5% of the time, and is not known to have\n                            // ever been more than 1 too high.\n                            while(compare(prod, rem, prodL, remL) == 1){\n                                n--;\n                                // Subtract divisor from product.\n                                subtract(prod, yL < prodL ? yz : yc, prodL, base);\n                                prodL = prod.length;\n                                cmp = 1;\n                            }\n                        } else {\n                            // n is 0 or 1, cmp is -1.\n                            // If n is 0, there is no need to compare yc and rem again below,\n                            // so change cmp to 1 to avoid it.\n                            // If n is 1, leave cmp as -1, so yc and rem are compared again.\n                            if (n == 0) {\n                                // divisor < remainder, so n must be at least 1.\n                                cmp = n = 1;\n                            }\n                            // product = divisor\n                            prod = yc.slice();\n                            prodL = prod.length;\n                        }\n                        if (prodL < remL) prod = [\n                            0\n                        ].concat(prod);\n                        // Subtract product from remainder.\n                        subtract(rem, prod, remL, base);\n                        remL = rem.length;\n                        // If product was < remainder.\n                        if (cmp == -1) {\n                            // Compare divisor and new remainder.\n                            // If divisor < new remainder, subtract divisor from remainder.\n                            // Trial digit n too low.\n                            // n is 1 too low about 5% of the time, and very rarely 2 too low.\n                            while(compare(yc, rem, yL, remL) < 1){\n                                n++;\n                                // Subtract divisor from remainder.\n                                subtract(rem, yL < remL ? yz : yc, remL, base);\n                                remL = rem.length;\n                            }\n                        }\n                    } else if (cmp === 0) {\n                        n++;\n                        rem = [\n                            0\n                        ];\n                    } // else cmp === 1 and n will be 0\n                    // Add the next digit, n, to the result array.\n                    qc[i++] = n;\n                    // Update the remainder.\n                    if (rem[0]) {\n                        rem[remL++] = xc[xi] || 0;\n                    } else {\n                        rem = [\n                            xc[xi]\n                        ];\n                        remL = 1;\n                    }\n                }while ((xi++ < xL || rem[0] != null) && s--);\n                more = rem[0] != null;\n                // Leading zero?\n                if (!qc[0]) qc.splice(0, 1);\n            }\n            if (base == BASE) {\n                // To calculate q.e, first get the number of digits of qc[0].\n                for(i = 1, s = qc[0]; s >= 10; s /= 10, i++);\n                round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\n            // Caller is convertBase.\n            } else {\n                q.e = e;\n                q.r = +more;\n            }\n            return q;\n        };\n    }();\n    /*\r\n   * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n   * notation rounded to the specified decimal places or significant digits.\r\n   *\r\n   * n: a BigNumber.\r\n   * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n   * rm: the rounding mode.\r\n   * id: 1 (toExponential) or 2 (toPrecision).\r\n   */ function format(n, i, rm, id) {\n        var c0, e, ne, len, str;\n        if (rm == null) rm = ROUNDING_MODE;\n        else intCheck(rm, 0, 8);\n        if (!n.c) return n.toString();\n        c0 = n.c[0];\n        ne = n.e;\n        if (i == null) {\n            str = coeffToString(n.c);\n            str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS) ? toExponential(str, ne) : toFixedPoint(str, ne, \"0\");\n        } else {\n            n = round(new BigNumber(n), i, rm);\n            // n.e may have changed if the value was rounded up.\n            e = n.e;\n            str = coeffToString(n.c);\n            len = str.length;\n            // toPrecision returns exponential notation if the number of significant digits\n            // specified is less than the number of digits necessary to represent the integer\n            // part of the value in fixed-point notation.\n            // Exponential notation.\n            if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\n                // Append zeros?\n                for(; len < i; str += \"0\", len++);\n                str = toExponential(str, e);\n            // Fixed-point notation.\n            } else {\n                i -= ne;\n                str = toFixedPoint(str, e, \"0\");\n                // Append zeros?\n                if (e + 1 > len) {\n                    if (--i > 0) for(str += \".\"; i--; str += \"0\");\n                } else {\n                    i += e - len;\n                    if (i > 0) {\n                        if (e + 1 == len) str += \".\";\n                        for(; i--; str += \"0\");\n                    }\n                }\n            }\n        }\n        return n.s < 0 && c0 ? \"-\" + str : str;\n    }\n    // Handle BigNumber.max and BigNumber.min.\n    // If any number is NaN, return NaN.\n    function maxOrMin(args, n) {\n        var k, y, i = 1, x = new BigNumber(args[0]);\n        for(; i < args.length; i++){\n            y = new BigNumber(args[i]);\n            if (!y.s || (k = compare(x, y)) === n || k === 0 && x.s === n) {\n                x = y;\n            }\n        }\n        return x;\n    }\n    /*\r\n   * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n   * Called by minus, plus and times.\r\n   */ function normalise(n, c, e) {\n        var i = 1, j = c.length;\n        // Remove trailing zeros.\n        for(; !c[--j]; c.pop());\n        // Calculate the base 10 exponent. First get the number of digits of c[0].\n        for(j = c[0]; j >= 10; j /= 10, i++);\n        // Overflow?\n        if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\n            // Infinity.\n            n.c = n.e = null;\n        // Underflow?\n        } else if (e < MIN_EXP) {\n            // Zero.\n            n.c = [\n                n.e = 0\n            ];\n        } else {\n            n.e = e;\n            n.c = c;\n        }\n        return n;\n    }\n    // Handle values that fail the validity test in BigNumber.\n    parseNumeric = function() {\n        var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i, dotAfter = /^([^.]+)\\.$/, dotBefore = /^\\.([^.]+)$/, isInfinityOrNaN = /^-?(Infinity|NaN)$/, whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\n        return function(x, str, isNum, b) {\n            var base, s = isNum ? str : str.replace(whitespaceOrPlus, \"\");\n            // No exception on ±Infinity or NaN.\n            if (isInfinityOrNaN.test(s)) {\n                x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\n            } else {\n                if (!isNum) {\n                    // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\n                    s = s.replace(basePrefix, function(m, p1, p2) {\n                        base = (p2 = p2.toLowerCase()) == \"x\" ? 16 : p2 == \"b\" ? 2 : 8;\n                        return !b || b == base ? p1 : m;\n                    });\n                    if (b) {\n                        base = b;\n                        // E.g. '1.' to '1', '.1' to '0.1'\n                        s = s.replace(dotAfter, \"$1\").replace(dotBefore, \"0.$1\");\n                    }\n                    if (str != s) return new BigNumber(s, base);\n                }\n                // '[BigNumber Error] Not a number: {n}'\n                // '[BigNumber Error] Not a base {b} number: {n}'\n                if (BigNumber.DEBUG) {\n                    throw Error(bignumberError + \"Not a\" + (b ? \" base \" + b : \"\") + \" number: \" + str);\n                }\n                // NaN\n                x.s = null;\n            }\n            x.c = x.e = null;\n        };\n    }();\n    /*\r\n   * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n   * If r is truthy, it is known that there are more digits after the rounding digit.\r\n   */ function round(x, sd, rm, r) {\n        var d, i, j, k, n, ni, rd, xc = x.c, pows10 = POWS_TEN;\n        // if x is not Infinity or NaN...\n        if (xc) {\n            // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\n            // n is a base 1e14 number, the value of the element of array x.c containing rd.\n            // ni is the index of n within x.c.\n            // d is the number of digits of n.\n            // i is the index of rd within n including leading zeros.\n            // j is the actual index of rd within n (if < 0, rd is a leading zero).\n            out: {\n                // Get the number of digits of the first element of xc.\n                for(d = 1, k = xc[0]; k >= 10; k /= 10, d++);\n                i = sd - d;\n                // If the rounding digit is in the first element of xc...\n                if (i < 0) {\n                    i += LOG_BASE;\n                    j = sd;\n                    n = xc[ni = 0];\n                    // Get the rounding digit at index j of n.\n                    rd = mathfloor(n / pows10[d - j - 1] % 10);\n                } else {\n                    ni = mathceil((i + 1) / LOG_BASE);\n                    if (ni >= xc.length) {\n                        if (r) {\n                            // Needed by sqrt.\n                            for(; xc.length <= ni; xc.push(0));\n                            n = rd = 0;\n                            d = 1;\n                            i %= LOG_BASE;\n                            j = i - LOG_BASE + 1;\n                        } else {\n                            break out;\n                        }\n                    } else {\n                        n = k = xc[ni];\n                        // Get the number of digits of n.\n                        for(d = 1; k >= 10; k /= 10, d++);\n                        // Get the index of rd within n.\n                        i %= LOG_BASE;\n                        // Get the index of rd within n, adjusted for leading zeros.\n                        // The number of leading zeros of n is given by LOG_BASE - d.\n                        j = i - LOG_BASE + d;\n                        // Get the rounding digit at index j of n.\n                        rd = j < 0 ? 0 : mathfloor(n / pows10[d - j - 1] % 10);\n                    }\n                }\n                r = r || sd < 0 || // Are there any non-zero digits after the rounding digit?\n                // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\n                // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\n                xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\n                r = rm < 4 ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 && (i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));\n                if (sd < 1 || !xc[0]) {\n                    xc.length = 0;\n                    if (r) {\n                        // Convert sd to decimal places.\n                        sd -= x.e + 1;\n                        // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n                        xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\n                        x.e = -sd || 0;\n                    } else {\n                        // Zero.\n                        xc[0] = x.e = 0;\n                    }\n                    return x;\n                }\n                // Remove excess digits.\n                if (i == 0) {\n                    xc.length = ni;\n                    k = 1;\n                    ni--;\n                } else {\n                    xc.length = ni + 1;\n                    k = pows10[LOG_BASE - i];\n                    // E.g. 56700 becomes 56000 if 7 is the rounding digit.\n                    // j > 0 means i > number of leading zeros of n.\n                    xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\n                }\n                // Round up?\n                if (r) {\n                    for(;;){\n                        // If the digit to be rounded up is in the first element of xc...\n                        if (ni == 0) {\n                            // i will be the length of xc[0] before k is added.\n                            for(i = 1, j = xc[0]; j >= 10; j /= 10, i++);\n                            j = xc[0] += k;\n                            for(k = 1; j >= 10; j /= 10, k++);\n                            // if i != k the length has increased.\n                            if (i != k) {\n                                x.e++;\n                                if (xc[0] == BASE) xc[0] = 1;\n                            }\n                            break;\n                        } else {\n                            xc[ni] += k;\n                            if (xc[ni] != BASE) break;\n                            xc[ni--] = 0;\n                            k = 1;\n                        }\n                    }\n                }\n                // Remove trailing zeros.\n                for(i = xc.length; xc[--i] === 0; xc.pop());\n            }\n            // Overflow? Infinity.\n            if (x.e > MAX_EXP) {\n                x.c = x.e = null;\n            // Underflow? Zero.\n            } else if (x.e < MIN_EXP) {\n                x.c = [\n                    x.e = 0\n                ];\n            }\n        }\n        return x;\n    }\n    function valueOf(n) {\n        var str, e = n.e;\n        if (e === null) return n.toString();\n        str = coeffToString(n.c);\n        str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(str, e) : toFixedPoint(str, e, \"0\");\n        return n.s < 0 ? \"-\" + str : str;\n    }\n    // PROTOTYPE/INSTANCE METHODS\n    /*\r\n   * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n   */ P.absoluteValue = P.abs = function() {\n        var x = new BigNumber(this);\n        if (x.s < 0) x.s = 1;\n        return x;\n    };\n    /*\r\n   * Return\r\n   *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n   *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n   *   0 if they have the same value,\r\n   *   or null if the value of either is NaN.\r\n   */ P.comparedTo = function(y, b) {\n        return compare(this, new BigNumber(y, b));\n    };\n    /*\r\n   * If dp is undefined or null or true or false, return the number of decimal places of the\r\n   * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n   *\r\n   * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n   * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n   * ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */ P.decimalPlaces = P.dp = function(dp, rm) {\n        var c, n, v, x = this;\n        if (dp != null) {\n            intCheck(dp, 0, MAX);\n            if (rm == null) rm = ROUNDING_MODE;\n            else intCheck(rm, 0, 8);\n            return round(new BigNumber(x), dp + x.e + 1, rm);\n        }\n        if (!(c = x.c)) return null;\n        n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\n        // Subtract the number of trailing zeros of the last number.\n        if (v = c[v]) for(; v % 10 == 0; v /= 10, n--);\n        if (n < 0) n = 0;\n        return n;\n    };\n    /*\r\n   *  n / 0 = I\r\n   *  n / N = N\r\n   *  n / I = 0\r\n   *  0 / n = 0\r\n   *  0 / 0 = N\r\n   *  0 / N = N\r\n   *  0 / I = 0\r\n   *  N / n = N\r\n   *  N / 0 = N\r\n   *  N / N = N\r\n   *  N / I = N\r\n   *  I / n = I\r\n   *  I / 0 = I\r\n   *  I / N = N\r\n   *  I / I = N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n   * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   */ P.dividedBy = P.div = function(y, b) {\n        return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\n    };\n    /*\r\n   * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n   * BigNumber by the value of BigNumber(y, b).\r\n   */ P.dividedToIntegerBy = P.idiv = function(y, b) {\n        return div(this, new BigNumber(y, b), 0, 1);\n    };\n    /*\r\n   * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n   *\r\n   * If m is present, return the result modulo m.\r\n   * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n   *\r\n   * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n   * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n   *\r\n   * n {number|string|BigNumber} The exponent. An integer.\r\n   * [m] {number|string|BigNumber} The modulus.\r\n   *\r\n   * '[BigNumber Error] Exponent not an integer: {n}'\r\n   */ P.exponentiatedBy = P.pow = function(n, m) {\n        var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y, x = this;\n        n = new BigNumber(n);\n        // Allow NaN and ±Infinity, but not other non-integers.\n        if (n.c && !n.isInteger()) {\n            throw Error(bignumberError + \"Exponent not an integer: \" + valueOf(n));\n        }\n        if (m != null) m = new BigNumber(m);\n        // Exponent of MAX_SAFE_INTEGER is 15.\n        nIsBig = n.e > 14;\n        // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\n        if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\n            // The sign of the result of pow when x is negative depends on the evenness of n.\n            // If +n overflows to ±Infinity, the evenness of n would be not be known.\n            y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? n.s * (2 - isOdd(n)) : +valueOf(n)));\n            return m ? y.mod(m) : y;\n        }\n        nIsNeg = n.s < 0;\n        if (m) {\n            // x % m returns NaN if abs(m) is zero, or m is NaN.\n            if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\n            isModExp = !nIsNeg && x.isInteger() && m.isInteger();\n            if (isModExp) x = x.mod(m);\n        // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\n        // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\n        } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0 ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7 : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\n            // If x is negative and n is odd, k = -0, else k = 0.\n            k = x.s < 0 && isOdd(n) ? -0 : 0;\n            // If x >= 1, k = ±Infinity.\n            if (x.e > -1) k = 1 / k;\n            // If n is negative return ±0, else return ±Infinity.\n            return new BigNumber(nIsNeg ? 1 / k : k);\n        } else if (POW_PRECISION) {\n            // Truncating each coefficient array to a length of k after each multiplication\n            // equates to truncating significant digits to POW_PRECISION + [28, 41],\n            // i.e. there will be a minimum of 28 guard digits retained.\n            k = mathceil(POW_PRECISION / LOG_BASE + 2);\n        }\n        if (nIsBig) {\n            half = new BigNumber(0.5);\n            if (nIsNeg) n.s = 1;\n            nIsOdd = isOdd(n);\n        } else {\n            i = Math.abs(+valueOf(n));\n            nIsOdd = i % 2;\n        }\n        y = new BigNumber(ONE);\n        // Performs 54 loop iterations for n of 9007199254740991.\n        for(;;){\n            if (nIsOdd) {\n                y = y.times(x);\n                if (!y.c) break;\n                if (k) {\n                    if (y.c.length > k) y.c.length = k;\n                } else if (isModExp) {\n                    y = y.mod(m); //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\n                }\n            }\n            if (i) {\n                i = mathfloor(i / 2);\n                if (i === 0) break;\n                nIsOdd = i % 2;\n            } else {\n                n = n.times(half);\n                round(n, n.e + 1, 1);\n                if (n.e > 14) {\n                    nIsOdd = isOdd(n);\n                } else {\n                    i = +valueOf(n);\n                    if (i === 0) break;\n                    nIsOdd = i % 2;\n                }\n            }\n            x = x.times(x);\n            if (k) {\n                if (x.c && x.c.length > k) x.c.length = k;\n            } else if (isModExp) {\n                x = x.mod(m); //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\n            }\n        }\n        if (isModExp) return y;\n        if (nIsNeg) y = ONE.div(y);\n        return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\n    };\n    /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n   * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n   */ P.integerValue = function(rm) {\n        var n = new BigNumber(this);\n        if (rm == null) rm = ROUNDING_MODE;\n        else intCheck(rm, 0, 8);\n        return round(n, n.e + 1, rm);\n    };\n    /*\r\n   * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */ P.isEqualTo = P.eq = function(y, b) {\n        return compare(this, new BigNumber(y, b)) === 0;\n    };\n    /*\r\n   * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n   */ P.isFinite = function() {\n        return !!this.c;\n    };\n    /*\r\n   * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */ P.isGreaterThan = P.gt = function(y, b) {\n        return compare(this, new BigNumber(y, b)) > 0;\n    };\n    /*\r\n   * Return true if the value of this BigNumber is greater than or equal to the value of\r\n   * BigNumber(y, b), otherwise return false.\r\n   */ P.isGreaterThanOrEqualTo = P.gte = function(y, b) {\n        return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\n    };\n    /*\r\n   * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n   */ P.isInteger = function() {\n        return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\n    };\n    /*\r\n   * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */ P.isLessThan = P.lt = function(y, b) {\n        return compare(this, new BigNumber(y, b)) < 0;\n    };\n    /*\r\n   * Return true if the value of this BigNumber is less than or equal to the value of\r\n   * BigNumber(y, b), otherwise return false.\r\n   */ P.isLessThanOrEqualTo = P.lte = function(y, b) {\n        return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\n    };\n    /*\r\n   * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n   */ P.isNaN = function() {\n        return !this.s;\n    };\n    /*\r\n   * Return true if the value of this BigNumber is negative, otherwise return false.\r\n   */ P.isNegative = function() {\n        return this.s < 0;\n    };\n    /*\r\n   * Return true if the value of this BigNumber is positive, otherwise return false.\r\n   */ P.isPositive = function() {\n        return this.s > 0;\n    };\n    /*\r\n   * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n   */ P.isZero = function() {\n        return !!this.c && this.c[0] == 0;\n    };\n    /*\r\n   *  n - 0 = n\r\n   *  n - N = N\r\n   *  n - I = -I\r\n   *  0 - n = -n\r\n   *  0 - 0 = 0\r\n   *  0 - N = N\r\n   *  0 - I = -I\r\n   *  N - n = N\r\n   *  N - 0 = N\r\n   *  N - N = N\r\n   *  N - I = N\r\n   *  I - n = I\r\n   *  I - 0 = I\r\n   *  I - N = N\r\n   *  I - I = N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n   * BigNumber(y, b).\r\n   */ P.minus = function(y, b) {\n        var i, j, t, xLTy, x = this, a = x.s;\n        y = new BigNumber(y, b);\n        b = y.s;\n        // Either NaN?\n        if (!a || !b) return new BigNumber(NaN);\n        // Signs differ?\n        if (a != b) {\n            y.s = -b;\n            return x.plus(y);\n        }\n        var xe = x.e / LOG_BASE, ye = y.e / LOG_BASE, xc = x.c, yc = y.c;\n        if (!xe || !ye) {\n            // Either Infinity?\n            if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\n            // Either zero?\n            if (!xc[0] || !yc[0]) {\n                // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\n                return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x : // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\n                ROUNDING_MODE == 3 ? -0 : 0);\n            }\n        }\n        xe = bitFloor(xe);\n        ye = bitFloor(ye);\n        xc = xc.slice();\n        // Determine which is the bigger number.\n        if (a = xe - ye) {\n            if (xLTy = a < 0) {\n                a = -a;\n                t = xc;\n            } else {\n                ye = xe;\n                t = yc;\n            }\n            t.reverse();\n            // Prepend zeros to equalise exponents.\n            for(b = a; b--; t.push(0));\n            t.reverse();\n        } else {\n            // Exponents equal. Check digit by digit.\n            j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\n            for(a = b = 0; b < j; b++){\n                if (xc[b] != yc[b]) {\n                    xLTy = xc[b] < yc[b];\n                    break;\n                }\n            }\n        }\n        // x < y? Point xc to the array of the bigger number.\n        if (xLTy) {\n            t = xc;\n            xc = yc;\n            yc = t;\n            y.s = -y.s;\n        }\n        b = (j = yc.length) - (i = xc.length);\n        // Append zeros to xc if shorter.\n        // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\n        if (b > 0) for(; b--; xc[i++] = 0);\n        b = BASE - 1;\n        // Subtract yc from xc.\n        for(; j > a;){\n            if (xc[--j] < yc[j]) {\n                for(i = j; i && !xc[--i]; xc[i] = b);\n                --xc[i];\n                xc[j] += BASE;\n            }\n            xc[j] -= yc[j];\n        }\n        // Remove leading zeros and adjust exponent accordingly.\n        for(; xc[0] == 0; xc.splice(0, 1), --ye);\n        // Zero?\n        if (!xc[0]) {\n            // Following IEEE 754 (2008) 6.3,\n            // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\n            y.s = ROUNDING_MODE == 3 ? -1 : 1;\n            y.c = [\n                y.e = 0\n            ];\n            return y;\n        }\n        // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\n        // for finite x and y.\n        return normalise(y, xc, ye);\n    };\n    /*\r\n   *   n % 0 =  N\r\n   *   n % N =  N\r\n   *   n % I =  n\r\n   *   0 % n =  0\r\n   *  -0 % n = -0\r\n   *   0 % 0 =  N\r\n   *   0 % N =  N\r\n   *   0 % I =  0\r\n   *   N % n =  N\r\n   *   N % 0 =  N\r\n   *   N % N =  N\r\n   *   N % I =  N\r\n   *   I % n =  N\r\n   *   I % 0 =  N\r\n   *   I % N =  N\r\n   *   I % I =  N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n   * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n   */ P.modulo = P.mod = function(y, b) {\n        var q, s, x = this;\n        y = new BigNumber(y, b);\n        // Return NaN if x is Infinity or NaN, or y is NaN or zero.\n        if (!x.c || !y.s || y.c && !y.c[0]) {\n            return new BigNumber(NaN);\n        // Return x if y is Infinity or x is zero.\n        } else if (!y.c || x.c && !x.c[0]) {\n            return new BigNumber(x);\n        }\n        if (MODULO_MODE == 9) {\n            // Euclidian division: q = sign(y) * floor(x / abs(y))\n            // r = x - qy    where  0 <= r < abs(y)\n            s = y.s;\n            y.s = 1;\n            q = div(x, y, 0, 3);\n            y.s = s;\n            q.s *= s;\n        } else {\n            q = div(x, y, 0, MODULO_MODE);\n        }\n        y = x.minus(q.times(y));\n        // To match JavaScript %, ensure sign of zero is sign of dividend.\n        if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\n        return y;\n    };\n    /*\r\n   *  n * 0 = 0\r\n   *  n * N = N\r\n   *  n * I = I\r\n   *  0 * n = 0\r\n   *  0 * 0 = 0\r\n   *  0 * N = N\r\n   *  0 * I = N\r\n   *  N * n = N\r\n   *  N * 0 = N\r\n   *  N * N = N\r\n   *  N * I = N\r\n   *  I * n = I\r\n   *  I * 0 = N\r\n   *  I * N = N\r\n   *  I * I = I\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n   * of BigNumber(y, b).\r\n   */ P.multipliedBy = P.times = function(y, b) {\n        var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc, base, sqrtBase, x = this, xc = x.c, yc = (y = new BigNumber(y, b)).c;\n        // Either NaN, ±Infinity or ±0?\n        if (!xc || !yc || !xc[0] || !yc[0]) {\n            // Return NaN if either is NaN, or one is 0 and the other is Infinity.\n            if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\n                y.c = y.e = y.s = null;\n            } else {\n                y.s *= x.s;\n                // Return ±Infinity if either is ±Infinity.\n                if (!xc || !yc) {\n                    y.c = y.e = null;\n                // Return ±0 if either is ±0.\n                } else {\n                    y.c = [\n                        0\n                    ];\n                    y.e = 0;\n                }\n            }\n            return y;\n        }\n        e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\n        y.s *= x.s;\n        xcL = xc.length;\n        ycL = yc.length;\n        // Ensure xc points to longer array and xcL to its length.\n        if (xcL < ycL) {\n            zc = xc;\n            xc = yc;\n            yc = zc;\n            i = xcL;\n            xcL = ycL;\n            ycL = i;\n        }\n        // Initialise the result array with zeros.\n        for(i = xcL + ycL, zc = []; i--; zc.push(0));\n        base = BASE;\n        sqrtBase = SQRT_BASE;\n        for(i = ycL; --i >= 0;){\n            c = 0;\n            ylo = yc[i] % sqrtBase;\n            yhi = yc[i] / sqrtBase | 0;\n            for(k = xcL, j = i + k; j > i;){\n                xlo = xc[--k] % sqrtBase;\n                xhi = xc[k] / sqrtBase | 0;\n                m = yhi * xlo + xhi * ylo;\n                xlo = ylo * xlo + m % sqrtBase * sqrtBase + zc[j] + c;\n                c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\n                zc[j--] = xlo % base;\n            }\n            zc[j] = c;\n        }\n        if (c) {\n            ++e;\n        } else {\n            zc.splice(0, 1);\n        }\n        return normalise(y, zc, e);\n    };\n    /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n   * i.e. multiplied by -1.\r\n   */ P.negated = function() {\n        var x = new BigNumber(this);\n        x.s = -x.s || null;\n        return x;\n    };\n    /*\r\n   *  n + 0 = n\r\n   *  n + N = N\r\n   *  n + I = I\r\n   *  0 + n = n\r\n   *  0 + 0 = 0\r\n   *  0 + N = N\r\n   *  0 + I = I\r\n   *  N + n = N\r\n   *  N + 0 = N\r\n   *  N + N = N\r\n   *  N + I = N\r\n   *  I + n = I\r\n   *  I + 0 = I\r\n   *  I + N = N\r\n   *  I + I = I\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n   * BigNumber(y, b).\r\n   */ P.plus = function(y, b) {\n        var t, x = this, a = x.s;\n        y = new BigNumber(y, b);\n        b = y.s;\n        // Either NaN?\n        if (!a || !b) return new BigNumber(NaN);\n        // Signs differ?\n        if (a != b) {\n            y.s = -b;\n            return x.minus(y);\n        }\n        var xe = x.e / LOG_BASE, ye = y.e / LOG_BASE, xc = x.c, yc = y.c;\n        if (!xe || !ye) {\n            // Return ±Infinity if either ±Infinity.\n            if (!xc || !yc) return new BigNumber(a / 0);\n            // Either zero?\n            // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\n            if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\n        }\n        xe = bitFloor(xe);\n        ye = bitFloor(ye);\n        xc = xc.slice();\n        // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\n        if (a = xe - ye) {\n            if (a > 0) {\n                ye = xe;\n                t = yc;\n            } else {\n                a = -a;\n                t = xc;\n            }\n            t.reverse();\n            for(; a--; t.push(0));\n            t.reverse();\n        }\n        a = xc.length;\n        b = yc.length;\n        // Point xc to the longer array, and b to the shorter length.\n        if (a - b < 0) {\n            t = yc;\n            yc = xc;\n            xc = t;\n            b = a;\n        }\n        // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\n        for(a = 0; b;){\n            a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\n            xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\n        }\n        if (a) {\n            xc = [\n                a\n            ].concat(xc);\n            ++ye;\n        }\n        // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n        // ye = MAX_EXP + 1 possible\n        return normalise(y, xc, ye);\n    };\n    /*\r\n   * If sd is undefined or null or true or false, return the number of significant digits of\r\n   * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n   * If sd is true include integer-part trailing zeros in the count.\r\n   *\r\n   * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n   * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n   * ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n   *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n   */ P.precision = P.sd = function(sd, rm) {\n        var c, n, v, x = this;\n        if (sd != null && sd !== !!sd) {\n            intCheck(sd, 1, MAX);\n            if (rm == null) rm = ROUNDING_MODE;\n            else intCheck(rm, 0, 8);\n            return round(new BigNumber(x), sd, rm);\n        }\n        if (!(c = x.c)) return null;\n        v = c.length - 1;\n        n = v * LOG_BASE + 1;\n        if (v = c[v]) {\n            // Subtract the number of trailing zeros of the last element.\n            for(; v % 10 == 0; v /= 10, n--);\n            // Add the number of digits of the first element.\n            for(v = c[0]; v >= 10; v /= 10, n++);\n        }\n        if (sd && x.e + 1 > n) n = x.e + 1;\n        return n;\n    };\n    /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n   * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n   *\r\n   * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n   */ P.shiftedBy = function(k) {\n        intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\n        return this.times(\"1e\" + k);\n    };\n    /*\r\n   *  sqrt(-n) =  N\r\n   *  sqrt(N) =  N\r\n   *  sqrt(-I) =  N\r\n   *  sqrt(I) =  I\r\n   *  sqrt(0) =  0\r\n   *  sqrt(-0) = -0\r\n   *\r\n   * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n   * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   */ P.squareRoot = P.sqrt = function() {\n        var m, n, r, rep, t, x = this, c = x.c, s = x.s, e = x.e, dp = DECIMAL_PLACES + 4, half = new BigNumber(\"0.5\");\n        // Negative/NaN/Infinity/zero?\n        if (s !== 1 || !c || !c[0]) {\n            return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\n        }\n        // Initial estimate.\n        s = Math.sqrt(+valueOf(x));\n        // Math.sqrt underflow/overflow?\n        // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\n        if (s == 0 || s == 1 / 0) {\n            n = coeffToString(c);\n            if ((n.length + e) % 2 == 0) n += \"0\";\n            s = Math.sqrt(+n);\n            e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\n            if (s == 1 / 0) {\n                n = \"5e\" + e;\n            } else {\n                n = s.toExponential();\n                n = n.slice(0, n.indexOf(\"e\") + 1) + e;\n            }\n            r = new BigNumber(n);\n        } else {\n            r = new BigNumber(s + \"\");\n        }\n        // Check for zero.\n        // r could be zero if MIN_EXP is changed after the this value was created.\n        // This would cause a division by zero (x/t) and hence Infinity below, which would cause\n        // coeffToString to throw.\n        if (r.c[0]) {\n            e = r.e;\n            s = e + dp;\n            if (s < 3) s = 0;\n            // Newton-Raphson iteration.\n            for(;;){\n                t = r;\n                r = half.times(t.plus(div(x, t, dp, 1)));\n                if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\n                    // The exponent of r may here be one less than the final result exponent,\n                    // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\n                    // are indexed correctly.\n                    if (r.e < e) --s;\n                    n = n.slice(s - 3, s + 1);\n                    // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\n                    // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\n                    // iteration.\n                    if (n == \"9999\" || !rep && n == \"4999\") {\n                        // On the first iteration only, check to see if rounding up gives the\n                        // exact result as the nines may infinitely repeat.\n                        if (!rep) {\n                            round(t, t.e + DECIMAL_PLACES + 2, 0);\n                            if (t.times(t).eq(x)) {\n                                r = t;\n                                break;\n                            }\n                        }\n                        dp += 4;\n                        s += 4;\n                        rep = 1;\n                    } else {\n                        // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\n                        // result. If not, then there are further digits and m will be truthy.\n                        if (!+n || !+n.slice(1) && n.charAt(0) == \"5\") {\n                            // Truncate to the first rounding digit.\n                            round(r, r.e + DECIMAL_PLACES + 2, 1);\n                            m = !r.times(r).eq(x);\n                        }\n                        break;\n                    }\n                }\n            }\n        }\n        return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\n    };\n    /*\r\n   * Return a string representing the value of this BigNumber in exponential notation and\r\n   * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */ P.toExponential = function(dp, rm) {\n        if (dp != null) {\n            intCheck(dp, 0, MAX);\n            dp++;\n        }\n        return format(this, dp, rm, 1);\n    };\n    /*\r\n   * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n   * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n   * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */ P.toFixed = function(dp, rm) {\n        if (dp != null) {\n            intCheck(dp, 0, MAX);\n            dp = dp + this.e + 1;\n        }\n        return format(this, dp, rm);\n    };\n    /*\r\n   * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n   * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n   * of the format or FORMAT object (see BigNumber.set).\r\n   *\r\n   * The formatting object may contain some or all of the properties shown below.\r\n   *\r\n   * FORMAT = {\r\n   *   prefix: '',\r\n   *   groupSize: 3,\r\n   *   secondaryGroupSize: 0,\r\n   *   groupSeparator: ',',\r\n   *   decimalSeparator: '.',\r\n   *   fractionGroupSize: 0,\r\n   *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n   *   suffix: ''\r\n   * };\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   * [format] {object} Formatting options. See FORMAT pbject above.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   * '[BigNumber Error] Argument not an object: {format}'\r\n   */ P.toFormat = function(dp, rm, format) {\n        var str, x = this;\n        if (format == null) {\n            if (dp != null && rm && typeof rm == \"object\") {\n                format = rm;\n                rm = null;\n            } else if (dp && typeof dp == \"object\") {\n                format = dp;\n                dp = rm = null;\n            } else {\n                format = FORMAT;\n            }\n        } else if (typeof format != \"object\") {\n            throw Error(bignumberError + \"Argument not an object: \" + format);\n        }\n        str = x.toFixed(dp, rm);\n        if (x.c) {\n            var i, arr = str.split(\".\"), g1 = +format.groupSize, g2 = +format.secondaryGroupSize, groupSeparator = format.groupSeparator || \"\", intPart = arr[0], fractionPart = arr[1], isNeg = x.s < 0, intDigits = isNeg ? intPart.slice(1) : intPart, len = intDigits.length;\n            if (g2) {\n                i = g1;\n                g1 = g2;\n                g2 = i;\n                len -= i;\n            }\n            if (g1 > 0 && len > 0) {\n                i = len % g1 || g1;\n                intPart = intDigits.substr(0, i);\n                for(; i < len; i += g1)intPart += groupSeparator + intDigits.substr(i, g1);\n                if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\n                if (isNeg) intPart = \"-\" + intPart;\n            }\n            str = fractionPart ? intPart + (format.decimalSeparator || \"\") + ((g2 = +format.fractionGroupSize) ? fractionPart.replace(new RegExp(\"\\\\d{\" + g2 + \"}\\\\B\", \"g\"), \"$&\" + (format.fractionGroupSeparator || \"\")) : fractionPart) : intPart;\n        }\n        return (format.prefix || \"\") + str + (format.suffix || \"\");\n    };\n    /*\r\n   * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n   * fraction with an integer numerator and an integer denominator.\r\n   * The denominator will be a positive non-zero value less than or equal to the specified\r\n   * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n   * the lowest value necessary to represent the number exactly.\r\n   *\r\n   * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n   *\r\n   * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n   */ P.toFraction = function(md) {\n        var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s, x = this, xc = x.c;\n        if (md != null) {\n            n = new BigNumber(md);\n            // Throw if md is less than one or is not an integer, unless it is Infinity.\n            if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\n                throw Error(bignumberError + \"Argument \" + (n.isInteger() ? \"out of range: \" : \"not an integer: \") + valueOf(n));\n            }\n        }\n        if (!xc) return new BigNumber(x);\n        d = new BigNumber(ONE);\n        n1 = d0 = new BigNumber(ONE);\n        d1 = n0 = new BigNumber(ONE);\n        s = coeffToString(xc);\n        // Determine initial denominator.\n        // d is a power of 10 and the minimum max denominator that specifies the value exactly.\n        e = d.e = s.length - x.e - 1;\n        d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\n        md = !md || n.comparedTo(d) > 0 ? e > 0 ? d : n1 : n;\n        exp = MAX_EXP;\n        MAX_EXP = 1 / 0;\n        n = new BigNumber(s);\n        // n0 = d1 = 0\n        n0.c[0] = 0;\n        for(;;){\n            q = div(n, d, 0, 1);\n            d2 = d0.plus(q.times(d1));\n            if (d2.comparedTo(md) == 1) break;\n            d0 = d1;\n            d1 = d2;\n            n1 = n0.plus(q.times(d2 = n1));\n            n0 = d2;\n            d = n.minus(q.times(d2 = d));\n            n = d2;\n        }\n        d2 = div(md.minus(d0), d1, 0, 1);\n        n0 = n0.plus(d2.times(n1));\n        d0 = d0.plus(d2.times(d1));\n        n0.s = n1.s = x.s;\n        e = e * 2;\n        // Determine which fraction is closer to x, n0/d0 or n1/d1\n        r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [\n            n1,\n            d1\n        ] : [\n            n0,\n            d0\n        ];\n        MAX_EXP = exp;\n        return r;\n    };\n    /*\r\n   * Return the value of this BigNumber converted to a number primitive.\r\n   */ P.toNumber = function() {\n        return +valueOf(this);\n    };\n    /*\r\n   * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n   * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n   * necessary to represent the integer part of the value in fixed-point notation, then use\r\n   * exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n   */ P.toPrecision = function(sd, rm) {\n        if (sd != null) intCheck(sd, 1, MAX);\n        return format(this, sd, rm, 2);\n    };\n    /*\r\n   * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n   * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n   * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n   * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n   * TO_EXP_NEG, return exponential notation.\r\n   *\r\n   * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n   *\r\n   * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n   */ P.toString = function(b) {\n        var str, n = this, s = n.s, e = n.e;\n        // Infinity or NaN?\n        if (e === null) {\n            if (s) {\n                str = \"Infinity\";\n                if (s < 0) str = \"-\" + str;\n            } else {\n                str = \"NaN\";\n            }\n        } else {\n            if (b == null) {\n                str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(coeffToString(n.c), e) : toFixedPoint(coeffToString(n.c), e, \"0\");\n            } else if (b === 10 && alphabetHasNormalDecimalDigits) {\n                n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\n                str = toFixedPoint(coeffToString(n.c), n.e, \"0\");\n            } else {\n                intCheck(b, 2, ALPHABET.length, \"Base\");\n                str = convertBase(toFixedPoint(coeffToString(n.c), e, \"0\"), 10, b, s, true);\n            }\n            if (s < 0 && n.c[0]) str = \"-\" + str;\n        }\n        return str;\n    };\n    /*\r\n   * Return as toString, but do not accept a base argument, and include the minus sign for\r\n   * negative zero.\r\n   */ P.valueOf = P.toJSON = function() {\n        return valueOf(this);\n    };\n    P._isBigNumber = true;\n    P[Symbol.toStringTag] = \"BigNumber\";\n    // Node.js v10.12.0+\n    P[Symbol.for(\"nodejs.util.inspect.custom\")] = P.valueOf;\n    if (configObject != null) BigNumber.set(configObject);\n    return BigNumber;\n}\n// PRIVATE HELPER FUNCTIONS\n// These functions don't need access to variables,\n// e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\nfunction bitFloor(n) {\n    var i = n | 0;\n    return n > 0 || n === i ? i : i - 1;\n}\n// Return a coefficient array as a string of base 10 digits.\nfunction coeffToString(a) {\n    var s, z, i = 1, j = a.length, r = a[0] + \"\";\n    for(; i < j;){\n        s = a[i++] + \"\";\n        z = LOG_BASE - s.length;\n        for(; z--; s = \"0\" + s);\n        r += s;\n    }\n    // Determine trailing zeros.\n    for(j = r.length; r.charCodeAt(--j) === 48;);\n    return r.slice(0, j + 1 || 1);\n}\n// Compare the value of BigNumbers x and y.\nfunction compare(x, y) {\n    var a, b, xc = x.c, yc = y.c, i = x.s, j = y.s, k = x.e, l = y.e;\n    // Either NaN?\n    if (!i || !j) return null;\n    a = xc && !xc[0];\n    b = yc && !yc[0];\n    // Either zero?\n    if (a || b) return a ? b ? 0 : -j : i;\n    // Signs differ?\n    if (i != j) return i;\n    a = i < 0;\n    b = k == l;\n    // Either Infinity?\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\n    // Compare exponents.\n    if (!b) return k > l ^ a ? 1 : -1;\n    j = (k = xc.length) < (l = yc.length) ? k : l;\n    // Compare digit by digit.\n    for(i = 0; i < j; i++)if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\n    // Compare lengths.\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\n}\n/*\r\n * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n */ function intCheck(n, min, max, name) {\n    if (n < min || n > max || n !== mathfloor(n)) {\n        throw Error(bignumberError + (name || \"Argument\") + (typeof n == \"number\" ? n < min || n > max ? \" out of range: \" : \" not an integer: \" : \" not a primitive number: \") + String(n));\n    }\n}\n// Assumes finite n.\nfunction isOdd(n) {\n    var k = n.c.length - 1;\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\n}\nfunction toExponential(str, e) {\n    return (str.length > 1 ? str.charAt(0) + \".\" + str.slice(1) : str) + (e < 0 ? \"e\" : \"e+\") + e;\n}\nfunction toFixedPoint(str, e, z) {\n    var len, zs;\n    // Negative exponent?\n    if (e < 0) {\n        // Prepend zeros.\n        for(zs = z + \".\"; ++e; zs += z);\n        str = zs + str;\n    // Positive exponent\n    } else {\n        len = str.length;\n        // Append zeros.\n        if (++e > len) {\n            for(zs = z, e -= len; --e; zs += z);\n            str += zs;\n        } else if (e < len) {\n            str = str.slice(0, e) + \".\" + str.slice(e);\n        }\n    }\n    return str;\n}\n// EXPORT\nvar BigNumber = clone();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (BigNumber);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/bignumber.js/bignumber.mjs\n");

/***/ })

};
;