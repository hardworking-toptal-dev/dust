"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/pngjs";
exports.ids = ["vendor-chunks/pngjs"];
exports.modules = {

/***/ "(ssr)/../node_modules/pngjs/lib/bitmapper.js":
/*!**********************************************!*\
  !*** ../node_modules/pngjs/lib/bitmapper.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar interlaceUtils = __webpack_require__(/*! ./interlace */ \"(ssr)/../node_modules/pngjs/lib/interlace.js\");\nvar pixelBppMapper = [\n    // 0 - dummy entry\n    function() {},\n    // 1 - L\n    // 0: 0, 1: 0, 2: 0, 3: 0xff\n    function(pxData, data, pxPos, rawPos) {\n        if (rawPos === data.length) {\n            throw new Error(\"Ran out of data\");\n        }\n        var pixel = data[rawPos];\n        pxData[pxPos] = pixel;\n        pxData[pxPos + 1] = pixel;\n        pxData[pxPos + 2] = pixel;\n        pxData[pxPos + 3] = 0xff;\n    },\n    // 2 - LA\n    // 0: 0, 1: 0, 2: 0, 3: 1\n    function(pxData, data, pxPos, rawPos) {\n        if (rawPos + 1 >= data.length) {\n            throw new Error(\"Ran out of data\");\n        }\n        var pixel = data[rawPos];\n        pxData[pxPos] = pixel;\n        pxData[pxPos + 1] = pixel;\n        pxData[pxPos + 2] = pixel;\n        pxData[pxPos + 3] = data[rawPos + 1];\n    },\n    // 3 - RGB\n    // 0: 0, 1: 1, 2: 2, 3: 0xff\n    function(pxData, data, pxPos, rawPos) {\n        if (rawPos + 2 >= data.length) {\n            throw new Error(\"Ran out of data\");\n        }\n        pxData[pxPos] = data[rawPos];\n        pxData[pxPos + 1] = data[rawPos + 1];\n        pxData[pxPos + 2] = data[rawPos + 2];\n        pxData[pxPos + 3] = 0xff;\n    },\n    // 4 - RGBA\n    // 0: 0, 1: 1, 2: 2, 3: 3\n    function(pxData, data, pxPos, rawPos) {\n        if (rawPos + 3 >= data.length) {\n            throw new Error(\"Ran out of data\");\n        }\n        pxData[pxPos] = data[rawPos];\n        pxData[pxPos + 1] = data[rawPos + 1];\n        pxData[pxPos + 2] = data[rawPos + 2];\n        pxData[pxPos + 3] = data[rawPos + 3];\n    }\n];\nvar pixelBppCustomMapper = [\n    // 0 - dummy entry\n    function() {},\n    // 1 - L\n    // 0: 0, 1: 0, 2: 0, 3: 0xff\n    function(pxData, pixelData, pxPos, maxBit) {\n        var pixel = pixelData[0];\n        pxData[pxPos] = pixel;\n        pxData[pxPos + 1] = pixel;\n        pxData[pxPos + 2] = pixel;\n        pxData[pxPos + 3] = maxBit;\n    },\n    // 2 - LA\n    // 0: 0, 1: 0, 2: 0, 3: 1\n    function(pxData, pixelData, pxPos) {\n        var pixel = pixelData[0];\n        pxData[pxPos] = pixel;\n        pxData[pxPos + 1] = pixel;\n        pxData[pxPos + 2] = pixel;\n        pxData[pxPos + 3] = pixelData[1];\n    },\n    // 3 - RGB\n    // 0: 0, 1: 1, 2: 2, 3: 0xff\n    function(pxData, pixelData, pxPos, maxBit) {\n        pxData[pxPos] = pixelData[0];\n        pxData[pxPos + 1] = pixelData[1];\n        pxData[pxPos + 2] = pixelData[2];\n        pxData[pxPos + 3] = maxBit;\n    },\n    // 4 - RGBA\n    // 0: 0, 1: 1, 2: 2, 3: 3\n    function(pxData, pixelData, pxPos) {\n        pxData[pxPos] = pixelData[0];\n        pxData[pxPos + 1] = pixelData[1];\n        pxData[pxPos + 2] = pixelData[2];\n        pxData[pxPos + 3] = pixelData[3];\n    }\n];\nfunction bitRetriever(data, depth) {\n    var leftOver = [];\n    var i = 0;\n    function split() {\n        if (i === data.length) {\n            throw new Error(\"Ran out of data\");\n        }\n        var byte = data[i];\n        i++;\n        var byte8, byte7, byte6, byte5, byte4, byte3, byte2, byte1;\n        switch(depth){\n            default:\n                throw new Error(\"unrecognised depth\");\n            case 16:\n                byte2 = data[i];\n                i++;\n                leftOver.push((byte << 8) + byte2);\n                break;\n            case 4:\n                byte2 = byte & 0x0f;\n                byte1 = byte >> 4;\n                leftOver.push(byte1, byte2);\n                break;\n            case 2:\n                byte4 = byte & 3;\n                byte3 = byte >> 2 & 3;\n                byte2 = byte >> 4 & 3;\n                byte1 = byte >> 6 & 3;\n                leftOver.push(byte1, byte2, byte3, byte4);\n                break;\n            case 1:\n                byte8 = byte & 1;\n                byte7 = byte >> 1 & 1;\n                byte6 = byte >> 2 & 1;\n                byte5 = byte >> 3 & 1;\n                byte4 = byte >> 4 & 1;\n                byte3 = byte >> 5 & 1;\n                byte2 = byte >> 6 & 1;\n                byte1 = byte >> 7 & 1;\n                leftOver.push(byte1, byte2, byte3, byte4, byte5, byte6, byte7, byte8);\n                break;\n        }\n    }\n    return {\n        get: function(count) {\n            while(leftOver.length < count){\n                split();\n            }\n            var returner = leftOver.slice(0, count);\n            leftOver = leftOver.slice(count);\n            return returner;\n        },\n        resetAfterLine: function() {\n            leftOver.length = 0;\n        },\n        end: function() {\n            if (i !== data.length) {\n                throw new Error(\"extra data found\");\n            }\n        }\n    };\n}\nfunction mapImage8Bit(image, pxData, getPxPos, bpp, data, rawPos) {\n    var imageWidth = image.width;\n    var imageHeight = image.height;\n    var imagePass = image.index;\n    for(var y = 0; y < imageHeight; y++){\n        for(var x = 0; x < imageWidth; x++){\n            var pxPos = getPxPos(x, y, imagePass);\n            pixelBppMapper[bpp](pxData, data, pxPos, rawPos);\n            rawPos += bpp; //eslint-disable-line no-param-reassign\n        }\n    }\n    return rawPos;\n}\nfunction mapImageCustomBit(image, pxData, getPxPos, bpp, bits, maxBit) {\n    var imageWidth = image.width;\n    var imageHeight = image.height;\n    var imagePass = image.index;\n    for(var y = 0; y < imageHeight; y++){\n        for(var x = 0; x < imageWidth; x++){\n            var pixelData = bits.get(bpp);\n            var pxPos = getPxPos(x, y, imagePass);\n            pixelBppCustomMapper[bpp](pxData, pixelData, pxPos, maxBit);\n        }\n        bits.resetAfterLine();\n    }\n}\nexports.dataToBitMap = function(data, bitmapInfo) {\n    var width = bitmapInfo.width;\n    var height = bitmapInfo.height;\n    var depth = bitmapInfo.depth;\n    var bpp = bitmapInfo.bpp;\n    var interlace = bitmapInfo.interlace;\n    if (depth !== 8) {\n        var bits = bitRetriever(data, depth);\n    }\n    var pxData;\n    if (depth <= 8) {\n        pxData = new Buffer(width * height * 4);\n    } else {\n        pxData = new Uint16Array(width * height * 4);\n    }\n    var maxBit = Math.pow(2, depth) - 1;\n    var rawPos = 0;\n    var images;\n    var getPxPos;\n    if (interlace) {\n        images = interlaceUtils.getImagePasses(width, height);\n        getPxPos = interlaceUtils.getInterlaceIterator(width, height);\n    } else {\n        var nonInterlacedPxPos = 0;\n        getPxPos = function() {\n            var returner = nonInterlacedPxPos;\n            nonInterlacedPxPos += 4;\n            return returner;\n        };\n        images = [\n            {\n                width: width,\n                height: height\n            }\n        ];\n    }\n    for(var imageIndex = 0; imageIndex < images.length; imageIndex++){\n        if (depth === 8) {\n            rawPos = mapImage8Bit(images[imageIndex], pxData, getPxPos, bpp, data, rawPos);\n        } else {\n            mapImageCustomBit(images[imageIndex], pxData, getPxPos, bpp, bits, maxBit);\n        }\n    }\n    if (depth === 8) {\n        if (rawPos !== data.length) {\n            throw new Error(\"extra data found\");\n        }\n    } else {\n        bits.end();\n    }\n    return pxData;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/pngjs/lib/bitmapper.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/pngjs/lib/bitpacker.js":
/*!**********************************************!*\
  !*** ../node_modules/pngjs/lib/bitpacker.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar constants = __webpack_require__(/*! ./constants */ \"(ssr)/../node_modules/pngjs/lib/constants.js\");\nmodule.exports = function(dataIn, width, height, options) {\n    var outHasAlpha = [\n        constants.COLORTYPE_COLOR_ALPHA,\n        constants.COLORTYPE_ALPHA\n    ].indexOf(options.colorType) !== -1;\n    if (options.colorType === options.inputColorType) {\n        var bigEndian = function() {\n            var buffer = new ArrayBuffer(2);\n            new DataView(buffer).setInt16(0, 256, true);\n            // Int16Array uses the platform's endianness.\n            return new Int16Array(buffer)[0] !== 256;\n        }();\n        // If no need to convert to grayscale and alpha is present/absent in both, take a fast route\n        if (options.bitDepth === 8 || options.bitDepth === 16 && bigEndian) {\n            return dataIn;\n        }\n    }\n    // map to a UInt16 array if data is 16bit, fix endianness below\n    var data = options.bitDepth !== 16 ? dataIn : new Uint16Array(dataIn.buffer);\n    var maxValue = 255;\n    var inBpp = constants.COLORTYPE_TO_BPP_MAP[options.inputColorType];\n    if (inBpp === 4 && !options.inputHasAlpha) {\n        inBpp = 3;\n    }\n    var outBpp = constants.COLORTYPE_TO_BPP_MAP[options.colorType];\n    if (options.bitDepth === 16) {\n        maxValue = 65535;\n        outBpp *= 2;\n    }\n    var outData = new Buffer(width * height * outBpp);\n    var inIndex = 0;\n    var outIndex = 0;\n    var bgColor = options.bgColor || {};\n    if (bgColor.red === undefined) {\n        bgColor.red = maxValue;\n    }\n    if (bgColor.green === undefined) {\n        bgColor.green = maxValue;\n    }\n    if (bgColor.blue === undefined) {\n        bgColor.blue = maxValue;\n    }\n    function getRGBA() {\n        var red;\n        var green;\n        var blue;\n        var alpha = maxValue;\n        switch(options.inputColorType){\n            case constants.COLORTYPE_COLOR_ALPHA:\n                alpha = data[inIndex + 3];\n                red = data[inIndex];\n                green = data[inIndex + 1];\n                blue = data[inIndex + 2];\n                break;\n            case constants.COLORTYPE_COLOR:\n                red = data[inIndex];\n                green = data[inIndex + 1];\n                blue = data[inIndex + 2];\n                break;\n            case constants.COLORTYPE_ALPHA:\n                alpha = data[inIndex + 1];\n                red = data[inIndex];\n                green = red;\n                blue = red;\n                break;\n            case constants.COLORTYPE_GRAYSCALE:\n                red = data[inIndex];\n                green = red;\n                blue = red;\n                break;\n            default:\n                throw new Error(\"input color type:\" + options.inputColorType + \" is not supported at present\");\n        }\n        if (options.inputHasAlpha) {\n            if (!outHasAlpha) {\n                alpha /= maxValue;\n                red = Math.min(Math.max(Math.round((1 - alpha) * bgColor.red + alpha * red), 0), maxValue);\n                green = Math.min(Math.max(Math.round((1 - alpha) * bgColor.green + alpha * green), 0), maxValue);\n                blue = Math.min(Math.max(Math.round((1 - alpha) * bgColor.blue + alpha * blue), 0), maxValue);\n            }\n        }\n        return {\n            red: red,\n            green: green,\n            blue: blue,\n            alpha: alpha\n        };\n    }\n    for(var y = 0; y < height; y++){\n        for(var x = 0; x < width; x++){\n            var rgba = getRGBA(data, inIndex);\n            switch(options.colorType){\n                case constants.COLORTYPE_COLOR_ALPHA:\n                case constants.COLORTYPE_COLOR:\n                    if (options.bitDepth === 8) {\n                        outData[outIndex] = rgba.red;\n                        outData[outIndex + 1] = rgba.green;\n                        outData[outIndex + 2] = rgba.blue;\n                        if (outHasAlpha) {\n                            outData[outIndex + 3] = rgba.alpha;\n                        }\n                    } else {\n                        outData.writeUInt16BE(rgba.red, outIndex);\n                        outData.writeUInt16BE(rgba.green, outIndex + 2);\n                        outData.writeUInt16BE(rgba.blue, outIndex + 4);\n                        if (outHasAlpha) {\n                            outData.writeUInt16BE(rgba.alpha, outIndex + 6);\n                        }\n                    }\n                    break;\n                case constants.COLORTYPE_ALPHA:\n                case constants.COLORTYPE_GRAYSCALE:\n                    // Convert to grayscale and alpha\n                    var grayscale = (rgba.red + rgba.green + rgba.blue) / 3;\n                    if (options.bitDepth === 8) {\n                        outData[outIndex] = grayscale;\n                        if (outHasAlpha) {\n                            outData[outIndex + 1] = rgba.alpha;\n                        }\n                    } else {\n                        outData.writeUInt16BE(grayscale, outIndex);\n                        if (outHasAlpha) {\n                            outData.writeUInt16BE(rgba.alpha, outIndex + 2);\n                        }\n                    }\n                    break;\n                default:\n                    throw new Error(\"unrecognised color Type \" + options.colorType);\n            }\n            inIndex += inBpp;\n            outIndex += outBpp;\n        }\n    }\n    return outData;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL3BuZ2pzL2xpYi9iaXRwYWNrZXIuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxZQUFZQyxtQkFBT0EsQ0FBQztBQUV4QkMsT0FBT0MsT0FBTyxHQUFHLFNBQVNDLE1BQU0sRUFBRUMsS0FBSyxFQUFFQyxNQUFNLEVBQUVDLE9BQU87SUFDdEQsSUFBSUMsY0FBYztRQUFDUixVQUFVUyxxQkFBcUI7UUFBRVQsVUFBVVUsZUFBZTtLQUFDLENBQUNDLE9BQU8sQ0FBQ0osUUFBUUssU0FBUyxNQUFNLENBQUM7SUFDL0csSUFBSUwsUUFBUUssU0FBUyxLQUFLTCxRQUFRTSxjQUFjLEVBQUU7UUFDaEQsSUFBSUMsWUFBWTtZQUNkLElBQUlDLFNBQVMsSUFBSUMsWUFBWTtZQUM3QixJQUFJQyxTQUFTRixRQUFRRyxRQUFRLENBQUMsR0FBRyxLQUFLO1lBQ3RDLDZDQUE2QztZQUM3QyxPQUFPLElBQUlDLFdBQVdKLE9BQU8sQ0FBQyxFQUFFLEtBQUs7UUFDdkM7UUFDQSw0RkFBNEY7UUFDNUYsSUFBSVIsUUFBUWEsUUFBUSxLQUFLLEtBQU1iLFFBQVFhLFFBQVEsS0FBSyxNQUFNTixXQUFZO1lBQ3BFLE9BQU9WO1FBQ1Q7SUFDRjtJQUVBLCtEQUErRDtJQUMvRCxJQUFJaUIsT0FBT2QsUUFBUWEsUUFBUSxLQUFLLEtBQUtoQixTQUFTLElBQUlrQixZQUFZbEIsT0FBT1csTUFBTTtJQUUzRSxJQUFJUSxXQUFXO0lBQ2YsSUFBSUMsUUFBUXhCLFVBQVV5QixvQkFBb0IsQ0FBQ2xCLFFBQVFNLGNBQWMsQ0FBQztJQUNsRSxJQUFJVyxVQUFVLEtBQUssQ0FBQ2pCLFFBQVFtQixhQUFhLEVBQUU7UUFDekNGLFFBQVE7SUFDVjtJQUNBLElBQUlHLFNBQVMzQixVQUFVeUIsb0JBQW9CLENBQUNsQixRQUFRSyxTQUFTLENBQUM7SUFDOUQsSUFBSUwsUUFBUWEsUUFBUSxLQUFLLElBQUk7UUFDM0JHLFdBQVc7UUFDWEksVUFBVTtJQUNaO0lBQ0EsSUFBSUMsVUFBVSxJQUFJQyxPQUFPeEIsUUFBUUMsU0FBU3FCO0lBRTFDLElBQUlHLFVBQVU7SUFDZCxJQUFJQyxXQUFXO0lBRWYsSUFBSUMsVUFBVXpCLFFBQVF5QixPQUFPLElBQUksQ0FBQztJQUNsQyxJQUFJQSxRQUFRQyxHQUFHLEtBQUtDLFdBQVc7UUFDN0JGLFFBQVFDLEdBQUcsR0FBR1Y7SUFDaEI7SUFDQSxJQUFJUyxRQUFRRyxLQUFLLEtBQUtELFdBQVc7UUFDL0JGLFFBQVFHLEtBQUssR0FBR1o7SUFDbEI7SUFDQSxJQUFJUyxRQUFRSSxJQUFJLEtBQUtGLFdBQVc7UUFDOUJGLFFBQVFJLElBQUksR0FBR2I7SUFDakI7SUFFQSxTQUFTYztRQUNQLElBQUlKO1FBQ0osSUFBSUU7UUFDSixJQUFJQztRQUNKLElBQUlFLFFBQVFmO1FBQ1osT0FBUWhCLFFBQVFNLGNBQWM7WUFDNUIsS0FBS2IsVUFBVVMscUJBQXFCO2dCQUNsQzZCLFFBQVFqQixJQUFJLENBQUNTLFVBQVUsRUFBRTtnQkFDekJHLE1BQU1aLElBQUksQ0FBQ1MsUUFBUTtnQkFDbkJLLFFBQVFkLElBQUksQ0FBQ1MsVUFBVSxFQUFFO2dCQUN6Qk0sT0FBT2YsSUFBSSxDQUFDUyxVQUFVLEVBQUU7Z0JBQ3hCO1lBQ0YsS0FBSzlCLFVBQVV1QyxlQUFlO2dCQUM1Qk4sTUFBTVosSUFBSSxDQUFDUyxRQUFRO2dCQUNuQkssUUFBUWQsSUFBSSxDQUFDUyxVQUFVLEVBQUU7Z0JBQ3pCTSxPQUFPZixJQUFJLENBQUNTLFVBQVUsRUFBRTtnQkFDeEI7WUFDRixLQUFLOUIsVUFBVVUsZUFBZTtnQkFDNUI0QixRQUFRakIsSUFBSSxDQUFDUyxVQUFVLEVBQUU7Z0JBQ3pCRyxNQUFNWixJQUFJLENBQUNTLFFBQVE7Z0JBQ25CSyxRQUFRRjtnQkFDUkcsT0FBT0g7Z0JBQ1A7WUFDRixLQUFLakMsVUFBVXdDLG1CQUFtQjtnQkFDaENQLE1BQU1aLElBQUksQ0FBQ1MsUUFBUTtnQkFDbkJLLFFBQVFGO2dCQUNSRyxPQUFPSDtnQkFDUDtZQUNGO2dCQUNFLE1BQU0sSUFBSVEsTUFBTSxzQkFBc0JsQyxRQUFRTSxjQUFjLEdBQUc7UUFDbkU7UUFFQSxJQUFJTixRQUFRbUIsYUFBYSxFQUFFO1lBQ3pCLElBQUksQ0FBQ2xCLGFBQWE7Z0JBQ2hCOEIsU0FBU2Y7Z0JBQ1RVLE1BQU1TLEtBQUtDLEdBQUcsQ0FBQ0QsS0FBS0UsR0FBRyxDQUFDRixLQUFLRyxLQUFLLENBQUMsQ0FBQyxJQUFJUCxLQUFJLElBQUtOLFFBQVFDLEdBQUcsR0FBR0ssUUFBUUwsTUFBTSxJQUFJVjtnQkFDakZZLFFBQVFPLEtBQUtDLEdBQUcsQ0FBQ0QsS0FBS0UsR0FBRyxDQUFDRixLQUFLRyxLQUFLLENBQUMsQ0FBQyxJQUFJUCxLQUFJLElBQUtOLFFBQVFHLEtBQUssR0FBR0csUUFBUUgsUUFBUSxJQUFJWjtnQkFDdkZhLE9BQU9NLEtBQUtDLEdBQUcsQ0FBQ0QsS0FBS0UsR0FBRyxDQUFDRixLQUFLRyxLQUFLLENBQUMsQ0FBQyxJQUFJUCxLQUFJLElBQUtOLFFBQVFJLElBQUksR0FBR0UsUUFBUUYsT0FBTyxJQUFJYjtZQUN0RjtRQUNGO1FBQ0EsT0FBTztZQUFFVSxLQUFLQTtZQUFLRSxPQUFPQTtZQUFPQyxNQUFNQTtZQUFNRSxPQUFPQTtRQUFNO0lBQzVEO0lBRUEsSUFBSyxJQUFJUSxJQUFJLEdBQUdBLElBQUl4QyxRQUFRd0MsSUFBSztRQUMvQixJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSTFDLE9BQU8wQyxJQUFLO1lBQzlCLElBQUlDLE9BQU9YLFFBQVFoQixNQUFNUztZQUV6QixPQUFRdkIsUUFBUUssU0FBUztnQkFDdkIsS0FBS1osVUFBVVMscUJBQXFCO2dCQUNwQyxLQUFLVCxVQUFVdUMsZUFBZTtvQkFDNUIsSUFBSWhDLFFBQVFhLFFBQVEsS0FBSyxHQUFHO3dCQUMxQlEsT0FBTyxDQUFDRyxTQUFTLEdBQUdpQixLQUFLZixHQUFHO3dCQUM1QkwsT0FBTyxDQUFDRyxXQUFXLEVBQUUsR0FBR2lCLEtBQUtiLEtBQUs7d0JBQ2xDUCxPQUFPLENBQUNHLFdBQVcsRUFBRSxHQUFHaUIsS0FBS1osSUFBSTt3QkFDakMsSUFBSTVCLGFBQWE7NEJBQ2ZvQixPQUFPLENBQUNHLFdBQVcsRUFBRSxHQUFHaUIsS0FBS1YsS0FBSzt3QkFDcEM7b0JBQ0YsT0FDSzt3QkFDSFYsUUFBUXFCLGFBQWEsQ0FBQ0QsS0FBS2YsR0FBRyxFQUFFRjt3QkFDaENILFFBQVFxQixhQUFhLENBQUNELEtBQUtiLEtBQUssRUFBRUosV0FBVzt3QkFDN0NILFFBQVFxQixhQUFhLENBQUNELEtBQUtaLElBQUksRUFBRUwsV0FBVzt3QkFDNUMsSUFBSXZCLGFBQWE7NEJBQ2ZvQixRQUFRcUIsYUFBYSxDQUFDRCxLQUFLVixLQUFLLEVBQUVQLFdBQVc7d0JBQy9DO29CQUNGO29CQUNBO2dCQUNGLEtBQUsvQixVQUFVVSxlQUFlO2dCQUM5QixLQUFLVixVQUFVd0MsbUJBQW1CO29CQUNoQyxpQ0FBaUM7b0JBQ2pDLElBQUlVLFlBQVksQ0FBQ0YsS0FBS2YsR0FBRyxHQUFHZSxLQUFLYixLQUFLLEdBQUdhLEtBQUtaLElBQUksSUFBSTtvQkFDdEQsSUFBSTdCLFFBQVFhLFFBQVEsS0FBSyxHQUFHO3dCQUMxQlEsT0FBTyxDQUFDRyxTQUFTLEdBQUdtQjt3QkFDcEIsSUFBSTFDLGFBQWE7NEJBQ2ZvQixPQUFPLENBQUNHLFdBQVcsRUFBRSxHQUFHaUIsS0FBS1YsS0FBSzt3QkFDcEM7b0JBQ0YsT0FDSzt3QkFDSFYsUUFBUXFCLGFBQWEsQ0FBQ0MsV0FBV25CO3dCQUNqQyxJQUFJdkIsYUFBYTs0QkFDZm9CLFFBQVFxQixhQUFhLENBQUNELEtBQUtWLEtBQUssRUFBRVAsV0FBVzt3QkFDL0M7b0JBQ0Y7b0JBQ0E7Z0JBQ0Y7b0JBQ0UsTUFBTSxJQUFJVSxNQUFNLDZCQUE2QmxDLFFBQVFLLFNBQVM7WUFDbEU7WUFFQWtCLFdBQVdOO1lBQ1hPLFlBQVlKO1FBQ2Q7SUFDRjtJQUVBLE9BQU9DO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3BuZ2pzL2xpYi9iaXRwYWNrZXIuanM/ZTA2MiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBjb25zdGFudHMgPSByZXF1aXJlKCcuL2NvbnN0YW50cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGRhdGFJbiwgd2lkdGgsIGhlaWdodCwgb3B0aW9ucykge1xuICB2YXIgb3V0SGFzQWxwaGEgPSBbY29uc3RhbnRzLkNPTE9SVFlQRV9DT0xPUl9BTFBIQSwgY29uc3RhbnRzLkNPTE9SVFlQRV9BTFBIQV0uaW5kZXhPZihvcHRpb25zLmNvbG9yVHlwZSkgIT09IC0xO1xuICBpZiAob3B0aW9ucy5jb2xvclR5cGUgPT09IG9wdGlvbnMuaW5wdXRDb2xvclR5cGUpIHtcbiAgICB2YXIgYmlnRW5kaWFuID0gKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcigyKTtcbiAgICAgIG5ldyBEYXRhVmlldyhidWZmZXIpLnNldEludDE2KDAsIDI1NiwgdHJ1ZSAvKiBsaXR0bGVFbmRpYW4gKi8pO1xuICAgICAgLy8gSW50MTZBcnJheSB1c2VzIHRoZSBwbGF0Zm9ybSdzIGVuZGlhbm5lc3MuXG4gICAgICByZXR1cm4gbmV3IEludDE2QXJyYXkoYnVmZmVyKVswXSAhPT0gMjU2O1xuICAgIH0pKCk7XG4gICAgLy8gSWYgbm8gbmVlZCB0byBjb252ZXJ0IHRvIGdyYXlzY2FsZSBhbmQgYWxwaGEgaXMgcHJlc2VudC9hYnNlbnQgaW4gYm90aCwgdGFrZSBhIGZhc3Qgcm91dGVcbiAgICBpZiAob3B0aW9ucy5iaXREZXB0aCA9PT0gOCB8fCAob3B0aW9ucy5iaXREZXB0aCA9PT0gMTYgJiYgYmlnRW5kaWFuKSkge1xuICAgICAgcmV0dXJuIGRhdGFJbjtcbiAgICB9XG4gIH1cblxuICAvLyBtYXAgdG8gYSBVSW50MTYgYXJyYXkgaWYgZGF0YSBpcyAxNmJpdCwgZml4IGVuZGlhbm5lc3MgYmVsb3dcbiAgdmFyIGRhdGEgPSBvcHRpb25zLmJpdERlcHRoICE9PSAxNiA/IGRhdGFJbiA6IG5ldyBVaW50MTZBcnJheShkYXRhSW4uYnVmZmVyKTtcblxuICB2YXIgbWF4VmFsdWUgPSAyNTU7XG4gIHZhciBpbkJwcCA9IGNvbnN0YW50cy5DT0xPUlRZUEVfVE9fQlBQX01BUFtvcHRpb25zLmlucHV0Q29sb3JUeXBlXTtcbiAgaWYgKGluQnBwID09PSA0ICYmICFvcHRpb25zLmlucHV0SGFzQWxwaGEpIHtcbiAgICBpbkJwcCA9IDM7XG4gIH1cbiAgdmFyIG91dEJwcCA9IGNvbnN0YW50cy5DT0xPUlRZUEVfVE9fQlBQX01BUFtvcHRpb25zLmNvbG9yVHlwZV07XG4gIGlmIChvcHRpb25zLmJpdERlcHRoID09PSAxNikge1xuICAgIG1heFZhbHVlID0gNjU1MzU7XG4gICAgb3V0QnBwICo9IDI7XG4gIH1cbiAgdmFyIG91dERhdGEgPSBuZXcgQnVmZmVyKHdpZHRoICogaGVpZ2h0ICogb3V0QnBwKTtcblxuICB2YXIgaW5JbmRleCA9IDA7XG4gIHZhciBvdXRJbmRleCA9IDA7XG5cbiAgdmFyIGJnQ29sb3IgPSBvcHRpb25zLmJnQ29sb3IgfHwge307XG4gIGlmIChiZ0NvbG9yLnJlZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYmdDb2xvci5yZWQgPSBtYXhWYWx1ZTtcbiAgfVxuICBpZiAoYmdDb2xvci5ncmVlbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYmdDb2xvci5ncmVlbiA9IG1heFZhbHVlO1xuICB9XG4gIGlmIChiZ0NvbG9yLmJsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgIGJnQ29sb3IuYmx1ZSA9IG1heFZhbHVlO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0UkdCQSgpIHtcbiAgICB2YXIgcmVkO1xuICAgIHZhciBncmVlbjtcbiAgICB2YXIgYmx1ZTtcbiAgICB2YXIgYWxwaGEgPSBtYXhWYWx1ZTtcbiAgICBzd2l0Y2ggKG9wdGlvbnMuaW5wdXRDb2xvclR5cGUpIHtcbiAgICAgIGNhc2UgY29uc3RhbnRzLkNPTE9SVFlQRV9DT0xPUl9BTFBIQTpcbiAgICAgICAgYWxwaGEgPSBkYXRhW2luSW5kZXggKyAzXTtcbiAgICAgICAgcmVkID0gZGF0YVtpbkluZGV4XTtcbiAgICAgICAgZ3JlZW4gPSBkYXRhW2luSW5kZXggKyAxXTtcbiAgICAgICAgYmx1ZSA9IGRhdGFbaW5JbmRleCArIDJdO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgY29uc3RhbnRzLkNPTE9SVFlQRV9DT0xPUjpcbiAgICAgICAgcmVkID0gZGF0YVtpbkluZGV4XTtcbiAgICAgICAgZ3JlZW4gPSBkYXRhW2luSW5kZXggKyAxXTtcbiAgICAgICAgYmx1ZSA9IGRhdGFbaW5JbmRleCArIDJdO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgY29uc3RhbnRzLkNPTE9SVFlQRV9BTFBIQTpcbiAgICAgICAgYWxwaGEgPSBkYXRhW2luSW5kZXggKyAxXTtcbiAgICAgICAgcmVkID0gZGF0YVtpbkluZGV4XTtcbiAgICAgICAgZ3JlZW4gPSByZWQ7XG4gICAgICAgIGJsdWUgPSByZWQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBjb25zdGFudHMuQ09MT1JUWVBFX0dSQVlTQ0FMRTpcbiAgICAgICAgcmVkID0gZGF0YVtpbkluZGV4XTtcbiAgICAgICAgZ3JlZW4gPSByZWQ7XG4gICAgICAgIGJsdWUgPSByZWQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnB1dCBjb2xvciB0eXBlOicgKyBvcHRpb25zLmlucHV0Q29sb3JUeXBlICsgJyBpcyBub3Qgc3VwcG9ydGVkIGF0IHByZXNlbnQnKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5pbnB1dEhhc0FscGhhKSB7XG4gICAgICBpZiAoIW91dEhhc0FscGhhKSB7XG4gICAgICAgIGFscGhhIC89IG1heFZhbHVlO1xuICAgICAgICByZWQgPSBNYXRoLm1pbihNYXRoLm1heChNYXRoLnJvdW5kKCgxIC0gYWxwaGEpICogYmdDb2xvci5yZWQgKyBhbHBoYSAqIHJlZCksIDApLCBtYXhWYWx1ZSk7XG4gICAgICAgIGdyZWVuID0gTWF0aC5taW4oTWF0aC5tYXgoTWF0aC5yb3VuZCgoMSAtIGFscGhhKSAqIGJnQ29sb3IuZ3JlZW4gKyBhbHBoYSAqIGdyZWVuKSwgMCksIG1heFZhbHVlKTtcbiAgICAgICAgYmx1ZSA9IE1hdGgubWluKE1hdGgubWF4KE1hdGgucm91bmQoKDEgLSBhbHBoYSkgKiBiZ0NvbG9yLmJsdWUgKyBhbHBoYSAqIGJsdWUpLCAwKSwgbWF4VmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4geyByZWQ6IHJlZCwgZ3JlZW46IGdyZWVuLCBibHVlOiBibHVlLCBhbHBoYTogYWxwaGEgfTtcbiAgfVxuXG4gIGZvciAodmFyIHkgPSAwOyB5IDwgaGVpZ2h0OyB5KyspIHtcbiAgICBmb3IgKHZhciB4ID0gMDsgeCA8IHdpZHRoOyB4KyspIHtcbiAgICAgIHZhciByZ2JhID0gZ2V0UkdCQShkYXRhLCBpbkluZGV4KTtcblxuICAgICAgc3dpdGNoIChvcHRpb25zLmNvbG9yVHlwZSkge1xuICAgICAgICBjYXNlIGNvbnN0YW50cy5DT0xPUlRZUEVfQ09MT1JfQUxQSEE6XG4gICAgICAgIGNhc2UgY29uc3RhbnRzLkNPTE9SVFlQRV9DT0xPUjpcbiAgICAgICAgICBpZiAob3B0aW9ucy5iaXREZXB0aCA9PT0gOCkge1xuICAgICAgICAgICAgb3V0RGF0YVtvdXRJbmRleF0gPSByZ2JhLnJlZDtcbiAgICAgICAgICAgIG91dERhdGFbb3V0SW5kZXggKyAxXSA9IHJnYmEuZ3JlZW47XG4gICAgICAgICAgICBvdXREYXRhW291dEluZGV4ICsgMl0gPSByZ2JhLmJsdWU7XG4gICAgICAgICAgICBpZiAob3V0SGFzQWxwaGEpIHtcbiAgICAgICAgICAgICAgb3V0RGF0YVtvdXRJbmRleCArIDNdID0gcmdiYS5hbHBoYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBvdXREYXRhLndyaXRlVUludDE2QkUocmdiYS5yZWQsIG91dEluZGV4KTtcbiAgICAgICAgICAgIG91dERhdGEud3JpdGVVSW50MTZCRShyZ2JhLmdyZWVuLCBvdXRJbmRleCArIDIpO1xuICAgICAgICAgICAgb3V0RGF0YS53cml0ZVVJbnQxNkJFKHJnYmEuYmx1ZSwgb3V0SW5kZXggKyA0KTtcbiAgICAgICAgICAgIGlmIChvdXRIYXNBbHBoYSkge1xuICAgICAgICAgICAgICBvdXREYXRhLndyaXRlVUludDE2QkUocmdiYS5hbHBoYSwgb3V0SW5kZXggKyA2KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgY29uc3RhbnRzLkNPTE9SVFlQRV9BTFBIQTpcbiAgICAgICAgY2FzZSBjb25zdGFudHMuQ09MT1JUWVBFX0dSQVlTQ0FMRTpcbiAgICAgICAgICAvLyBDb252ZXJ0IHRvIGdyYXlzY2FsZSBhbmQgYWxwaGFcbiAgICAgICAgICB2YXIgZ3JheXNjYWxlID0gKHJnYmEucmVkICsgcmdiYS5ncmVlbiArIHJnYmEuYmx1ZSkgLyAzO1xuICAgICAgICAgIGlmIChvcHRpb25zLmJpdERlcHRoID09PSA4KSB7XG4gICAgICAgICAgICBvdXREYXRhW291dEluZGV4XSA9IGdyYXlzY2FsZTtcbiAgICAgICAgICAgIGlmIChvdXRIYXNBbHBoYSkge1xuICAgICAgICAgICAgICBvdXREYXRhW291dEluZGV4ICsgMV0gPSByZ2JhLmFscGhhO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG91dERhdGEud3JpdGVVSW50MTZCRShncmF5c2NhbGUsIG91dEluZGV4KTtcbiAgICAgICAgICAgIGlmIChvdXRIYXNBbHBoYSkge1xuICAgICAgICAgICAgICBvdXREYXRhLndyaXRlVUludDE2QkUocmdiYS5hbHBoYSwgb3V0SW5kZXggKyAyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bnJlY29nbmlzZWQgY29sb3IgVHlwZSAnICsgb3B0aW9ucy5jb2xvclR5cGUpO1xuICAgICAgfVxuXG4gICAgICBpbkluZGV4ICs9IGluQnBwO1xuICAgICAgb3V0SW5kZXggKz0gb3V0QnBwO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvdXREYXRhO1xufTtcbiJdLCJuYW1lcyI6WyJjb25zdGFudHMiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsImRhdGFJbiIsIndpZHRoIiwiaGVpZ2h0Iiwib3B0aW9ucyIsIm91dEhhc0FscGhhIiwiQ09MT1JUWVBFX0NPTE9SX0FMUEhBIiwiQ09MT1JUWVBFX0FMUEhBIiwiaW5kZXhPZiIsImNvbG9yVHlwZSIsImlucHV0Q29sb3JUeXBlIiwiYmlnRW5kaWFuIiwiYnVmZmVyIiwiQXJyYXlCdWZmZXIiLCJEYXRhVmlldyIsInNldEludDE2IiwiSW50MTZBcnJheSIsImJpdERlcHRoIiwiZGF0YSIsIlVpbnQxNkFycmF5IiwibWF4VmFsdWUiLCJpbkJwcCIsIkNPTE9SVFlQRV9UT19CUFBfTUFQIiwiaW5wdXRIYXNBbHBoYSIsIm91dEJwcCIsIm91dERhdGEiLCJCdWZmZXIiLCJpbkluZGV4Iiwib3V0SW5kZXgiLCJiZ0NvbG9yIiwicmVkIiwidW5kZWZpbmVkIiwiZ3JlZW4iLCJibHVlIiwiZ2V0UkdCQSIsImFscGhhIiwiQ09MT1JUWVBFX0NPTE9SIiwiQ09MT1JUWVBFX0dSQVlTQ0FMRSIsIkVycm9yIiwiTWF0aCIsIm1pbiIsIm1heCIsInJvdW5kIiwieSIsIngiLCJyZ2JhIiwid3JpdGVVSW50MTZCRSIsImdyYXlzY2FsZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/pngjs/lib/bitpacker.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/pngjs/lib/chunkstream.js":
/*!************************************************!*\
  !*** ../node_modules/pngjs/lib/chunkstream.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar util = __webpack_require__(/*! util */ \"util\");\nvar Stream = __webpack_require__(/*! stream */ \"stream\");\nvar ChunkStream = module.exports = function() {\n    Stream.call(this);\n    this._buffers = [];\n    this._buffered = 0;\n    this._reads = [];\n    this._paused = false;\n    this._encoding = \"utf8\";\n    this.writable = true;\n};\nutil.inherits(ChunkStream, Stream);\nChunkStream.prototype.read = function(length, callback) {\n    this._reads.push({\n        length: Math.abs(length),\n        allowLess: length < 0,\n        func: callback\n    });\n    process.nextTick((function() {\n        this._process();\n        // its paused and there is not enought data then ask for more\n        if (this._paused && this._reads.length > 0) {\n            this._paused = false;\n            this.emit(\"drain\");\n        }\n    }).bind(this));\n};\nChunkStream.prototype.write = function(data, encoding) {\n    if (!this.writable) {\n        this.emit(\"error\", new Error(\"Stream not writable\"));\n        return false;\n    }\n    var dataBuffer;\n    if (Buffer.isBuffer(data)) {\n        dataBuffer = data;\n    } else {\n        dataBuffer = new Buffer(data, encoding || this._encoding);\n    }\n    this._buffers.push(dataBuffer);\n    this._buffered += dataBuffer.length;\n    this._process();\n    // ok if there are no more read requests\n    if (this._reads && this._reads.length === 0) {\n        this._paused = true;\n    }\n    return this.writable && !this._paused;\n};\nChunkStream.prototype.end = function(data, encoding) {\n    if (data) {\n        this.write(data, encoding);\n    }\n    this.writable = false;\n    // already destroyed\n    if (!this._buffers) {\n        return;\n    }\n    // enqueue or handle end\n    if (this._buffers.length === 0) {\n        this._end();\n    } else {\n        this._buffers.push(null);\n        this._process();\n    }\n};\nChunkStream.prototype.destroySoon = ChunkStream.prototype.end;\nChunkStream.prototype._end = function() {\n    if (this._reads.length > 0) {\n        this.emit(\"error\", new Error(\"Unexpected end of input\"));\n    }\n    this.destroy();\n};\nChunkStream.prototype.destroy = function() {\n    if (!this._buffers) {\n        return;\n    }\n    this.writable = false;\n    this._reads = null;\n    this._buffers = null;\n    this.emit(\"close\");\n};\nChunkStream.prototype._processReadAllowingLess = function(read) {\n    // ok there is any data so that we can satisfy this request\n    this._reads.shift(); // == read\n    // first we need to peek into first buffer\n    var smallerBuf = this._buffers[0];\n    // ok there is more data than we need\n    if (smallerBuf.length > read.length) {\n        this._buffered -= read.length;\n        this._buffers[0] = smallerBuf.slice(read.length);\n        read.func.call(this, smallerBuf.slice(0, read.length));\n    } else {\n        // ok this is less than maximum length so use it all\n        this._buffered -= smallerBuf.length;\n        this._buffers.shift(); // == smallerBuf\n        read.func.call(this, smallerBuf);\n    }\n};\nChunkStream.prototype._processRead = function(read) {\n    this._reads.shift(); // == read\n    var pos = 0;\n    var count = 0;\n    var data = new Buffer(read.length);\n    // create buffer for all data\n    while(pos < read.length){\n        var buf = this._buffers[count++];\n        var len = Math.min(buf.length, read.length - pos);\n        buf.copy(data, pos, 0, len);\n        pos += len;\n        // last buffer wasn't used all so just slice it and leave\n        if (len !== buf.length) {\n            this._buffers[--count] = buf.slice(len);\n        }\n    }\n    // remove all used buffers\n    if (count > 0) {\n        this._buffers.splice(0, count);\n    }\n    this._buffered -= read.length;\n    read.func.call(this, data);\n};\nChunkStream.prototype._process = function() {\n    try {\n        // as long as there is any data and read requests\n        while(this._buffered > 0 && this._reads && this._reads.length > 0){\n            var read = this._reads[0];\n            // read any data (but no more than length)\n            if (read.allowLess) {\n                this._processReadAllowingLess(read);\n            } else if (this._buffered >= read.length) {\n                // ok we can meet some expectations\n                this._processRead(read);\n            } else {\n                break;\n            }\n        }\n        if (this._buffers && !this.writable) {\n            this._end();\n        }\n    } catch (ex) {\n        this.emit(\"error\", ex);\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/pngjs/lib/chunkstream.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/pngjs/lib/constants.js":
/*!**********************************************!*\
  !*** ../node_modules/pngjs/lib/constants.js ***!
  \**********************************************/
/***/ ((module) => {

eval("\nmodule.exports = {\n    PNG_SIGNATURE: [\n        0x89,\n        0x50,\n        0x4e,\n        0x47,\n        0x0d,\n        0x0a,\n        0x1a,\n        0x0a\n    ],\n    TYPE_IHDR: 0x49484452,\n    TYPE_IEND: 0x49454e44,\n    TYPE_IDAT: 0x49444154,\n    TYPE_PLTE: 0x504c5445,\n    TYPE_tRNS: 0x74524e53,\n    TYPE_gAMA: 0x67414d41,\n    // color-type bits\n    COLORTYPE_GRAYSCALE: 0,\n    COLORTYPE_PALETTE: 1,\n    COLORTYPE_COLOR: 2,\n    COLORTYPE_ALPHA: 4,\n    // color-type combinations\n    COLORTYPE_PALETTE_COLOR: 3,\n    COLORTYPE_COLOR_ALPHA: 6,\n    COLORTYPE_TO_BPP_MAP: {\n        0: 1,\n        2: 3,\n        3: 1,\n        4: 2,\n        6: 4\n    },\n    GAMMA_DIVISION: 100000\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL3BuZ2pzL2xpYi9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFHQUEsT0FBT0MsT0FBTyxHQUFHO0lBRWZDLGVBQWU7UUFBQztRQUFNO1FBQU07UUFBTTtRQUFNO1FBQU07UUFBTTtRQUFNO0tBQUs7SUFFL0RDLFdBQVc7SUFDWEMsV0FBVztJQUNYQyxXQUFXO0lBQ1hDLFdBQVc7SUFDWEMsV0FBVztJQUNYQyxXQUFXO0lBRVgsa0JBQWtCO0lBQ2xCQyxxQkFBcUI7SUFDckJDLG1CQUFtQjtJQUNuQkMsaUJBQWlCO0lBQ2pCQyxpQkFBaUI7SUFFakIsMEJBQTBCO0lBQzFCQyx5QkFBeUI7SUFDekJDLHVCQUF1QjtJQUV2QkMsc0JBQXNCO1FBQ3BCLEdBQUc7UUFDSCxHQUFHO1FBQ0gsR0FBRztRQUNILEdBQUc7UUFDSCxHQUFHO0lBQ0w7SUFFQUMsZ0JBQWdCO0FBQ2xCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9wbmdqcy9saWIvY29uc3RhbnRzLmpzPzI4NGQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXG4gIFBOR19TSUdOQVRVUkU6IFsweDg5LCAweDUwLCAweDRlLCAweDQ3LCAweDBkLCAweDBhLCAweDFhLCAweDBhXSxcblxuICBUWVBFX0lIRFI6IDB4NDk0ODQ0NTIsXG4gIFRZUEVfSUVORDogMHg0OTQ1NGU0NCxcbiAgVFlQRV9JREFUOiAweDQ5NDQ0MTU0LFxuICBUWVBFX1BMVEU6IDB4NTA0YzU0NDUsXG4gIFRZUEVfdFJOUzogMHg3NDUyNGU1MywgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjYW1lbGNhc2VcbiAgVFlQRV9nQU1BOiAweDY3NDE0ZDQxLCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNhbWVsY2FzZVxuXG4gIC8vIGNvbG9yLXR5cGUgYml0c1xuICBDT0xPUlRZUEVfR1JBWVNDQUxFOiAwLFxuICBDT0xPUlRZUEVfUEFMRVRURTogMSxcbiAgQ09MT1JUWVBFX0NPTE9SOiAyLFxuICBDT0xPUlRZUEVfQUxQSEE6IDQsIC8vIGUuZy4gZ3JheXNjYWxlIGFuZCBhbHBoYVxuXG4gIC8vIGNvbG9yLXR5cGUgY29tYmluYXRpb25zXG4gIENPTE9SVFlQRV9QQUxFVFRFX0NPTE9SOiAzLFxuICBDT0xPUlRZUEVfQ09MT1JfQUxQSEE6IDYsXG5cbiAgQ09MT1JUWVBFX1RPX0JQUF9NQVA6IHtcbiAgICAwOiAxLFxuICAgIDI6IDMsXG4gICAgMzogMSxcbiAgICA0OiAyLFxuICAgIDY6IDRcbiAgfSxcblxuICBHQU1NQV9ESVZJU0lPTjogMTAwMDAwXG59O1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJQTkdfU0lHTkFUVVJFIiwiVFlQRV9JSERSIiwiVFlQRV9JRU5EIiwiVFlQRV9JREFUIiwiVFlQRV9QTFRFIiwiVFlQRV90Uk5TIiwiVFlQRV9nQU1BIiwiQ09MT1JUWVBFX0dSQVlTQ0FMRSIsIkNPTE9SVFlQRV9QQUxFVFRFIiwiQ09MT1JUWVBFX0NPTE9SIiwiQ09MT1JUWVBFX0FMUEhBIiwiQ09MT1JUWVBFX1BBTEVUVEVfQ09MT1IiLCJDT0xPUlRZUEVfQ09MT1JfQUxQSEEiLCJDT0xPUlRZUEVfVE9fQlBQX01BUCIsIkdBTU1BX0RJVklTSU9OIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/pngjs/lib/constants.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/pngjs/lib/crc.js":
/*!****************************************!*\
  !*** ../node_modules/pngjs/lib/crc.js ***!
  \****************************************/
/***/ ((module) => {

eval("\nvar crcTable = [];\n(function() {\n    for(var i = 0; i < 256; i++){\n        var currentCrc = i;\n        for(var j = 0; j < 8; j++){\n            if (currentCrc & 1) {\n                currentCrc = 0xedb88320 ^ currentCrc >>> 1;\n            } else {\n                currentCrc = currentCrc >>> 1;\n            }\n        }\n        crcTable[i] = currentCrc;\n    }\n})();\nvar CrcCalculator = module.exports = function() {\n    this._crc = -1;\n};\nCrcCalculator.prototype.write = function(data) {\n    for(var i = 0; i < data.length; i++){\n        this._crc = crcTable[(this._crc ^ data[i]) & 0xff] ^ this._crc >>> 8;\n    }\n    return true;\n};\nCrcCalculator.prototype.crc32 = function() {\n    return this._crc ^ -1;\n};\nCrcCalculator.crc32 = function(buf) {\n    var crc = -1;\n    for(var i = 0; i < buf.length; i++){\n        crc = crcTable[(crc ^ buf[i]) & 0xff] ^ crc >>> 8;\n    }\n    return crc ^ -1;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL3BuZ2pzL2xpYi9jcmMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxXQUFXLEVBQUU7QUFFaEI7SUFDQyxJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSSxLQUFLQSxJQUFLO1FBQzVCLElBQUlDLGFBQWFEO1FBQ2pCLElBQUssSUFBSUUsSUFBSSxHQUFHQSxJQUFJLEdBQUdBLElBQUs7WUFDMUIsSUFBSUQsYUFBYSxHQUFHO2dCQUNsQkEsYUFBYSxhQUFjQSxlQUFlO1lBQzVDLE9BQ0s7Z0JBQ0hBLGFBQWFBLGVBQWU7WUFDOUI7UUFDRjtRQUNBRixRQUFRLENBQUNDLEVBQUUsR0FBR0M7SUFDaEI7QUFDRjtBQUVBLElBQUlFLGdCQUFnQkMsT0FBT0MsT0FBTyxHQUFHO0lBQ25DLElBQUksQ0FBQ0MsSUFBSSxHQUFHLENBQUM7QUFDZjtBQUVBSCxjQUFjSSxTQUFTLENBQUNDLEtBQUssR0FBRyxTQUFTQyxJQUFJO0lBRTNDLElBQUssSUFBSVQsSUFBSSxHQUFHQSxJQUFJUyxLQUFLQyxNQUFNLEVBQUVWLElBQUs7UUFDcEMsSUFBSSxDQUFDTSxJQUFJLEdBQUdQLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQ08sSUFBSSxHQUFHRyxJQUFJLENBQUNULEVBQUUsSUFBSSxLQUFLLEdBQUksSUFBSSxDQUFDTSxJQUFJLEtBQUs7SUFDdEU7SUFDQSxPQUFPO0FBQ1Q7QUFFQUgsY0FBY0ksU0FBUyxDQUFDSSxLQUFLLEdBQUc7SUFDOUIsT0FBTyxJQUFJLENBQUNMLElBQUksR0FBRyxDQUFDO0FBQ3RCO0FBR0FILGNBQWNRLEtBQUssR0FBRyxTQUFTQyxHQUFHO0lBRWhDLElBQUlDLE1BQU0sQ0FBQztJQUNYLElBQUssSUFBSWIsSUFBSSxHQUFHQSxJQUFJWSxJQUFJRixNQUFNLEVBQUVWLElBQUs7UUFDbkNhLE1BQU1kLFFBQVEsQ0FBQyxDQUFDYyxNQUFNRCxHQUFHLENBQUNaLEVBQUUsSUFBSSxLQUFLLEdBQUlhLFFBQVE7SUFDbkQ7SUFDQSxPQUFPQSxNQUFNLENBQUM7QUFDaEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3BuZ2pzL2xpYi9jcmMuanM/NmY2YyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBjcmNUYWJsZSA9IFtdO1xuXG4oZnVuY3Rpb24oKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMjU2OyBpKyspIHtcbiAgICB2YXIgY3VycmVudENyYyA9IGk7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCA4OyBqKyspIHtcbiAgICAgIGlmIChjdXJyZW50Q3JjICYgMSkge1xuICAgICAgICBjdXJyZW50Q3JjID0gMHhlZGI4ODMyMCBeIChjdXJyZW50Q3JjID4+PiAxKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBjdXJyZW50Q3JjID0gY3VycmVudENyYyA+Pj4gMTtcbiAgICAgIH1cbiAgICB9XG4gICAgY3JjVGFibGVbaV0gPSBjdXJyZW50Q3JjO1xuICB9XG59KCkpO1xuXG52YXIgQ3JjQ2FsY3VsYXRvciA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX2NyYyA9IC0xO1xufTtcblxuQ3JjQ2FsY3VsYXRvci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbihkYXRhKSB7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgdGhpcy5fY3JjID0gY3JjVGFibGVbKHRoaXMuX2NyYyBeIGRhdGFbaV0pICYgMHhmZl0gXiAodGhpcy5fY3JjID4+PiA4KTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbkNyY0NhbGN1bGF0b3IucHJvdG90eXBlLmNyYzMyID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLl9jcmMgXiAtMTtcbn07XG5cblxuQ3JjQ2FsY3VsYXRvci5jcmMzMiA9IGZ1bmN0aW9uKGJ1Zikge1xuXG4gIHZhciBjcmMgPSAtMTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBidWYubGVuZ3RoOyBpKyspIHtcbiAgICBjcmMgPSBjcmNUYWJsZVsoY3JjIF4gYnVmW2ldKSAmIDB4ZmZdIF4gKGNyYyA+Pj4gOCk7XG4gIH1cbiAgcmV0dXJuIGNyYyBeIC0xO1xufTtcbiJdLCJuYW1lcyI6WyJjcmNUYWJsZSIsImkiLCJjdXJyZW50Q3JjIiwiaiIsIkNyY0NhbGN1bGF0b3IiLCJtb2R1bGUiLCJleHBvcnRzIiwiX2NyYyIsInByb3RvdHlwZSIsIndyaXRlIiwiZGF0YSIsImxlbmd0aCIsImNyYzMyIiwiYnVmIiwiY3JjIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/pngjs/lib/crc.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/pngjs/lib/filter-pack.js":
/*!************************************************!*\
  !*** ../node_modules/pngjs/lib/filter-pack.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar paethPredictor = __webpack_require__(/*! ./paeth-predictor */ \"(ssr)/../node_modules/pngjs/lib/paeth-predictor.js\");\nfunction filterNone(pxData, pxPos, byteWidth, rawData, rawPos) {\n    for(var x = 0; x < byteWidth; x++){\n        rawData[rawPos + x] = pxData[pxPos + x];\n    }\n}\nfunction filterSumNone(pxData, pxPos, byteWidth) {\n    var sum = 0;\n    var length = pxPos + byteWidth;\n    for(var i = pxPos; i < length; i++){\n        sum += Math.abs(pxData[i]);\n    }\n    return sum;\n}\nfunction filterSub(pxData, pxPos, byteWidth, rawData, rawPos, bpp) {\n    for(var x = 0; x < byteWidth; x++){\n        var left = x >= bpp ? pxData[pxPos + x - bpp] : 0;\n        var val = pxData[pxPos + x] - left;\n        rawData[rawPos + x] = val;\n    }\n}\nfunction filterSumSub(pxData, pxPos, byteWidth, bpp) {\n    var sum = 0;\n    for(var x = 0; x < byteWidth; x++){\n        var left = x >= bpp ? pxData[pxPos + x - bpp] : 0;\n        var val = pxData[pxPos + x] - left;\n        sum += Math.abs(val);\n    }\n    return sum;\n}\nfunction filterUp(pxData, pxPos, byteWidth, rawData, rawPos) {\n    for(var x = 0; x < byteWidth; x++){\n        var up = pxPos > 0 ? pxData[pxPos + x - byteWidth] : 0;\n        var val = pxData[pxPos + x] - up;\n        rawData[rawPos + x] = val;\n    }\n}\nfunction filterSumUp(pxData, pxPos, byteWidth) {\n    var sum = 0;\n    var length = pxPos + byteWidth;\n    for(var x = pxPos; x < length; x++){\n        var up = pxPos > 0 ? pxData[x - byteWidth] : 0;\n        var val = pxData[x] - up;\n        sum += Math.abs(val);\n    }\n    return sum;\n}\nfunction filterAvg(pxData, pxPos, byteWidth, rawData, rawPos, bpp) {\n    for(var x = 0; x < byteWidth; x++){\n        var left = x >= bpp ? pxData[pxPos + x - bpp] : 0;\n        var up = pxPos > 0 ? pxData[pxPos + x - byteWidth] : 0;\n        var val = pxData[pxPos + x] - (left + up >> 1);\n        rawData[rawPos + x] = val;\n    }\n}\nfunction filterSumAvg(pxData, pxPos, byteWidth, bpp) {\n    var sum = 0;\n    for(var x = 0; x < byteWidth; x++){\n        var left = x >= bpp ? pxData[pxPos + x - bpp] : 0;\n        var up = pxPos > 0 ? pxData[pxPos + x - byteWidth] : 0;\n        var val = pxData[pxPos + x] - (left + up >> 1);\n        sum += Math.abs(val);\n    }\n    return sum;\n}\nfunction filterPaeth(pxData, pxPos, byteWidth, rawData, rawPos, bpp) {\n    for(var x = 0; x < byteWidth; x++){\n        var left = x >= bpp ? pxData[pxPos + x - bpp] : 0;\n        var up = pxPos > 0 ? pxData[pxPos + x - byteWidth] : 0;\n        var upleft = pxPos > 0 && x >= bpp ? pxData[pxPos + x - (byteWidth + bpp)] : 0;\n        var val = pxData[pxPos + x] - paethPredictor(left, up, upleft);\n        rawData[rawPos + x] = val;\n    }\n}\nfunction filterSumPaeth(pxData, pxPos, byteWidth, bpp) {\n    var sum = 0;\n    for(var x = 0; x < byteWidth; x++){\n        var left = x >= bpp ? pxData[pxPos + x - bpp] : 0;\n        var up = pxPos > 0 ? pxData[pxPos + x - byteWidth] : 0;\n        var upleft = pxPos > 0 && x >= bpp ? pxData[pxPos + x - (byteWidth + bpp)] : 0;\n        var val = pxData[pxPos + x] - paethPredictor(left, up, upleft);\n        sum += Math.abs(val);\n    }\n    return sum;\n}\nvar filters = {\n    0: filterNone,\n    1: filterSub,\n    2: filterUp,\n    3: filterAvg,\n    4: filterPaeth\n};\nvar filterSums = {\n    0: filterSumNone,\n    1: filterSumSub,\n    2: filterSumUp,\n    3: filterSumAvg,\n    4: filterSumPaeth\n};\nmodule.exports = function(pxData, width, height, options, bpp) {\n    var filterTypes;\n    if (!(\"filterType\" in options) || options.filterType === -1) {\n        filterTypes = [\n            0,\n            1,\n            2,\n            3,\n            4\n        ];\n    } else if (typeof options.filterType === \"number\") {\n        filterTypes = [\n            options.filterType\n        ];\n    } else {\n        throw new Error(\"unrecognised filter types\");\n    }\n    if (options.bitDepth === 16) {\n        bpp *= 2;\n    }\n    var byteWidth = width * bpp;\n    var rawPos = 0;\n    var pxPos = 0;\n    var rawData = new Buffer((byteWidth + 1) * height);\n    var sel = filterTypes[0];\n    for(var y = 0; y < height; y++){\n        if (filterTypes.length > 1) {\n            // find best filter for this line (with lowest sum of values)\n            var min = Infinity;\n            for(var i = 0; i < filterTypes.length; i++){\n                var sum = filterSums[filterTypes[i]](pxData, pxPos, byteWidth, bpp);\n                if (sum < min) {\n                    sel = filterTypes[i];\n                    min = sum;\n                }\n            }\n        }\n        rawData[rawPos] = sel;\n        rawPos++;\n        filters[sel](pxData, pxPos, byteWidth, rawData, rawPos, bpp);\n        rawPos += byteWidth;\n        pxPos += byteWidth;\n    }\n    return rawData;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/pngjs/lib/filter-pack.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/pngjs/lib/filter-parse-async.js":
/*!*******************************************************!*\
  !*** ../node_modules/pngjs/lib/filter-parse-async.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar util = __webpack_require__(/*! util */ \"util\");\nvar ChunkStream = __webpack_require__(/*! ./chunkstream */ \"(ssr)/../node_modules/pngjs/lib/chunkstream.js\");\nvar Filter = __webpack_require__(/*! ./filter-parse */ \"(ssr)/../node_modules/pngjs/lib/filter-parse.js\");\nvar FilterAsync = module.exports = function(bitmapInfo) {\n    ChunkStream.call(this);\n    var buffers = [];\n    var that = this;\n    this._filter = new Filter(bitmapInfo, {\n        read: this.read.bind(this),\n        write: function(buffer) {\n            buffers.push(buffer);\n        },\n        complete: function() {\n            that.emit(\"complete\", Buffer.concat(buffers));\n        }\n    });\n    this._filter.start();\n};\nutil.inherits(FilterAsync, ChunkStream);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL3BuZ2pzL2xpYi9maWx0ZXItcGFyc2UtYXN5bmMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxPQUFPQyxtQkFBT0EsQ0FBQztBQUNuQixJQUFJQyxjQUFjRCxtQkFBT0EsQ0FBQztBQUMxQixJQUFJRSxTQUFTRixtQkFBT0EsQ0FBQztBQUdyQixJQUFJRyxjQUFjQyxPQUFPQyxPQUFPLEdBQUcsU0FBU0MsVUFBVTtJQUNwREwsWUFBWU0sSUFBSSxDQUFDLElBQUk7SUFFckIsSUFBSUMsVUFBVSxFQUFFO0lBQ2hCLElBQUlDLE9BQU8sSUFBSTtJQUNmLElBQUksQ0FBQ0MsT0FBTyxHQUFHLElBQUlSLE9BQU9JLFlBQVk7UUFDcENLLE1BQU0sSUFBSSxDQUFDQSxJQUFJLENBQUNDLElBQUksQ0FBQyxJQUFJO1FBQ3pCQyxPQUFPLFNBQVNDLE1BQU07WUFDcEJOLFFBQVFPLElBQUksQ0FBQ0Q7UUFDZjtRQUNBRSxVQUFVO1lBQ1JQLEtBQUtRLElBQUksQ0FBQyxZQUFZQyxPQUFPQyxNQUFNLENBQUNYO1FBQ3RDO0lBQ0Y7SUFFQSxJQUFJLENBQUNFLE9BQU8sQ0FBQ1UsS0FBSztBQUNwQjtBQUNBckIsS0FBS3NCLFFBQVEsQ0FBQ2xCLGFBQWFGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9wbmdqcy9saWIvZmlsdGVyLXBhcnNlLWFzeW5jLmpzPzQzZTkiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcbnZhciBDaHVua1N0cmVhbSA9IHJlcXVpcmUoJy4vY2h1bmtzdHJlYW0nKTtcbnZhciBGaWx0ZXIgPSByZXF1aXJlKCcuL2ZpbHRlci1wYXJzZScpO1xuXG5cbnZhciBGaWx0ZXJBc3luYyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oYml0bWFwSW5mbykge1xuICBDaHVua1N0cmVhbS5jYWxsKHRoaXMpO1xuXG4gIHZhciBidWZmZXJzID0gW107XG4gIHZhciB0aGF0ID0gdGhpcztcbiAgdGhpcy5fZmlsdGVyID0gbmV3IEZpbHRlcihiaXRtYXBJbmZvLCB7XG4gICAgcmVhZDogdGhpcy5yZWFkLmJpbmQodGhpcyksXG4gICAgd3JpdGU6IGZ1bmN0aW9uKGJ1ZmZlcikge1xuICAgICAgYnVmZmVycy5wdXNoKGJ1ZmZlcik7XG4gICAgfSxcbiAgICBjb21wbGV0ZTogZnVuY3Rpb24oKSB7XG4gICAgICB0aGF0LmVtaXQoJ2NvbXBsZXRlJywgQnVmZmVyLmNvbmNhdChidWZmZXJzKSk7XG4gICAgfVxuICB9KTtcblxuICB0aGlzLl9maWx0ZXIuc3RhcnQoKTtcbn07XG51dGlsLmluaGVyaXRzKEZpbHRlckFzeW5jLCBDaHVua1N0cmVhbSk7XG4iXSwibmFtZXMiOlsidXRpbCIsInJlcXVpcmUiLCJDaHVua1N0cmVhbSIsIkZpbHRlciIsIkZpbHRlckFzeW5jIiwibW9kdWxlIiwiZXhwb3J0cyIsImJpdG1hcEluZm8iLCJjYWxsIiwiYnVmZmVycyIsInRoYXQiLCJfZmlsdGVyIiwicmVhZCIsImJpbmQiLCJ3cml0ZSIsImJ1ZmZlciIsInB1c2giLCJjb21wbGV0ZSIsImVtaXQiLCJCdWZmZXIiLCJjb25jYXQiLCJzdGFydCIsImluaGVyaXRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/pngjs/lib/filter-parse-async.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/pngjs/lib/filter-parse-sync.js":
/*!******************************************************!*\
  !*** ../node_modules/pngjs/lib/filter-parse-sync.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar SyncReader = __webpack_require__(/*! ./sync-reader */ \"(ssr)/../node_modules/pngjs/lib/sync-reader.js\");\nvar Filter = __webpack_require__(/*! ./filter-parse */ \"(ssr)/../node_modules/pngjs/lib/filter-parse.js\");\nexports.process = function(inBuffer, bitmapInfo) {\n    var outBuffers = [];\n    var reader = new SyncReader(inBuffer);\n    var filter = new Filter(bitmapInfo, {\n        read: reader.read.bind(reader),\n        write: function(bufferPart) {\n            outBuffers.push(bufferPart);\n        },\n        complete: function() {}\n    });\n    filter.start();\n    reader.process();\n    return Buffer.concat(outBuffers);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL3BuZ2pzL2xpYi9maWx0ZXItcGFyc2Utc3luYy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLGFBQWFDLG1CQUFPQSxDQUFDO0FBQ3pCLElBQUlDLFNBQVNELG1CQUFPQSxDQUFDO0FBR3JCRSxlQUFlLEdBQUcsU0FBU0UsUUFBUSxFQUFFQyxVQUFVO0lBRTdDLElBQUlDLGFBQWEsRUFBRTtJQUNuQixJQUFJQyxTQUFTLElBQUlSLFdBQVdLO0lBQzVCLElBQUlJLFNBQVMsSUFBSVAsT0FBT0ksWUFBWTtRQUNsQ0ksTUFBTUYsT0FBT0UsSUFBSSxDQUFDQyxJQUFJLENBQUNIO1FBQ3ZCSSxPQUFPLFNBQVNDLFVBQVU7WUFDeEJOLFdBQVdPLElBQUksQ0FBQ0Q7UUFDbEI7UUFDQUUsVUFBVSxZQUNWO0lBQ0Y7SUFFQU4sT0FBT08sS0FBSztJQUNaUixPQUFPSixPQUFPO0lBRWQsT0FBT2EsT0FBT0MsTUFBTSxDQUFDWDtBQUN2QiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvcG5nanMvbGliL2ZpbHRlci1wYXJzZS1zeW5jLmpzPzk4ZjAiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgU3luY1JlYWRlciA9IHJlcXVpcmUoJy4vc3luYy1yZWFkZXInKTtcbnZhciBGaWx0ZXIgPSByZXF1aXJlKCcuL2ZpbHRlci1wYXJzZScpO1xuXG5cbmV4cG9ydHMucHJvY2VzcyA9IGZ1bmN0aW9uKGluQnVmZmVyLCBiaXRtYXBJbmZvKSB7XG5cbiAgdmFyIG91dEJ1ZmZlcnMgPSBbXTtcbiAgdmFyIHJlYWRlciA9IG5ldyBTeW5jUmVhZGVyKGluQnVmZmVyKTtcbiAgdmFyIGZpbHRlciA9IG5ldyBGaWx0ZXIoYml0bWFwSW5mbywge1xuICAgIHJlYWQ6IHJlYWRlci5yZWFkLmJpbmQocmVhZGVyKSxcbiAgICB3cml0ZTogZnVuY3Rpb24oYnVmZmVyUGFydCkge1xuICAgICAgb3V0QnVmZmVycy5wdXNoKGJ1ZmZlclBhcnQpO1xuICAgIH0sXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uKCkge1xuICAgIH1cbiAgfSk7XG5cbiAgZmlsdGVyLnN0YXJ0KCk7XG4gIHJlYWRlci5wcm9jZXNzKCk7XG5cbiAgcmV0dXJuIEJ1ZmZlci5jb25jYXQob3V0QnVmZmVycyk7XG59OyJdLCJuYW1lcyI6WyJTeW5jUmVhZGVyIiwicmVxdWlyZSIsIkZpbHRlciIsImV4cG9ydHMiLCJwcm9jZXNzIiwiaW5CdWZmZXIiLCJiaXRtYXBJbmZvIiwib3V0QnVmZmVycyIsInJlYWRlciIsImZpbHRlciIsInJlYWQiLCJiaW5kIiwid3JpdGUiLCJidWZmZXJQYXJ0IiwicHVzaCIsImNvbXBsZXRlIiwic3RhcnQiLCJCdWZmZXIiLCJjb25jYXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/pngjs/lib/filter-parse-sync.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/pngjs/lib/filter-parse.js":
/*!*************************************************!*\
  !*** ../node_modules/pngjs/lib/filter-parse.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar interlaceUtils = __webpack_require__(/*! ./interlace */ \"(ssr)/../node_modules/pngjs/lib/interlace.js\");\nvar paethPredictor = __webpack_require__(/*! ./paeth-predictor */ \"(ssr)/../node_modules/pngjs/lib/paeth-predictor.js\");\nfunction getByteWidth(width, bpp, depth) {\n    var byteWidth = width * bpp;\n    if (depth !== 8) {\n        byteWidth = Math.ceil(byteWidth / (8 / depth));\n    }\n    return byteWidth;\n}\nvar Filter = module.exports = function(bitmapInfo, dependencies) {\n    var width = bitmapInfo.width;\n    var height = bitmapInfo.height;\n    var interlace = bitmapInfo.interlace;\n    var bpp = bitmapInfo.bpp;\n    var depth = bitmapInfo.depth;\n    this.read = dependencies.read;\n    this.write = dependencies.write;\n    this.complete = dependencies.complete;\n    this._imageIndex = 0;\n    this._images = [];\n    if (interlace) {\n        var passes = interlaceUtils.getImagePasses(width, height);\n        for(var i = 0; i < passes.length; i++){\n            this._images.push({\n                byteWidth: getByteWidth(passes[i].width, bpp, depth),\n                height: passes[i].height,\n                lineIndex: 0\n            });\n        }\n    } else {\n        this._images.push({\n            byteWidth: getByteWidth(width, bpp, depth),\n            height: height,\n            lineIndex: 0\n        });\n    }\n    // when filtering the line we look at the pixel to the left\n    // the spec also says it is done on a byte level regardless of the number of pixels\n    // so if the depth is byte compatible (8 or 16) we subtract the bpp in order to compare back\n    // a pixel rather than just a different byte part. However if we are sub byte, we ignore.\n    if (depth === 8) {\n        this._xComparison = bpp;\n    } else if (depth === 16) {\n        this._xComparison = bpp * 2;\n    } else {\n        this._xComparison = 1;\n    }\n};\nFilter.prototype.start = function() {\n    this.read(this._images[this._imageIndex].byteWidth + 1, this._reverseFilterLine.bind(this));\n};\nFilter.prototype._unFilterType1 = function(rawData, unfilteredLine, byteWidth) {\n    var xComparison = this._xComparison;\n    var xBiggerThan = xComparison - 1;\n    for(var x = 0; x < byteWidth; x++){\n        var rawByte = rawData[1 + x];\n        var f1Left = x > xBiggerThan ? unfilteredLine[x - xComparison] : 0;\n        unfilteredLine[x] = rawByte + f1Left;\n    }\n};\nFilter.prototype._unFilterType2 = function(rawData, unfilteredLine, byteWidth) {\n    var lastLine = this._lastLine;\n    for(var x = 0; x < byteWidth; x++){\n        var rawByte = rawData[1 + x];\n        var f2Up = lastLine ? lastLine[x] : 0;\n        unfilteredLine[x] = rawByte + f2Up;\n    }\n};\nFilter.prototype._unFilterType3 = function(rawData, unfilteredLine, byteWidth) {\n    var xComparison = this._xComparison;\n    var xBiggerThan = xComparison - 1;\n    var lastLine = this._lastLine;\n    for(var x = 0; x < byteWidth; x++){\n        var rawByte = rawData[1 + x];\n        var f3Up = lastLine ? lastLine[x] : 0;\n        var f3Left = x > xBiggerThan ? unfilteredLine[x - xComparison] : 0;\n        var f3Add = Math.floor((f3Left + f3Up) / 2);\n        unfilteredLine[x] = rawByte + f3Add;\n    }\n};\nFilter.prototype._unFilterType4 = function(rawData, unfilteredLine, byteWidth) {\n    var xComparison = this._xComparison;\n    var xBiggerThan = xComparison - 1;\n    var lastLine = this._lastLine;\n    for(var x = 0; x < byteWidth; x++){\n        var rawByte = rawData[1 + x];\n        var f4Up = lastLine ? lastLine[x] : 0;\n        var f4Left = x > xBiggerThan ? unfilteredLine[x - xComparison] : 0;\n        var f4UpLeft = x > xBiggerThan && lastLine ? lastLine[x - xComparison] : 0;\n        var f4Add = paethPredictor(f4Left, f4Up, f4UpLeft);\n        unfilteredLine[x] = rawByte + f4Add;\n    }\n};\nFilter.prototype._reverseFilterLine = function(rawData) {\n    var filter = rawData[0];\n    var unfilteredLine;\n    var currentImage = this._images[this._imageIndex];\n    var byteWidth = currentImage.byteWidth;\n    if (filter === 0) {\n        unfilteredLine = rawData.slice(1, byteWidth + 1);\n    } else {\n        unfilteredLine = new Buffer(byteWidth);\n        switch(filter){\n            case 1:\n                this._unFilterType1(rawData, unfilteredLine, byteWidth);\n                break;\n            case 2:\n                this._unFilterType2(rawData, unfilteredLine, byteWidth);\n                break;\n            case 3:\n                this._unFilterType3(rawData, unfilteredLine, byteWidth);\n                break;\n            case 4:\n                this._unFilterType4(rawData, unfilteredLine, byteWidth);\n                break;\n            default:\n                throw new Error(\"Unrecognised filter type - \" + filter);\n        }\n    }\n    this.write(unfilteredLine);\n    currentImage.lineIndex++;\n    if (currentImage.lineIndex >= currentImage.height) {\n        this._lastLine = null;\n        this._imageIndex++;\n        currentImage = this._images[this._imageIndex];\n    } else {\n        this._lastLine = unfilteredLine;\n    }\n    if (currentImage) {\n        // read, using the byte width that may be from the new current image\n        this.read(currentImage.byteWidth + 1, this._reverseFilterLine.bind(this));\n    } else {\n        this._lastLine = null;\n        this.complete();\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/pngjs/lib/filter-parse.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/pngjs/lib/format-normaliser.js":
/*!******************************************************!*\
  !*** ../node_modules/pngjs/lib/format-normaliser.js ***!
  \******************************************************/
/***/ ((module) => {

eval("\nfunction dePalette(indata, outdata, width, height, palette) {\n    var pxPos = 0;\n    // use values from palette\n    for(var y = 0; y < height; y++){\n        for(var x = 0; x < width; x++){\n            var color = palette[indata[pxPos]];\n            if (!color) {\n                throw new Error(\"index \" + indata[pxPos] + \" not in palette\");\n            }\n            for(var i = 0; i < 4; i++){\n                outdata[pxPos + i] = color[i];\n            }\n            pxPos += 4;\n        }\n    }\n}\nfunction replaceTransparentColor(indata, outdata, width, height, transColor) {\n    var pxPos = 0;\n    for(var y = 0; y < height; y++){\n        for(var x = 0; x < width; x++){\n            var makeTrans = false;\n            if (transColor.length === 1) {\n                if (transColor[0] === indata[pxPos]) {\n                    makeTrans = true;\n                }\n            } else if (transColor[0] === indata[pxPos] && transColor[1] === indata[pxPos + 1] && transColor[2] === indata[pxPos + 2]) {\n                makeTrans = true;\n            }\n            if (makeTrans) {\n                for(var i = 0; i < 4; i++){\n                    outdata[pxPos + i] = 0;\n                }\n            }\n            pxPos += 4;\n        }\n    }\n}\nfunction scaleDepth(indata, outdata, width, height, depth) {\n    var maxOutSample = 255;\n    var maxInSample = Math.pow(2, depth) - 1;\n    var pxPos = 0;\n    for(var y = 0; y < height; y++){\n        for(var x = 0; x < width; x++){\n            for(var i = 0; i < 4; i++){\n                outdata[pxPos + i] = Math.floor(indata[pxPos + i] * maxOutSample / maxInSample + 0.5);\n            }\n            pxPos += 4;\n        }\n    }\n}\nmodule.exports = function(indata, imageData) {\n    var depth = imageData.depth;\n    var width = imageData.width;\n    var height = imageData.height;\n    var colorType = imageData.colorType;\n    var transColor = imageData.transColor;\n    var palette = imageData.palette;\n    var outdata = indata; // only different for 16 bits\n    if (colorType === 3) {\n        dePalette(indata, outdata, width, height, palette);\n    } else {\n        if (transColor) {\n            replaceTransparentColor(indata, outdata, width, height, transColor);\n        }\n        // if it needs scaling\n        if (depth !== 8) {\n            // if we need to change the buffer size\n            if (depth === 16) {\n                outdata = new Buffer(width * height * 4);\n            }\n            scaleDepth(indata, outdata, width, height, depth);\n        }\n    }\n    return outdata;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL3BuZ2pzL2xpYi9mb3JtYXQtbm9ybWFsaXNlci5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLFNBQVNBLFVBQVVDLE1BQU0sRUFBRUMsT0FBTyxFQUFFQyxLQUFLLEVBQUVDLE1BQU0sRUFBRUMsT0FBTztJQUN4RCxJQUFJQyxRQUFRO0lBQ1osMEJBQTBCO0lBQzFCLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJSCxRQUFRRyxJQUFLO1FBQy9CLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJTCxPQUFPSyxJQUFLO1lBQzlCLElBQUlDLFFBQVFKLE9BQU8sQ0FBQ0osTUFBTSxDQUFDSyxNQUFNLENBQUM7WUFFbEMsSUFBSSxDQUFDRyxPQUFPO2dCQUNWLE1BQU0sSUFBSUMsTUFBTSxXQUFXVCxNQUFNLENBQUNLLE1BQU0sR0FBRztZQUM3QztZQUVBLElBQUssSUFBSUssSUFBSSxHQUFHQSxJQUFJLEdBQUdBLElBQUs7Z0JBQzFCVCxPQUFPLENBQUNJLFFBQVFLLEVBQUUsR0FBR0YsS0FBSyxDQUFDRSxFQUFFO1lBQy9CO1lBQ0FMLFNBQVM7UUFDWDtJQUNGO0FBQ0Y7QUFFQSxTQUFTTSx3QkFBd0JYLE1BQU0sRUFBRUMsT0FBTyxFQUFFQyxLQUFLLEVBQUVDLE1BQU0sRUFBRVMsVUFBVTtJQUN6RSxJQUFJUCxRQUFRO0lBQ1osSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlILFFBQVFHLElBQUs7UUFDL0IsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlMLE9BQU9LLElBQUs7WUFDOUIsSUFBSU0sWUFBWTtZQUVoQixJQUFJRCxXQUFXRSxNQUFNLEtBQUssR0FBRztnQkFDM0IsSUFBSUYsVUFBVSxDQUFDLEVBQUUsS0FBS1osTUFBTSxDQUFDSyxNQUFNLEVBQUU7b0JBQ25DUSxZQUFZO2dCQUNkO1lBQ0YsT0FDSyxJQUFJRCxVQUFVLENBQUMsRUFBRSxLQUFLWixNQUFNLENBQUNLLE1BQU0sSUFBSU8sVUFBVSxDQUFDLEVBQUUsS0FBS1osTUFBTSxDQUFDSyxRQUFRLEVBQUUsSUFBSU8sVUFBVSxDQUFDLEVBQUUsS0FBS1osTUFBTSxDQUFDSyxRQUFRLEVBQUUsRUFBRTtnQkFDdEhRLFlBQVk7WUFDZDtZQUNBLElBQUlBLFdBQVc7Z0JBQ2IsSUFBSyxJQUFJSCxJQUFJLEdBQUdBLElBQUksR0FBR0EsSUFBSztvQkFDMUJULE9BQU8sQ0FBQ0ksUUFBUUssRUFBRSxHQUFHO2dCQUN2QjtZQUNGO1lBQ0FMLFNBQVM7UUFDWDtJQUNGO0FBQ0Y7QUFFQSxTQUFTVSxXQUFXZixNQUFNLEVBQUVDLE9BQU8sRUFBRUMsS0FBSyxFQUFFQyxNQUFNLEVBQUVhLEtBQUs7SUFDdkQsSUFBSUMsZUFBZTtJQUNuQixJQUFJQyxjQUFjQyxLQUFLQyxHQUFHLENBQUMsR0FBR0osU0FBUztJQUN2QyxJQUFJWCxRQUFRO0lBRVosSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlILFFBQVFHLElBQUs7UUFDL0IsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlMLE9BQU9LLElBQUs7WUFDOUIsSUFBSyxJQUFJRyxJQUFJLEdBQUdBLElBQUksR0FBR0EsSUFBSztnQkFDMUJULE9BQU8sQ0FBQ0ksUUFBUUssRUFBRSxHQUFHUyxLQUFLRSxLQUFLLENBQUMsTUFBTyxDQUFDaEIsUUFBUUssRUFBRSxHQUFHTyxlQUFnQkMsY0FBYztZQUNyRjtZQUNBYixTQUFTO1FBQ1g7SUFDRjtBQUNGO0FBRUFpQixPQUFPQyxPQUFPLEdBQUcsU0FBU3ZCLE1BQU0sRUFBRXdCLFNBQVM7SUFFekMsSUFBSVIsUUFBUVEsVUFBVVIsS0FBSztJQUMzQixJQUFJZCxRQUFRc0IsVUFBVXRCLEtBQUs7SUFDM0IsSUFBSUMsU0FBU3FCLFVBQVVyQixNQUFNO0lBQzdCLElBQUlzQixZQUFZRCxVQUFVQyxTQUFTO0lBQ25DLElBQUliLGFBQWFZLFVBQVVaLFVBQVU7SUFDckMsSUFBSVIsVUFBVW9CLFVBQVVwQixPQUFPO0lBRS9CLElBQUlILFVBQVVELFFBQVEsNkJBQTZCO0lBRW5ELElBQUl5QixjQUFjLEdBQUc7UUFDbkIxQixVQUFVQyxRQUFRQyxTQUFTQyxPQUFPQyxRQUFRQztJQUM1QyxPQUNLO1FBQ0gsSUFBSVEsWUFBWTtZQUNkRCx3QkFBd0JYLFFBQVFDLFNBQVNDLE9BQU9DLFFBQVFTO1FBQzFEO1FBQ0Esc0JBQXNCO1FBQ3RCLElBQUlJLFVBQVUsR0FBRztZQUNmLHVDQUF1QztZQUN2QyxJQUFJQSxVQUFVLElBQUk7Z0JBQ2hCZixVQUFVLElBQUl5QixPQUFPeEIsUUFBUUMsU0FBUztZQUN4QztZQUNBWSxXQUFXZixRQUFRQyxTQUFTQyxPQUFPQyxRQUFRYTtRQUM3QztJQUNGO0lBQ0EsT0FBT2Y7QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvcG5nanMvbGliL2Zvcm1hdC1ub3JtYWxpc2VyLmpzPzViNWYiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBkZVBhbGV0dGUoaW5kYXRhLCBvdXRkYXRhLCB3aWR0aCwgaGVpZ2h0LCBwYWxldHRlKSB7XG4gIHZhciBweFBvcyA9IDA7XG4gIC8vIHVzZSB2YWx1ZXMgZnJvbSBwYWxldHRlXG4gIGZvciAodmFyIHkgPSAwOyB5IDwgaGVpZ2h0OyB5KyspIHtcbiAgICBmb3IgKHZhciB4ID0gMDsgeCA8IHdpZHRoOyB4KyspIHtcbiAgICAgIHZhciBjb2xvciA9IHBhbGV0dGVbaW5kYXRhW3B4UG9zXV07XG5cbiAgICAgIGlmICghY29sb3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbmRleCAnICsgaW5kYXRhW3B4UG9zXSArICcgbm90IGluIHBhbGV0dGUnKTtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyBpKyspIHtcbiAgICAgICAgb3V0ZGF0YVtweFBvcyArIGldID0gY29sb3JbaV07XG4gICAgICB9XG4gICAgICBweFBvcyArPSA0O1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiByZXBsYWNlVHJhbnNwYXJlbnRDb2xvcihpbmRhdGEsIG91dGRhdGEsIHdpZHRoLCBoZWlnaHQsIHRyYW5zQ29sb3IpIHtcbiAgdmFyIHB4UG9zID0gMDtcbiAgZm9yICh2YXIgeSA9IDA7IHkgPCBoZWlnaHQ7IHkrKykge1xuICAgIGZvciAodmFyIHggPSAwOyB4IDwgd2lkdGg7IHgrKykge1xuICAgICAgdmFyIG1ha2VUcmFucyA9IGZhbHNlO1xuXG4gICAgICBpZiAodHJhbnNDb2xvci5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgaWYgKHRyYW5zQ29sb3JbMF0gPT09IGluZGF0YVtweFBvc10pIHtcbiAgICAgICAgICBtYWtlVHJhbnMgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIGlmICh0cmFuc0NvbG9yWzBdID09PSBpbmRhdGFbcHhQb3NdICYmIHRyYW5zQ29sb3JbMV0gPT09IGluZGF0YVtweFBvcyArIDFdICYmIHRyYW5zQ29sb3JbMl0gPT09IGluZGF0YVtweFBvcyArIDJdKSB7XG4gICAgICAgIG1ha2VUcmFucyA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAobWFrZVRyYW5zKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgaSsrKSB7XG4gICAgICAgICAgb3V0ZGF0YVtweFBvcyArIGldID0gMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcHhQb3MgKz0gNDtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gc2NhbGVEZXB0aChpbmRhdGEsIG91dGRhdGEsIHdpZHRoLCBoZWlnaHQsIGRlcHRoKSB7XG4gIHZhciBtYXhPdXRTYW1wbGUgPSAyNTU7XG4gIHZhciBtYXhJblNhbXBsZSA9IE1hdGgucG93KDIsIGRlcHRoKSAtIDE7XG4gIHZhciBweFBvcyA9IDA7XG5cbiAgZm9yICh2YXIgeSA9IDA7IHkgPCBoZWlnaHQ7IHkrKykge1xuICAgIGZvciAodmFyIHggPSAwOyB4IDwgd2lkdGg7IHgrKykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyBpKyspIHtcbiAgICAgICAgb3V0ZGF0YVtweFBvcyArIGldID0gTWF0aC5mbG9vcigoaW5kYXRhW3B4UG9zICsgaV0gKiBtYXhPdXRTYW1wbGUpIC8gbWF4SW5TYW1wbGUgKyAwLjUpO1xuICAgICAgfVxuICAgICAgcHhQb3MgKz0gNDtcbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpbmRhdGEsIGltYWdlRGF0YSkge1xuXG4gIHZhciBkZXB0aCA9IGltYWdlRGF0YS5kZXB0aDtcbiAgdmFyIHdpZHRoID0gaW1hZ2VEYXRhLndpZHRoO1xuICB2YXIgaGVpZ2h0ID0gaW1hZ2VEYXRhLmhlaWdodDtcbiAgdmFyIGNvbG9yVHlwZSA9IGltYWdlRGF0YS5jb2xvclR5cGU7XG4gIHZhciB0cmFuc0NvbG9yID0gaW1hZ2VEYXRhLnRyYW5zQ29sb3I7XG4gIHZhciBwYWxldHRlID0gaW1hZ2VEYXRhLnBhbGV0dGU7XG5cbiAgdmFyIG91dGRhdGEgPSBpbmRhdGE7IC8vIG9ubHkgZGlmZmVyZW50IGZvciAxNiBiaXRzXG5cbiAgaWYgKGNvbG9yVHlwZSA9PT0gMykgeyAvLyBwYWxldHRlZFxuICAgIGRlUGFsZXR0ZShpbmRhdGEsIG91dGRhdGEsIHdpZHRoLCBoZWlnaHQsIHBhbGV0dGUpO1xuICB9XG4gIGVsc2Uge1xuICAgIGlmICh0cmFuc0NvbG9yKSB7XG4gICAgICByZXBsYWNlVHJhbnNwYXJlbnRDb2xvcihpbmRhdGEsIG91dGRhdGEsIHdpZHRoLCBoZWlnaHQsIHRyYW5zQ29sb3IpO1xuICAgIH1cbiAgICAvLyBpZiBpdCBuZWVkcyBzY2FsaW5nXG4gICAgaWYgKGRlcHRoICE9PSA4KSB7XG4gICAgICAvLyBpZiB3ZSBuZWVkIHRvIGNoYW5nZSB0aGUgYnVmZmVyIHNpemVcbiAgICAgIGlmIChkZXB0aCA9PT0gMTYpIHtcbiAgICAgICAgb3V0ZGF0YSA9IG5ldyBCdWZmZXIod2lkdGggKiBoZWlnaHQgKiA0KTtcbiAgICAgIH1cbiAgICAgIHNjYWxlRGVwdGgoaW5kYXRhLCBvdXRkYXRhLCB3aWR0aCwgaGVpZ2h0LCBkZXB0aCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBvdXRkYXRhO1xufTtcbiJdLCJuYW1lcyI6WyJkZVBhbGV0dGUiLCJpbmRhdGEiLCJvdXRkYXRhIiwid2lkdGgiLCJoZWlnaHQiLCJwYWxldHRlIiwicHhQb3MiLCJ5IiwieCIsImNvbG9yIiwiRXJyb3IiLCJpIiwicmVwbGFjZVRyYW5zcGFyZW50Q29sb3IiLCJ0cmFuc0NvbG9yIiwibWFrZVRyYW5zIiwibGVuZ3RoIiwic2NhbGVEZXB0aCIsImRlcHRoIiwibWF4T3V0U2FtcGxlIiwibWF4SW5TYW1wbGUiLCJNYXRoIiwicG93IiwiZmxvb3IiLCJtb2R1bGUiLCJleHBvcnRzIiwiaW1hZ2VEYXRhIiwiY29sb3JUeXBlIiwiQnVmZmVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/pngjs/lib/format-normaliser.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/pngjs/lib/interlace.js":
/*!**********************************************!*\
  !*** ../node_modules/pngjs/lib/interlace.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Adam 7\n//   0 1 2 3 4 5 6 7\n// 0 x 6 4 6 x 6 4 6\n// 1 7 7 7 7 7 7 7 7\n// 2 5 6 5 6 5 6 5 6\n// 3 7 7 7 7 7 7 7 7\n// 4 3 6 4 6 3 6 4 6\n// 5 7 7 7 7 7 7 7 7\n// 6 5 6 5 6 5 6 5 6\n// 7 7 7 7 7 7 7 7 7\nvar imagePasses = [\n    {\n        x: [\n            0\n        ],\n        y: [\n            0\n        ]\n    },\n    {\n        x: [\n            4\n        ],\n        y: [\n            0\n        ]\n    },\n    {\n        x: [\n            0,\n            4\n        ],\n        y: [\n            4\n        ]\n    },\n    {\n        x: [\n            2,\n            6\n        ],\n        y: [\n            0,\n            4\n        ]\n    },\n    {\n        x: [\n            0,\n            2,\n            4,\n            6\n        ],\n        y: [\n            2,\n            6\n        ]\n    },\n    {\n        x: [\n            1,\n            3,\n            5,\n            7\n        ],\n        y: [\n            0,\n            2,\n            4,\n            6\n        ]\n    },\n    {\n        x: [\n            0,\n            1,\n            2,\n            3,\n            4,\n            5,\n            6,\n            7\n        ],\n        y: [\n            1,\n            3,\n            5,\n            7\n        ]\n    }\n];\nexports.getImagePasses = function(width, height) {\n    var images = [];\n    var xLeftOver = width % 8;\n    var yLeftOver = height % 8;\n    var xRepeats = (width - xLeftOver) / 8;\n    var yRepeats = (height - yLeftOver) / 8;\n    for(var i = 0; i < imagePasses.length; i++){\n        var pass = imagePasses[i];\n        var passWidth = xRepeats * pass.x.length;\n        var passHeight = yRepeats * pass.y.length;\n        for(var j = 0; j < pass.x.length; j++){\n            if (pass.x[j] < xLeftOver) {\n                passWidth++;\n            } else {\n                break;\n            }\n        }\n        for(j = 0; j < pass.y.length; j++){\n            if (pass.y[j] < yLeftOver) {\n                passHeight++;\n            } else {\n                break;\n            }\n        }\n        if (passWidth > 0 && passHeight > 0) {\n            images.push({\n                width: passWidth,\n                height: passHeight,\n                index: i\n            });\n        }\n    }\n    return images;\n};\nexports.getInterlaceIterator = function(width) {\n    return function(x, y, pass) {\n        var outerXLeftOver = x % imagePasses[pass].x.length;\n        var outerX = (x - outerXLeftOver) / imagePasses[pass].x.length * 8 + imagePasses[pass].x[outerXLeftOver];\n        var outerYLeftOver = y % imagePasses[pass].y.length;\n        var outerY = (y - outerYLeftOver) / imagePasses[pass].y.length * 8 + imagePasses[pass].y[outerYLeftOver];\n        return outerX * 4 + outerY * width * 4;\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL3BuZ2pzL2xpYi9pbnRlcmxhY2UuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxTQUFTO0FBQ1Qsb0JBQW9CO0FBQ3BCLG9CQUFvQjtBQUNwQixvQkFBb0I7QUFDcEIsb0JBQW9CO0FBQ3BCLG9CQUFvQjtBQUNwQixvQkFBb0I7QUFDcEIsb0JBQW9CO0FBQ3BCLG9CQUFvQjtBQUNwQixvQkFBb0I7QUFHcEIsSUFBSUEsY0FBYztJQUNoQjtRQUNFQyxHQUFHO1lBQUM7U0FBRTtRQUNOQyxHQUFHO1lBQUM7U0FBRTtJQUNSO0lBQ0E7UUFDRUQsR0FBRztZQUFDO1NBQUU7UUFDTkMsR0FBRztZQUFDO1NBQUU7SUFDUjtJQUNBO1FBQ0VELEdBQUc7WUFBQztZQUFHO1NBQUU7UUFDVEMsR0FBRztZQUFDO1NBQUU7SUFDUjtJQUNBO1FBQ0VELEdBQUc7WUFBQztZQUFHO1NBQUU7UUFDVEMsR0FBRztZQUFDO1lBQUc7U0FBRTtJQUNYO0lBQ0E7UUFDRUQsR0FBRztZQUFDO1lBQUc7WUFBRztZQUFHO1NBQUU7UUFDZkMsR0FBRztZQUFDO1lBQUc7U0FBRTtJQUNYO0lBQ0E7UUFDRUQsR0FBRztZQUFDO1lBQUc7WUFBRztZQUFHO1NBQUU7UUFDZkMsR0FBRztZQUFDO1lBQUc7WUFBRztZQUFHO1NBQUU7SUFDakI7SUFDQTtRQUNFRCxHQUFHO1lBQUM7WUFBRztZQUFHO1lBQUc7WUFBRztZQUFHO1lBQUc7WUFBRztTQUFFO1FBQzNCQyxHQUFHO1lBQUM7WUFBRztZQUFHO1lBQUc7U0FBRTtJQUNqQjtDQUNEO0FBRURDLHNCQUFzQixHQUFHLFNBQVNFLEtBQUssRUFBRUMsTUFBTTtJQUM3QyxJQUFJQyxTQUFTLEVBQUU7SUFDZixJQUFJQyxZQUFZSCxRQUFRO0lBQ3hCLElBQUlJLFlBQVlILFNBQVM7SUFDekIsSUFBSUksV0FBVyxDQUFDTCxRQUFRRyxTQUFRLElBQUs7SUFDckMsSUFBSUcsV0FBVyxDQUFDTCxTQUFTRyxTQUFRLElBQUs7SUFDdEMsSUFBSyxJQUFJRyxJQUFJLEdBQUdBLElBQUlaLFlBQVlhLE1BQU0sRUFBRUQsSUFBSztRQUMzQyxJQUFJRSxPQUFPZCxXQUFXLENBQUNZLEVBQUU7UUFDekIsSUFBSUcsWUFBWUwsV0FBV0ksS0FBS2IsQ0FBQyxDQUFDWSxNQUFNO1FBQ3hDLElBQUlHLGFBQWFMLFdBQVdHLEtBQUtaLENBQUMsQ0FBQ1csTUFBTTtRQUN6QyxJQUFLLElBQUlJLElBQUksR0FBR0EsSUFBSUgsS0FBS2IsQ0FBQyxDQUFDWSxNQUFNLEVBQUVJLElBQUs7WUFDdEMsSUFBSUgsS0FBS2IsQ0FBQyxDQUFDZ0IsRUFBRSxHQUFHVCxXQUFXO2dCQUN6Qk87WUFDRixPQUNLO2dCQUNIO1lBQ0Y7UUFDRjtRQUNBLElBQUtFLElBQUksR0FBR0EsSUFBSUgsS0FBS1osQ0FBQyxDQUFDVyxNQUFNLEVBQUVJLElBQUs7WUFDbEMsSUFBSUgsS0FBS1osQ0FBQyxDQUFDZSxFQUFFLEdBQUdSLFdBQVc7Z0JBQ3pCTztZQUNGLE9BQ0s7Z0JBQ0g7WUFDRjtRQUNGO1FBQ0EsSUFBSUQsWUFBWSxLQUFLQyxhQUFhLEdBQUc7WUFDbkNULE9BQU9XLElBQUksQ0FBQztnQkFBRWIsT0FBT1U7Z0JBQVdULFFBQVFVO2dCQUFZRyxPQUFPUDtZQUFFO1FBQy9EO0lBQ0Y7SUFDQSxPQUFPTDtBQUNUO0FBRUFKLDRCQUE0QixHQUFHLFNBQVNFLEtBQUs7SUFDM0MsT0FBTyxTQUFTSixDQUFDLEVBQUVDLENBQUMsRUFBRVksSUFBSTtRQUN4QixJQUFJTyxpQkFBaUJwQixJQUFJRCxXQUFXLENBQUNjLEtBQUssQ0FBQ2IsQ0FBQyxDQUFDWSxNQUFNO1FBQ25ELElBQUlTLFNBQVMsQ0FBR3JCLElBQUlvQixjQUFhLElBQUtyQixXQUFXLENBQUNjLEtBQUssQ0FBQ2IsQ0FBQyxDQUFDWSxNQUFNLEdBQUksSUFBS2IsV0FBVyxDQUFDYyxLQUFLLENBQUNiLENBQUMsQ0FBQ29CLGVBQWU7UUFDNUcsSUFBSUUsaUJBQWlCckIsSUFBSUYsV0FBVyxDQUFDYyxLQUFLLENBQUNaLENBQUMsQ0FBQ1csTUFBTTtRQUNuRCxJQUFJVyxTQUFTLENBQUd0QixJQUFJcUIsY0FBYSxJQUFLdkIsV0FBVyxDQUFDYyxLQUFLLENBQUNaLENBQUMsQ0FBQ1csTUFBTSxHQUFJLElBQUtiLFdBQVcsQ0FBQ2MsS0FBSyxDQUFDWixDQUFDLENBQUNxQixlQUFlO1FBQzVHLE9BQU8sU0FBVSxJQUFNQyxTQUFTbkIsUUFBUTtJQUMxQztBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9wbmdqcy9saWIvaW50ZXJsYWNlLmpzPzhkNjkiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vLyBBZGFtIDdcbi8vICAgMCAxIDIgMyA0IDUgNiA3XG4vLyAwIHggNiA0IDYgeCA2IDQgNlxuLy8gMSA3IDcgNyA3IDcgNyA3IDdcbi8vIDIgNSA2IDUgNiA1IDYgNSA2XG4vLyAzIDcgNyA3IDcgNyA3IDcgN1xuLy8gNCAzIDYgNCA2IDMgNiA0IDZcbi8vIDUgNyA3IDcgNyA3IDcgNyA3XG4vLyA2IDUgNiA1IDYgNSA2IDUgNlxuLy8gNyA3IDcgNyA3IDcgNyA3IDdcblxuXG52YXIgaW1hZ2VQYXNzZXMgPSBbXG4gIHsgLy8gcGFzcyAxIC0gMXB4XG4gICAgeDogWzBdLFxuICAgIHk6IFswXVxuICB9LFxuICB7IC8vIHBhc3MgMiAtIDFweFxuICAgIHg6IFs0XSxcbiAgICB5OiBbMF1cbiAgfSxcbiAgeyAvLyBwYXNzIDMgLSAycHhcbiAgICB4OiBbMCwgNF0sXG4gICAgeTogWzRdXG4gIH0sXG4gIHsgLy8gcGFzcyA0IC0gNHB4XG4gICAgeDogWzIsIDZdLFxuICAgIHk6IFswLCA0XVxuICB9LFxuICB7IC8vIHBhc3MgNSAtIDhweFxuICAgIHg6IFswLCAyLCA0LCA2XSxcbiAgICB5OiBbMiwgNl1cbiAgfSxcbiAgeyAvLyBwYXNzIDYgLSAxNnB4XG4gICAgeDogWzEsIDMsIDUsIDddLFxuICAgIHk6IFswLCAyLCA0LCA2XVxuICB9LFxuICB7IC8vIHBhc3MgNyAtIDMycHhcbiAgICB4OiBbMCwgMSwgMiwgMywgNCwgNSwgNiwgN10sXG4gICAgeTogWzEsIDMsIDUsIDddXG4gIH1cbl07XG5cbmV4cG9ydHMuZ2V0SW1hZ2VQYXNzZXMgPSBmdW5jdGlvbih3aWR0aCwgaGVpZ2h0KSB7XG4gIHZhciBpbWFnZXMgPSBbXTtcbiAgdmFyIHhMZWZ0T3ZlciA9IHdpZHRoICUgODtcbiAgdmFyIHlMZWZ0T3ZlciA9IGhlaWdodCAlIDg7XG4gIHZhciB4UmVwZWF0cyA9ICh3aWR0aCAtIHhMZWZ0T3ZlcikgLyA4O1xuICB2YXIgeVJlcGVhdHMgPSAoaGVpZ2h0IC0geUxlZnRPdmVyKSAvIDg7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgaW1hZ2VQYXNzZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcGFzcyA9IGltYWdlUGFzc2VzW2ldO1xuICAgIHZhciBwYXNzV2lkdGggPSB4UmVwZWF0cyAqIHBhc3MueC5sZW5ndGg7XG4gICAgdmFyIHBhc3NIZWlnaHQgPSB5UmVwZWF0cyAqIHBhc3MueS5sZW5ndGg7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBwYXNzLngubGVuZ3RoOyBqKyspIHtcbiAgICAgIGlmIChwYXNzLnhbal0gPCB4TGVmdE92ZXIpIHtcbiAgICAgICAgcGFzc1dpZHRoKys7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAoaiA9IDA7IGogPCBwYXNzLnkubGVuZ3RoOyBqKyspIHtcbiAgICAgIGlmIChwYXNzLnlbal0gPCB5TGVmdE92ZXIpIHtcbiAgICAgICAgcGFzc0hlaWdodCsrO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocGFzc1dpZHRoID4gMCAmJiBwYXNzSGVpZ2h0ID4gMCkge1xuICAgICAgaW1hZ2VzLnB1c2goeyB3aWR0aDogcGFzc1dpZHRoLCBoZWlnaHQ6IHBhc3NIZWlnaHQsIGluZGV4OiBpIH0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gaW1hZ2VzO1xufTtcblxuZXhwb3J0cy5nZXRJbnRlcmxhY2VJdGVyYXRvciA9IGZ1bmN0aW9uKHdpZHRoKSB7XG4gIHJldHVybiBmdW5jdGlvbih4LCB5LCBwYXNzKSB7XG4gICAgdmFyIG91dGVyWExlZnRPdmVyID0geCAlIGltYWdlUGFzc2VzW3Bhc3NdLngubGVuZ3RoO1xuICAgIHZhciBvdXRlclggPSAoKCh4IC0gb3V0ZXJYTGVmdE92ZXIpIC8gaW1hZ2VQYXNzZXNbcGFzc10ueC5sZW5ndGgpICogOCkgKyBpbWFnZVBhc3Nlc1twYXNzXS54W291dGVyWExlZnRPdmVyXTtcbiAgICB2YXIgb3V0ZXJZTGVmdE92ZXIgPSB5ICUgaW1hZ2VQYXNzZXNbcGFzc10ueS5sZW5ndGg7XG4gICAgdmFyIG91dGVyWSA9ICgoKHkgLSBvdXRlcllMZWZ0T3ZlcikgLyBpbWFnZVBhc3Nlc1twYXNzXS55Lmxlbmd0aCkgKiA4KSArIGltYWdlUGFzc2VzW3Bhc3NdLnlbb3V0ZXJZTGVmdE92ZXJdO1xuICAgIHJldHVybiAob3V0ZXJYICogNCkgKyAob3V0ZXJZICogd2lkdGggKiA0KTtcbiAgfTtcbn07Il0sIm5hbWVzIjpbImltYWdlUGFzc2VzIiwieCIsInkiLCJleHBvcnRzIiwiZ2V0SW1hZ2VQYXNzZXMiLCJ3aWR0aCIsImhlaWdodCIsImltYWdlcyIsInhMZWZ0T3ZlciIsInlMZWZ0T3ZlciIsInhSZXBlYXRzIiwieVJlcGVhdHMiLCJpIiwibGVuZ3RoIiwicGFzcyIsInBhc3NXaWR0aCIsInBhc3NIZWlnaHQiLCJqIiwicHVzaCIsImluZGV4IiwiZ2V0SW50ZXJsYWNlSXRlcmF0b3IiLCJvdXRlclhMZWZ0T3ZlciIsIm91dGVyWCIsIm91dGVyWUxlZnRPdmVyIiwib3V0ZXJZIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/pngjs/lib/interlace.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/pngjs/lib/packer-async.js":
/*!*************************************************!*\
  !*** ../node_modules/pngjs/lib/packer-async.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar util = __webpack_require__(/*! util */ \"util\");\nvar Stream = __webpack_require__(/*! stream */ \"stream\");\nvar constants = __webpack_require__(/*! ./constants */ \"(ssr)/../node_modules/pngjs/lib/constants.js\");\nvar Packer = __webpack_require__(/*! ./packer */ \"(ssr)/../node_modules/pngjs/lib/packer.js\");\nvar PackerAsync = module.exports = function(opt) {\n    Stream.call(this);\n    var options = opt || {};\n    this._packer = new Packer(options);\n    this._deflate = this._packer.createDeflate();\n    this.readable = true;\n};\nutil.inherits(PackerAsync, Stream);\nPackerAsync.prototype.pack = function(data, width, height, gamma) {\n    // Signature\n    this.emit(\"data\", new Buffer(constants.PNG_SIGNATURE));\n    this.emit(\"data\", this._packer.packIHDR(width, height));\n    if (gamma) {\n        this.emit(\"data\", this._packer.packGAMA(gamma));\n    }\n    var filteredData = this._packer.filterData(data, width, height);\n    // compress it\n    this._deflate.on(\"error\", this.emit.bind(this, \"error\"));\n    this._deflate.on(\"data\", (function(compressedData) {\n        this.emit(\"data\", this._packer.packIDAT(compressedData));\n    }).bind(this));\n    this._deflate.on(\"end\", (function() {\n        this.emit(\"data\", this._packer.packIEND());\n        this.emit(\"end\");\n    }).bind(this));\n    this._deflate.end(filteredData);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL3BuZ2pzL2xpYi9wYWNrZXItYXN5bmMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxPQUFPQyxtQkFBT0EsQ0FBQztBQUNuQixJQUFJQyxTQUFTRCxtQkFBT0EsQ0FBQztBQUNyQixJQUFJRSxZQUFZRixtQkFBT0EsQ0FBQztBQUN4QixJQUFJRyxTQUFTSCxtQkFBT0EsQ0FBQztBQUVyQixJQUFJSSxjQUFjQyxPQUFPQyxPQUFPLEdBQUcsU0FBU0MsR0FBRztJQUM3Q04sT0FBT08sSUFBSSxDQUFDLElBQUk7SUFFaEIsSUFBSUMsVUFBVUYsT0FBTyxDQUFDO0lBRXRCLElBQUksQ0FBQ0csT0FBTyxHQUFHLElBQUlQLE9BQU9NO0lBQzFCLElBQUksQ0FBQ0UsUUFBUSxHQUFHLElBQUksQ0FBQ0QsT0FBTyxDQUFDRSxhQUFhO0lBRTFDLElBQUksQ0FBQ0MsUUFBUSxHQUFHO0FBQ2xCO0FBQ0FkLEtBQUtlLFFBQVEsQ0FBQ1YsYUFBYUg7QUFHM0JHLFlBQVlXLFNBQVMsQ0FBQ0MsSUFBSSxHQUFHLFNBQVNDLElBQUksRUFBRUMsS0FBSyxFQUFFQyxNQUFNLEVBQUVDLEtBQUs7SUFDOUQsWUFBWTtJQUNaLElBQUksQ0FBQ0MsSUFBSSxDQUFDLFFBQVEsSUFBSUMsT0FBT3BCLFVBQVVxQixhQUFhO0lBQ3BELElBQUksQ0FBQ0YsSUFBSSxDQUFDLFFBQVEsSUFBSSxDQUFDWCxPQUFPLENBQUNjLFFBQVEsQ0FBQ04sT0FBT0M7SUFFL0MsSUFBSUMsT0FBTztRQUNULElBQUksQ0FBQ0MsSUFBSSxDQUFDLFFBQVEsSUFBSSxDQUFDWCxPQUFPLENBQUNlLFFBQVEsQ0FBQ0w7SUFDMUM7SUFFQSxJQUFJTSxlQUFlLElBQUksQ0FBQ2hCLE9BQU8sQ0FBQ2lCLFVBQVUsQ0FBQ1YsTUFBTUMsT0FBT0M7SUFFeEQsY0FBYztJQUNkLElBQUksQ0FBQ1IsUUFBUSxDQUFDaUIsRUFBRSxDQUFDLFNBQVMsSUFBSSxDQUFDUCxJQUFJLENBQUNRLElBQUksQ0FBQyxJQUFJLEVBQUU7SUFFL0MsSUFBSSxDQUFDbEIsUUFBUSxDQUFDaUIsRUFBRSxDQUFDLFFBQVEsVUFBU0UsY0FBYztRQUM5QyxJQUFJLENBQUNULElBQUksQ0FBQyxRQUFRLElBQUksQ0FBQ1gsT0FBTyxDQUFDcUIsUUFBUSxDQUFDRDtJQUMxQyxHQUFFRCxJQUFJLENBQUMsSUFBSTtJQUVYLElBQUksQ0FBQ2xCLFFBQVEsQ0FBQ2lCLEVBQUUsQ0FBQyxPQUFPO1FBQ3RCLElBQUksQ0FBQ1AsSUFBSSxDQUFDLFFBQVEsSUFBSSxDQUFDWCxPQUFPLENBQUNzQixRQUFRO1FBQ3ZDLElBQUksQ0FBQ1gsSUFBSSxDQUFDO0lBQ1osR0FBRVEsSUFBSSxDQUFDLElBQUk7SUFFWCxJQUFJLENBQUNsQixRQUFRLENBQUNzQixHQUFHLENBQUNQO0FBQ3BCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9wbmdqcy9saWIvcGFja2VyLWFzeW5jLmpzPzUwMTAiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcbnZhciBTdHJlYW0gPSByZXF1aXJlKCdzdHJlYW0nKTtcbnZhciBjb25zdGFudHMgPSByZXF1aXJlKCcuL2NvbnN0YW50cycpO1xudmFyIFBhY2tlciA9IHJlcXVpcmUoJy4vcGFja2VyJyk7XG5cbnZhciBQYWNrZXJBc3luYyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob3B0KSB7XG4gIFN0cmVhbS5jYWxsKHRoaXMpO1xuXG4gIHZhciBvcHRpb25zID0gb3B0IHx8IHt9O1xuXG4gIHRoaXMuX3BhY2tlciA9IG5ldyBQYWNrZXIob3B0aW9ucyk7XG4gIHRoaXMuX2RlZmxhdGUgPSB0aGlzLl9wYWNrZXIuY3JlYXRlRGVmbGF0ZSgpO1xuXG4gIHRoaXMucmVhZGFibGUgPSB0cnVlO1xufTtcbnV0aWwuaW5oZXJpdHMoUGFja2VyQXN5bmMsIFN0cmVhbSk7XG5cblxuUGFja2VyQXN5bmMucHJvdG90eXBlLnBhY2sgPSBmdW5jdGlvbihkYXRhLCB3aWR0aCwgaGVpZ2h0LCBnYW1tYSkge1xuICAvLyBTaWduYXR1cmVcbiAgdGhpcy5lbWl0KCdkYXRhJywgbmV3IEJ1ZmZlcihjb25zdGFudHMuUE5HX1NJR05BVFVSRSkpO1xuICB0aGlzLmVtaXQoJ2RhdGEnLCB0aGlzLl9wYWNrZXIucGFja0lIRFIod2lkdGgsIGhlaWdodCkpO1xuXG4gIGlmIChnYW1tYSkge1xuICAgIHRoaXMuZW1pdCgnZGF0YScsIHRoaXMuX3BhY2tlci5wYWNrR0FNQShnYW1tYSkpO1xuICB9XG5cbiAgdmFyIGZpbHRlcmVkRGF0YSA9IHRoaXMuX3BhY2tlci5maWx0ZXJEYXRhKGRhdGEsIHdpZHRoLCBoZWlnaHQpO1xuXG4gIC8vIGNvbXByZXNzIGl0XG4gIHRoaXMuX2RlZmxhdGUub24oJ2Vycm9yJywgdGhpcy5lbWl0LmJpbmQodGhpcywgJ2Vycm9yJykpO1xuXG4gIHRoaXMuX2RlZmxhdGUub24oJ2RhdGEnLCBmdW5jdGlvbihjb21wcmVzc2VkRGF0YSkge1xuICAgIHRoaXMuZW1pdCgnZGF0YScsIHRoaXMuX3BhY2tlci5wYWNrSURBVChjb21wcmVzc2VkRGF0YSkpO1xuICB9LmJpbmQodGhpcykpO1xuXG4gIHRoaXMuX2RlZmxhdGUub24oJ2VuZCcsIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuZW1pdCgnZGF0YScsIHRoaXMuX3BhY2tlci5wYWNrSUVORCgpKTtcbiAgICB0aGlzLmVtaXQoJ2VuZCcpO1xuICB9LmJpbmQodGhpcykpO1xuXG4gIHRoaXMuX2RlZmxhdGUuZW5kKGZpbHRlcmVkRGF0YSk7XG59O1xuIl0sIm5hbWVzIjpbInV0aWwiLCJyZXF1aXJlIiwiU3RyZWFtIiwiY29uc3RhbnRzIiwiUGFja2VyIiwiUGFja2VyQXN5bmMiLCJtb2R1bGUiLCJleHBvcnRzIiwib3B0IiwiY2FsbCIsIm9wdGlvbnMiLCJfcGFja2VyIiwiX2RlZmxhdGUiLCJjcmVhdGVEZWZsYXRlIiwicmVhZGFibGUiLCJpbmhlcml0cyIsInByb3RvdHlwZSIsInBhY2siLCJkYXRhIiwid2lkdGgiLCJoZWlnaHQiLCJnYW1tYSIsImVtaXQiLCJCdWZmZXIiLCJQTkdfU0lHTkFUVVJFIiwicGFja0lIRFIiLCJwYWNrR0FNQSIsImZpbHRlcmVkRGF0YSIsImZpbHRlckRhdGEiLCJvbiIsImJpbmQiLCJjb21wcmVzc2VkRGF0YSIsInBhY2tJREFUIiwicGFja0lFTkQiLCJlbmQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/pngjs/lib/packer-async.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/pngjs/lib/packer-sync.js":
/*!************************************************!*\
  !*** ../node_modules/pngjs/lib/packer-sync.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar hasSyncZlib = true;\nvar zlib = __webpack_require__(/*! zlib */ \"zlib\");\nif (!zlib.deflateSync) {\n    hasSyncZlib = false;\n}\nvar constants = __webpack_require__(/*! ./constants */ \"(ssr)/../node_modules/pngjs/lib/constants.js\");\nvar Packer = __webpack_require__(/*! ./packer */ \"(ssr)/../node_modules/pngjs/lib/packer.js\");\nmodule.exports = function(metaData, opt) {\n    if (!hasSyncZlib) {\n        throw new Error(\"To use the sync capability of this library in old node versions, please pin pngjs to v2.3.0\");\n    }\n    var options = opt || {};\n    var packer = new Packer(options);\n    var chunks = [];\n    // Signature\n    chunks.push(new Buffer(constants.PNG_SIGNATURE));\n    // Header\n    chunks.push(packer.packIHDR(metaData.width, metaData.height));\n    if (metaData.gamma) {\n        chunks.push(packer.packGAMA(metaData.gamma));\n    }\n    var filteredData = packer.filterData(metaData.data, metaData.width, metaData.height);\n    // compress it\n    var compressedData = zlib.deflateSync(filteredData, packer.getDeflateOptions());\n    filteredData = null;\n    if (!compressedData || !compressedData.length) {\n        throw new Error(\"bad png - invalid compressed data response\");\n    }\n    chunks.push(packer.packIDAT(compressedData));\n    // End\n    chunks.push(packer.packIEND());\n    return Buffer.concat(chunks);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL3BuZ2pzL2xpYi9wYWNrZXItc3luYy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLGNBQWM7QUFDbEIsSUFBSUMsT0FBT0MsbUJBQU9BLENBQUM7QUFDbkIsSUFBSSxDQUFDRCxLQUFLRSxXQUFXLEVBQUU7SUFDckJILGNBQWM7QUFDaEI7QUFDQSxJQUFJSSxZQUFZRixtQkFBT0EsQ0FBQztBQUN4QixJQUFJRyxTQUFTSCxtQkFBT0EsQ0FBQztBQUVyQkksT0FBT0MsT0FBTyxHQUFHLFNBQVNDLFFBQVEsRUFBRUMsR0FBRztJQUVyQyxJQUFJLENBQUNULGFBQWE7UUFDaEIsTUFBTSxJQUFJVSxNQUFNO0lBQ2xCO0lBRUEsSUFBSUMsVUFBVUYsT0FBTyxDQUFDO0lBRXRCLElBQUlHLFNBQVMsSUFBSVAsT0FBT007SUFFeEIsSUFBSUUsU0FBUyxFQUFFO0lBRWYsWUFBWTtJQUNaQSxPQUFPQyxJQUFJLENBQUMsSUFBSUMsT0FBT1gsVUFBVVksYUFBYTtJQUU5QyxTQUFTO0lBQ1RILE9BQU9DLElBQUksQ0FBQ0YsT0FBT0ssUUFBUSxDQUFDVCxTQUFTVSxLQUFLLEVBQUVWLFNBQVNXLE1BQU07SUFFM0QsSUFBSVgsU0FBU1ksS0FBSyxFQUFFO1FBQ2xCUCxPQUFPQyxJQUFJLENBQUNGLE9BQU9TLFFBQVEsQ0FBQ2IsU0FBU1ksS0FBSztJQUM1QztJQUVBLElBQUlFLGVBQWVWLE9BQU9XLFVBQVUsQ0FBQ2YsU0FBU2dCLElBQUksRUFBRWhCLFNBQVNVLEtBQUssRUFBRVYsU0FBU1csTUFBTTtJQUVuRixjQUFjO0lBQ2QsSUFBSU0saUJBQWlCeEIsS0FBS0UsV0FBVyxDQUFDbUIsY0FBY1YsT0FBT2MsaUJBQWlCO0lBQzVFSixlQUFlO0lBRWYsSUFBSSxDQUFDRyxrQkFBa0IsQ0FBQ0EsZUFBZUUsTUFBTSxFQUFFO1FBQzdDLE1BQU0sSUFBSWpCLE1BQU07SUFDbEI7SUFDQUcsT0FBT0MsSUFBSSxDQUFDRixPQUFPZ0IsUUFBUSxDQUFDSDtJQUU1QixNQUFNO0lBQ05aLE9BQU9DLElBQUksQ0FBQ0YsT0FBT2lCLFFBQVE7SUFFM0IsT0FBT2QsT0FBT2UsTUFBTSxDQUFDakI7QUFDdkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3BuZ2pzL2xpYi9wYWNrZXItc3luYy5qcz8xYjU1Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGhhc1N5bmNabGliID0gdHJ1ZTtcbnZhciB6bGliID0gcmVxdWlyZSgnemxpYicpO1xuaWYgKCF6bGliLmRlZmxhdGVTeW5jKSB7XG4gIGhhc1N5bmNabGliID0gZmFsc2U7XG59XG52YXIgY29uc3RhbnRzID0gcmVxdWlyZSgnLi9jb25zdGFudHMnKTtcbnZhciBQYWNrZXIgPSByZXF1aXJlKCcuL3BhY2tlcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1ldGFEYXRhLCBvcHQpIHtcblxuICBpZiAoIWhhc1N5bmNabGliKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdUbyB1c2UgdGhlIHN5bmMgY2FwYWJpbGl0eSBvZiB0aGlzIGxpYnJhcnkgaW4gb2xkIG5vZGUgdmVyc2lvbnMsIHBsZWFzZSBwaW4gcG5nanMgdG8gdjIuMy4wJyk7XG4gIH1cblxuICB2YXIgb3B0aW9ucyA9IG9wdCB8fCB7fTtcblxuICB2YXIgcGFja2VyID0gbmV3IFBhY2tlcihvcHRpb25zKTtcblxuICB2YXIgY2h1bmtzID0gW107XG5cbiAgLy8gU2lnbmF0dXJlXG4gIGNodW5rcy5wdXNoKG5ldyBCdWZmZXIoY29uc3RhbnRzLlBOR19TSUdOQVRVUkUpKTtcblxuICAvLyBIZWFkZXJcbiAgY2h1bmtzLnB1c2gocGFja2VyLnBhY2tJSERSKG1ldGFEYXRhLndpZHRoLCBtZXRhRGF0YS5oZWlnaHQpKTtcblxuICBpZiAobWV0YURhdGEuZ2FtbWEpIHtcbiAgICBjaHVua3MucHVzaChwYWNrZXIucGFja0dBTUEobWV0YURhdGEuZ2FtbWEpKTtcbiAgfVxuXG4gIHZhciBmaWx0ZXJlZERhdGEgPSBwYWNrZXIuZmlsdGVyRGF0YShtZXRhRGF0YS5kYXRhLCBtZXRhRGF0YS53aWR0aCwgbWV0YURhdGEuaGVpZ2h0KTtcblxuICAvLyBjb21wcmVzcyBpdFxuICB2YXIgY29tcHJlc3NlZERhdGEgPSB6bGliLmRlZmxhdGVTeW5jKGZpbHRlcmVkRGF0YSwgcGFja2VyLmdldERlZmxhdGVPcHRpb25zKCkpO1xuICBmaWx0ZXJlZERhdGEgPSBudWxsO1xuXG4gIGlmICghY29tcHJlc3NlZERhdGEgfHwgIWNvbXByZXNzZWREYXRhLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBFcnJvcignYmFkIHBuZyAtIGludmFsaWQgY29tcHJlc3NlZCBkYXRhIHJlc3BvbnNlJyk7XG4gIH1cbiAgY2h1bmtzLnB1c2gocGFja2VyLnBhY2tJREFUKGNvbXByZXNzZWREYXRhKSk7XG5cbiAgLy8gRW5kXG4gIGNodW5rcy5wdXNoKHBhY2tlci5wYWNrSUVORCgpKTtcblxuICByZXR1cm4gQnVmZmVyLmNvbmNhdChjaHVua3MpO1xufTtcbiJdLCJuYW1lcyI6WyJoYXNTeW5jWmxpYiIsInpsaWIiLCJyZXF1aXJlIiwiZGVmbGF0ZVN5bmMiLCJjb25zdGFudHMiLCJQYWNrZXIiLCJtb2R1bGUiLCJleHBvcnRzIiwibWV0YURhdGEiLCJvcHQiLCJFcnJvciIsIm9wdGlvbnMiLCJwYWNrZXIiLCJjaHVua3MiLCJwdXNoIiwiQnVmZmVyIiwiUE5HX1NJR05BVFVSRSIsInBhY2tJSERSIiwid2lkdGgiLCJoZWlnaHQiLCJnYW1tYSIsInBhY2tHQU1BIiwiZmlsdGVyZWREYXRhIiwiZmlsdGVyRGF0YSIsImRhdGEiLCJjb21wcmVzc2VkRGF0YSIsImdldERlZmxhdGVPcHRpb25zIiwibGVuZ3RoIiwicGFja0lEQVQiLCJwYWNrSUVORCIsImNvbmNhdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/pngjs/lib/packer-sync.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/pngjs/lib/packer.js":
/*!*******************************************!*\
  !*** ../node_modules/pngjs/lib/packer.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar constants = __webpack_require__(/*! ./constants */ \"(ssr)/../node_modules/pngjs/lib/constants.js\");\nvar CrcStream = __webpack_require__(/*! ./crc */ \"(ssr)/../node_modules/pngjs/lib/crc.js\");\nvar bitPacker = __webpack_require__(/*! ./bitpacker */ \"(ssr)/../node_modules/pngjs/lib/bitpacker.js\");\nvar filter = __webpack_require__(/*! ./filter-pack */ \"(ssr)/../node_modules/pngjs/lib/filter-pack.js\");\nvar zlib = __webpack_require__(/*! zlib */ \"zlib\");\nvar Packer = module.exports = function(options) {\n    this._options = options;\n    options.deflateChunkSize = options.deflateChunkSize || 32 * 1024;\n    options.deflateLevel = options.deflateLevel != null ? options.deflateLevel : 9;\n    options.deflateStrategy = options.deflateStrategy != null ? options.deflateStrategy : 3;\n    options.inputHasAlpha = options.inputHasAlpha != null ? options.inputHasAlpha : true;\n    options.deflateFactory = options.deflateFactory || zlib.createDeflate;\n    options.bitDepth = options.bitDepth || 8;\n    // This is outputColorType\n    options.colorType = typeof options.colorType === \"number\" ? options.colorType : constants.COLORTYPE_COLOR_ALPHA;\n    options.inputColorType = typeof options.inputColorType === \"number\" ? options.inputColorType : constants.COLORTYPE_COLOR_ALPHA;\n    if ([\n        constants.COLORTYPE_GRAYSCALE,\n        constants.COLORTYPE_COLOR,\n        constants.COLORTYPE_COLOR_ALPHA,\n        constants.COLORTYPE_ALPHA\n    ].indexOf(options.colorType) === -1) {\n        throw new Error(\"option color type:\" + options.colorType + \" is not supported at present\");\n    }\n    if ([\n        constants.COLORTYPE_GRAYSCALE,\n        constants.COLORTYPE_COLOR,\n        constants.COLORTYPE_COLOR_ALPHA,\n        constants.COLORTYPE_ALPHA\n    ].indexOf(options.inputColorType) === -1) {\n        throw new Error(\"option input color type:\" + options.inputColorType + \" is not supported at present\");\n    }\n    if (options.bitDepth !== 8 && options.bitDepth !== 16) {\n        throw new Error(\"option bit depth:\" + options.bitDepth + \" is not supported at present\");\n    }\n};\nPacker.prototype.getDeflateOptions = function() {\n    return {\n        chunkSize: this._options.deflateChunkSize,\n        level: this._options.deflateLevel,\n        strategy: this._options.deflateStrategy\n    };\n};\nPacker.prototype.createDeflate = function() {\n    return this._options.deflateFactory(this.getDeflateOptions());\n};\nPacker.prototype.filterData = function(data, width, height) {\n    // convert to correct format for filtering (e.g. right bpp and bit depth)\n    var packedData = bitPacker(data, width, height, this._options);\n    // filter pixel data\n    var bpp = constants.COLORTYPE_TO_BPP_MAP[this._options.colorType];\n    var filteredData = filter(packedData, width, height, this._options, bpp);\n    return filteredData;\n};\nPacker.prototype._packChunk = function(type, data) {\n    var len = data ? data.length : 0;\n    var buf = new Buffer(len + 12);\n    buf.writeUInt32BE(len, 0);\n    buf.writeUInt32BE(type, 4);\n    if (data) {\n        data.copy(buf, 8);\n    }\n    buf.writeInt32BE(CrcStream.crc32(buf.slice(4, buf.length - 4)), buf.length - 4);\n    return buf;\n};\nPacker.prototype.packGAMA = function(gamma) {\n    var buf = new Buffer(4);\n    buf.writeUInt32BE(Math.floor(gamma * constants.GAMMA_DIVISION), 0);\n    return this._packChunk(constants.TYPE_gAMA, buf);\n};\nPacker.prototype.packIHDR = function(width, height) {\n    var buf = new Buffer(13);\n    buf.writeUInt32BE(width, 0);\n    buf.writeUInt32BE(height, 4);\n    buf[8] = this._options.bitDepth; // Bit depth\n    buf[9] = this._options.colorType; // colorType\n    buf[10] = 0; // compression\n    buf[11] = 0; // filter\n    buf[12] = 0; // interlace\n    return this._packChunk(constants.TYPE_IHDR, buf);\n};\nPacker.prototype.packIDAT = function(data) {\n    return this._packChunk(constants.TYPE_IDAT, data);\n};\nPacker.prototype.packIEND = function() {\n    return this._packChunk(constants.TYPE_IEND, null);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/pngjs/lib/packer.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/pngjs/lib/paeth-predictor.js":
/*!****************************************************!*\
  !*** ../node_modules/pngjs/lib/paeth-predictor.js ***!
  \****************************************************/
/***/ ((module) => {

eval("\nmodule.exports = function paethPredictor(left, above, upLeft) {\n    var paeth = left + above - upLeft;\n    var pLeft = Math.abs(paeth - left);\n    var pAbove = Math.abs(paeth - above);\n    var pUpLeft = Math.abs(paeth - upLeft);\n    if (pLeft <= pAbove && pLeft <= pUpLeft) {\n        return left;\n    }\n    if (pAbove <= pUpLeft) {\n        return above;\n    }\n    return upLeft;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL3BuZ2pzL2xpYi9wYWV0aC1wcmVkaWN0b3IuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQUEsT0FBT0MsT0FBTyxHQUFHLFNBQVNDLGVBQWVDLElBQUksRUFBRUMsS0FBSyxFQUFFQyxNQUFNO0lBRTFELElBQUlDLFFBQVFILE9BQU9DLFFBQVFDO0lBQzNCLElBQUlFLFFBQVFDLEtBQUtDLEdBQUcsQ0FBQ0gsUUFBUUg7SUFDN0IsSUFBSU8sU0FBU0YsS0FBS0MsR0FBRyxDQUFDSCxRQUFRRjtJQUM5QixJQUFJTyxVQUFVSCxLQUFLQyxHQUFHLENBQUNILFFBQVFEO0lBRS9CLElBQUlFLFNBQVNHLFVBQVVILFNBQVNJLFNBQVM7UUFDdkMsT0FBT1I7SUFDVDtJQUNBLElBQUlPLFVBQVVDLFNBQVM7UUFDckIsT0FBT1A7SUFDVDtJQUNBLE9BQU9DO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3BuZ2pzL2xpYi9wYWV0aC1wcmVkaWN0b3IuanM/MTIzZCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHBhZXRoUHJlZGljdG9yKGxlZnQsIGFib3ZlLCB1cExlZnQpIHtcclxuXHJcbiAgdmFyIHBhZXRoID0gbGVmdCArIGFib3ZlIC0gdXBMZWZ0O1xyXG4gIHZhciBwTGVmdCA9IE1hdGguYWJzKHBhZXRoIC0gbGVmdCk7XHJcbiAgdmFyIHBBYm92ZSA9IE1hdGguYWJzKHBhZXRoIC0gYWJvdmUpO1xyXG4gIHZhciBwVXBMZWZ0ID0gTWF0aC5hYnMocGFldGggLSB1cExlZnQpO1xyXG5cclxuICBpZiAocExlZnQgPD0gcEFib3ZlICYmIHBMZWZ0IDw9IHBVcExlZnQpIHtcclxuICAgIHJldHVybiBsZWZ0O1xyXG4gIH1cclxuICBpZiAocEFib3ZlIDw9IHBVcExlZnQpIHtcclxuICAgIHJldHVybiBhYm92ZTtcclxuICB9XHJcbiAgcmV0dXJuIHVwTGVmdDtcclxufTsiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInBhZXRoUHJlZGljdG9yIiwibGVmdCIsImFib3ZlIiwidXBMZWZ0IiwicGFldGgiLCJwTGVmdCIsIk1hdGgiLCJhYnMiLCJwQWJvdmUiLCJwVXBMZWZ0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/pngjs/lib/paeth-predictor.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/pngjs/lib/parser-async.js":
/*!*************************************************!*\
  !*** ../node_modules/pngjs/lib/parser-async.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar util = __webpack_require__(/*! util */ \"util\");\nvar zlib = __webpack_require__(/*! zlib */ \"zlib\");\nvar ChunkStream = __webpack_require__(/*! ./chunkstream */ \"(ssr)/../node_modules/pngjs/lib/chunkstream.js\");\nvar FilterAsync = __webpack_require__(/*! ./filter-parse-async */ \"(ssr)/../node_modules/pngjs/lib/filter-parse-async.js\");\nvar Parser = __webpack_require__(/*! ./parser */ \"(ssr)/../node_modules/pngjs/lib/parser.js\");\nvar bitmapper = __webpack_require__(/*! ./bitmapper */ \"(ssr)/../node_modules/pngjs/lib/bitmapper.js\");\nvar formatNormaliser = __webpack_require__(/*! ./format-normaliser */ \"(ssr)/../node_modules/pngjs/lib/format-normaliser.js\");\nvar ParserAsync = module.exports = function(options) {\n    ChunkStream.call(this);\n    this._parser = new Parser(options, {\n        read: this.read.bind(this),\n        error: this._handleError.bind(this),\n        metadata: this._handleMetaData.bind(this),\n        gamma: this.emit.bind(this, \"gamma\"),\n        palette: this._handlePalette.bind(this),\n        transColor: this._handleTransColor.bind(this),\n        finished: this._finished.bind(this),\n        inflateData: this._inflateData.bind(this),\n        simpleTransparency: this._simpleTransparency.bind(this),\n        headersFinished: this._headersFinished.bind(this)\n    });\n    this._options = options;\n    this.writable = true;\n    this._parser.start();\n};\nutil.inherits(ParserAsync, ChunkStream);\nParserAsync.prototype._handleError = function(err) {\n    this.emit(\"error\", err);\n    this.writable = false;\n    this.destroy();\n    if (this._inflate && this._inflate.destroy) {\n        this._inflate.destroy();\n    }\n    if (this._filter) {\n        this._filter.destroy();\n        // For backward compatibility with Node 7 and below.\n        // Suppress errors due to _inflate calling write() even after\n        // it's destroy()'ed.\n        this._filter.on(\"error\", function() {});\n    }\n    this.errord = true;\n};\nParserAsync.prototype._inflateData = function(data) {\n    if (!this._inflate) {\n        if (this._bitmapInfo.interlace) {\n            this._inflate = zlib.createInflate();\n            this._inflate.on(\"error\", this.emit.bind(this, \"error\"));\n            this._filter.on(\"complete\", this._complete.bind(this));\n            this._inflate.pipe(this._filter);\n        } else {\n            var rowSize = (this._bitmapInfo.width * this._bitmapInfo.bpp * this._bitmapInfo.depth + 7 >> 3) + 1;\n            var imageSize = rowSize * this._bitmapInfo.height;\n            var chunkSize = Math.max(imageSize, zlib.Z_MIN_CHUNK);\n            this._inflate = zlib.createInflate({\n                chunkSize: chunkSize\n            });\n            var leftToInflate = imageSize;\n            var emitError = this.emit.bind(this, \"error\");\n            this._inflate.on(\"error\", function(err) {\n                if (!leftToInflate) {\n                    return;\n                }\n                emitError(err);\n            });\n            this._filter.on(\"complete\", this._complete.bind(this));\n            var filterWrite = this._filter.write.bind(this._filter);\n            this._inflate.on(\"data\", function(chunk) {\n                if (!leftToInflate) {\n                    return;\n                }\n                if (chunk.length > leftToInflate) {\n                    chunk = chunk.slice(0, leftToInflate);\n                }\n                leftToInflate -= chunk.length;\n                filterWrite(chunk);\n            });\n            this._inflate.on(\"end\", this._filter.end.bind(this._filter));\n        }\n    }\n    this._inflate.write(data);\n};\nParserAsync.prototype._handleMetaData = function(metaData) {\n    this._metaData = metaData;\n    this._bitmapInfo = Object.create(metaData);\n    this._filter = new FilterAsync(this._bitmapInfo);\n};\nParserAsync.prototype._handleTransColor = function(transColor) {\n    this._bitmapInfo.transColor = transColor;\n};\nParserAsync.prototype._handlePalette = function(palette) {\n    this._bitmapInfo.palette = palette;\n};\nParserAsync.prototype._simpleTransparency = function() {\n    this._metaData.alpha = true;\n};\nParserAsync.prototype._headersFinished = function() {\n    // Up until this point, we don't know if we have a tRNS chunk (alpha)\n    // so we can't emit metadata any earlier\n    this.emit(\"metadata\", this._metaData);\n};\nParserAsync.prototype._finished = function() {\n    if (this.errord) {\n        return;\n    }\n    if (!this._inflate) {\n        this.emit(\"error\", \"No Inflate block\");\n    } else {\n        // no more data to inflate\n        this._inflate.end();\n    }\n    this.destroySoon();\n};\nParserAsync.prototype._complete = function(filteredData) {\n    if (this.errord) {\n        return;\n    }\n    try {\n        var bitmapData = bitmapper.dataToBitMap(filteredData, this._bitmapInfo);\n        var normalisedBitmapData = formatNormaliser(bitmapData, this._bitmapInfo);\n        bitmapData = null;\n    } catch (ex) {\n        this._handleError(ex);\n        return;\n    }\n    this.emit(\"parsed\", normalisedBitmapData);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/pngjs/lib/parser-async.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/pngjs/lib/parser-sync.js":
/*!************************************************!*\
  !*** ../node_modules/pngjs/lib/parser-sync.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar hasSyncZlib = true;\nvar zlib = __webpack_require__(/*! zlib */ \"zlib\");\nvar inflateSync = __webpack_require__(/*! ./sync-inflate */ \"(ssr)/../node_modules/pngjs/lib/sync-inflate.js\");\nif (!zlib.deflateSync) {\n    hasSyncZlib = false;\n}\nvar SyncReader = __webpack_require__(/*! ./sync-reader */ \"(ssr)/../node_modules/pngjs/lib/sync-reader.js\");\nvar FilterSync = __webpack_require__(/*! ./filter-parse-sync */ \"(ssr)/../node_modules/pngjs/lib/filter-parse-sync.js\");\nvar Parser = __webpack_require__(/*! ./parser */ \"(ssr)/../node_modules/pngjs/lib/parser.js\");\nvar bitmapper = __webpack_require__(/*! ./bitmapper */ \"(ssr)/../node_modules/pngjs/lib/bitmapper.js\");\nvar formatNormaliser = __webpack_require__(/*! ./format-normaliser */ \"(ssr)/../node_modules/pngjs/lib/format-normaliser.js\");\nmodule.exports = function(buffer, options) {\n    if (!hasSyncZlib) {\n        throw new Error(\"To use the sync capability of this library in old node versions, please pin pngjs to v2.3.0\");\n    }\n    var err;\n    function handleError(_err_) {\n        err = _err_;\n    }\n    var metaData;\n    function handleMetaData(_metaData_) {\n        metaData = _metaData_;\n    }\n    function handleTransColor(transColor) {\n        metaData.transColor = transColor;\n    }\n    function handlePalette(palette) {\n        metaData.palette = palette;\n    }\n    function handleSimpleTransparency() {\n        metaData.alpha = true;\n    }\n    var gamma;\n    function handleGamma(_gamma_) {\n        gamma = _gamma_;\n    }\n    var inflateDataList = [];\n    function handleInflateData(inflatedData) {\n        inflateDataList.push(inflatedData);\n    }\n    var reader = new SyncReader(buffer);\n    var parser = new Parser(options, {\n        read: reader.read.bind(reader),\n        error: handleError,\n        metadata: handleMetaData,\n        gamma: handleGamma,\n        palette: handlePalette,\n        transColor: handleTransColor,\n        inflateData: handleInflateData,\n        simpleTransparency: handleSimpleTransparency\n    });\n    parser.start();\n    reader.process();\n    if (err) {\n        throw err;\n    }\n    //join together the inflate datas\n    var inflateData = Buffer.concat(inflateDataList);\n    inflateDataList.length = 0;\n    var inflatedData;\n    if (metaData.interlace) {\n        inflatedData = zlib.inflateSync(inflateData);\n    } else {\n        var rowSize = (metaData.width * metaData.bpp * metaData.depth + 7 >> 3) + 1;\n        var imageSize = rowSize * metaData.height;\n        inflatedData = inflateSync(inflateData, {\n            chunkSize: imageSize,\n            maxLength: imageSize\n        });\n    }\n    inflateData = null;\n    if (!inflatedData || !inflatedData.length) {\n        throw new Error(\"bad png - invalid inflate data response\");\n    }\n    var unfilteredData = FilterSync.process(inflatedData, metaData);\n    inflateData = null;\n    var bitmapData = bitmapper.dataToBitMap(unfilteredData, metaData);\n    unfilteredData = null;\n    var normalisedBitmapData = formatNormaliser(bitmapData, metaData);\n    metaData.data = normalisedBitmapData;\n    metaData.gamma = gamma || 0;\n    return metaData;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL3BuZ2pzL2xpYi9wYXJzZXItc3luYy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLGNBQWM7QUFDbEIsSUFBSUMsT0FBT0MsbUJBQU9BLENBQUM7QUFDbkIsSUFBSUMsY0FBY0QsbUJBQU9BLENBQUM7QUFDMUIsSUFBSSxDQUFDRCxLQUFLRyxXQUFXLEVBQUU7SUFDckJKLGNBQWM7QUFDaEI7QUFDQSxJQUFJSyxhQUFhSCxtQkFBT0EsQ0FBQztBQUN6QixJQUFJSSxhQUFhSixtQkFBT0EsQ0FBQztBQUN6QixJQUFJSyxTQUFTTCxtQkFBT0EsQ0FBQztBQUNyQixJQUFJTSxZQUFZTixtQkFBT0EsQ0FBQztBQUN4QixJQUFJTyxtQkFBbUJQLG1CQUFPQSxDQUFDO0FBRy9CUSxPQUFPQyxPQUFPLEdBQUcsU0FBU0MsTUFBTSxFQUFFQyxPQUFPO0lBRXZDLElBQUksQ0FBQ2IsYUFBYTtRQUNoQixNQUFNLElBQUljLE1BQU07SUFDbEI7SUFFQSxJQUFJQztJQUNKLFNBQVNDLFlBQVlDLEtBQUs7UUFDeEJGLE1BQU1FO0lBQ1I7SUFFQSxJQUFJQztJQUNKLFNBQVNDLGVBQWVDLFVBQVU7UUFDaENGLFdBQVdFO0lBQ2I7SUFFQSxTQUFTQyxpQkFBaUJDLFVBQVU7UUFDbENKLFNBQVNJLFVBQVUsR0FBR0E7SUFDeEI7SUFFQSxTQUFTQyxjQUFjQyxPQUFPO1FBQzVCTixTQUFTTSxPQUFPLEdBQUdBO0lBQ3JCO0lBRUEsU0FBU0M7UUFDUFAsU0FBU1EsS0FBSyxHQUFHO0lBQ25CO0lBRUEsSUFBSUM7SUFDSixTQUFTQyxZQUFZQyxPQUFPO1FBQzFCRixRQUFRRTtJQUNWO0lBRUEsSUFBSUMsa0JBQWtCLEVBQUU7SUFDeEIsU0FBU0Msa0JBQWtCQyxZQUFZO1FBQ3JDRixnQkFBZ0JHLElBQUksQ0FBQ0Q7SUFDdkI7SUFFQSxJQUFJRSxTQUFTLElBQUk3QixXQUFXTztJQUU1QixJQUFJdUIsU0FBUyxJQUFJNUIsT0FBT00sU0FBUztRQUMvQnVCLE1BQU1GLE9BQU9FLElBQUksQ0FBQ0MsSUFBSSxDQUFDSDtRQUN2QkksT0FBT3RCO1FBQ1B1QixVQUFVcEI7UUFDVlEsT0FBT0M7UUFDUEosU0FBU0Q7UUFDVEQsWUFBWUQ7UUFDWm1CLGFBQWFUO1FBQ2JVLG9CQUFvQmhCO0lBQ3RCO0lBRUFVLE9BQU9PLEtBQUs7SUFDWlIsT0FBT1MsT0FBTztJQUVkLElBQUk1QixLQUFLO1FBQ1AsTUFBTUE7SUFDUjtJQUVBLGlDQUFpQztJQUNqQyxJQUFJeUIsY0FBY0ksT0FBT0MsTUFBTSxDQUFDZjtJQUNoQ0EsZ0JBQWdCZ0IsTUFBTSxHQUFHO0lBRXpCLElBQUlkO0lBQ0osSUFBSWQsU0FBUzZCLFNBQVMsRUFBRTtRQUN0QmYsZUFBZS9CLEtBQUtFLFdBQVcsQ0FBQ3FDO0lBQ2xDLE9BQ0s7UUFDSCxJQUFJUSxVQUFVLENBQUMsU0FBVUMsS0FBSyxHQUFHL0IsU0FBU2dDLEdBQUcsR0FBR2hDLFNBQVNpQyxLQUFLLEdBQUcsS0FBTSxLQUFLO1FBQzVFLElBQUlDLFlBQVlKLFVBQVU5QixTQUFTbUMsTUFBTTtRQUN6Q3JCLGVBQWU3QixZQUFZcUMsYUFBYTtZQUFFYyxXQUFXRjtZQUFXRyxXQUFXSDtRQUFVO0lBQ3ZGO0lBQ0FaLGNBQWM7SUFFZCxJQUFJLENBQUNSLGdCQUFnQixDQUFDQSxhQUFhYyxNQUFNLEVBQUU7UUFDekMsTUFBTSxJQUFJaEMsTUFBTTtJQUNsQjtJQUVBLElBQUkwQyxpQkFBaUJsRCxXQUFXcUMsT0FBTyxDQUFDWCxjQUFjZDtJQUN0RHNCLGNBQWM7SUFFZCxJQUFJaUIsYUFBYWpELFVBQVVrRCxZQUFZLENBQUNGLGdCQUFnQnRDO0lBQ3hEc0MsaUJBQWlCO0lBRWpCLElBQUlHLHVCQUF1QmxELGlCQUFpQmdELFlBQVl2QztJQUV4REEsU0FBUzBDLElBQUksR0FBR0Q7SUFDaEJ6QyxTQUFTUyxLQUFLLEdBQUdBLFNBQVM7SUFFMUIsT0FBT1Q7QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvcG5nanMvbGliL3BhcnNlci1zeW5jLmpzPzU5NzIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzU3luY1psaWIgPSB0cnVlO1xudmFyIHpsaWIgPSByZXF1aXJlKCd6bGliJyk7XG52YXIgaW5mbGF0ZVN5bmMgPSByZXF1aXJlKCcuL3N5bmMtaW5mbGF0ZScpO1xuaWYgKCF6bGliLmRlZmxhdGVTeW5jKSB7XG4gIGhhc1N5bmNabGliID0gZmFsc2U7XG59XG52YXIgU3luY1JlYWRlciA9IHJlcXVpcmUoJy4vc3luYy1yZWFkZXInKTtcbnZhciBGaWx0ZXJTeW5jID0gcmVxdWlyZSgnLi9maWx0ZXItcGFyc2Utc3luYycpO1xudmFyIFBhcnNlciA9IHJlcXVpcmUoJy4vcGFyc2VyJyk7XG52YXIgYml0bWFwcGVyID0gcmVxdWlyZSgnLi9iaXRtYXBwZXInKTtcbnZhciBmb3JtYXROb3JtYWxpc2VyID0gcmVxdWlyZSgnLi9mb3JtYXQtbm9ybWFsaXNlcicpO1xuXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oYnVmZmVyLCBvcHRpb25zKSB7XG5cbiAgaWYgKCFoYXNTeW5jWmxpYikge1xuICAgIHRocm93IG5ldyBFcnJvcignVG8gdXNlIHRoZSBzeW5jIGNhcGFiaWxpdHkgb2YgdGhpcyBsaWJyYXJ5IGluIG9sZCBub2RlIHZlcnNpb25zLCBwbGVhc2UgcGluIHBuZ2pzIHRvIHYyLjMuMCcpO1xuICB9XG5cbiAgdmFyIGVycjtcbiAgZnVuY3Rpb24gaGFuZGxlRXJyb3IoX2Vycl8pIHtcbiAgICBlcnIgPSBfZXJyXztcbiAgfVxuXG4gIHZhciBtZXRhRGF0YTtcbiAgZnVuY3Rpb24gaGFuZGxlTWV0YURhdGEoX21ldGFEYXRhXykge1xuICAgIG1ldGFEYXRhID0gX21ldGFEYXRhXztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVRyYW5zQ29sb3IodHJhbnNDb2xvcikge1xuICAgIG1ldGFEYXRhLnRyYW5zQ29sb3IgPSB0cmFuc0NvbG9yO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlUGFsZXR0ZShwYWxldHRlKSB7XG4gICAgbWV0YURhdGEucGFsZXR0ZSA9IHBhbGV0dGU7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVTaW1wbGVUcmFuc3BhcmVuY3koKSB7XG4gICAgbWV0YURhdGEuYWxwaGEgPSB0cnVlO1xuICB9XG5cbiAgdmFyIGdhbW1hO1xuICBmdW5jdGlvbiBoYW5kbGVHYW1tYShfZ2FtbWFfKSB7XG4gICAgZ2FtbWEgPSBfZ2FtbWFfO1xuICB9XG5cbiAgdmFyIGluZmxhdGVEYXRhTGlzdCA9IFtdO1xuICBmdW5jdGlvbiBoYW5kbGVJbmZsYXRlRGF0YShpbmZsYXRlZERhdGEpIHtcbiAgICBpbmZsYXRlRGF0YUxpc3QucHVzaChpbmZsYXRlZERhdGEpO1xuICB9XG5cbiAgdmFyIHJlYWRlciA9IG5ldyBTeW5jUmVhZGVyKGJ1ZmZlcik7XG5cbiAgdmFyIHBhcnNlciA9IG5ldyBQYXJzZXIob3B0aW9ucywge1xuICAgIHJlYWQ6IHJlYWRlci5yZWFkLmJpbmQocmVhZGVyKSxcbiAgICBlcnJvcjogaGFuZGxlRXJyb3IsXG4gICAgbWV0YWRhdGE6IGhhbmRsZU1ldGFEYXRhLFxuICAgIGdhbW1hOiBoYW5kbGVHYW1tYSxcbiAgICBwYWxldHRlOiBoYW5kbGVQYWxldHRlLFxuICAgIHRyYW5zQ29sb3I6IGhhbmRsZVRyYW5zQ29sb3IsXG4gICAgaW5mbGF0ZURhdGE6IGhhbmRsZUluZmxhdGVEYXRhLFxuICAgIHNpbXBsZVRyYW5zcGFyZW5jeTogaGFuZGxlU2ltcGxlVHJhbnNwYXJlbmN5XG4gIH0pO1xuXG4gIHBhcnNlci5zdGFydCgpO1xuICByZWFkZXIucHJvY2VzcygpO1xuXG4gIGlmIChlcnIpIHtcbiAgICB0aHJvdyBlcnI7XG4gIH1cblxuICAvL2pvaW4gdG9nZXRoZXIgdGhlIGluZmxhdGUgZGF0YXNcbiAgdmFyIGluZmxhdGVEYXRhID0gQnVmZmVyLmNvbmNhdChpbmZsYXRlRGF0YUxpc3QpO1xuICBpbmZsYXRlRGF0YUxpc3QubGVuZ3RoID0gMDtcblxuICB2YXIgaW5mbGF0ZWREYXRhO1xuICBpZiAobWV0YURhdGEuaW50ZXJsYWNlKSB7XG4gICAgaW5mbGF0ZWREYXRhID0gemxpYi5pbmZsYXRlU3luYyhpbmZsYXRlRGF0YSk7XG4gIH1cbiAgZWxzZSB7XG4gICAgdmFyIHJvd1NpemUgPSAoKG1ldGFEYXRhLndpZHRoICogbWV0YURhdGEuYnBwICogbWV0YURhdGEuZGVwdGggKyA3KSA+PiAzKSArIDE7XG4gICAgdmFyIGltYWdlU2l6ZSA9IHJvd1NpemUgKiBtZXRhRGF0YS5oZWlnaHQ7XG4gICAgaW5mbGF0ZWREYXRhID0gaW5mbGF0ZVN5bmMoaW5mbGF0ZURhdGEsIHsgY2h1bmtTaXplOiBpbWFnZVNpemUsIG1heExlbmd0aDogaW1hZ2VTaXplIH0pO1xuICB9XG4gIGluZmxhdGVEYXRhID0gbnVsbDtcblxuICBpZiAoIWluZmxhdGVkRGF0YSB8fCAhaW5mbGF0ZWREYXRhLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBFcnJvcignYmFkIHBuZyAtIGludmFsaWQgaW5mbGF0ZSBkYXRhIHJlc3BvbnNlJyk7XG4gIH1cblxuICB2YXIgdW5maWx0ZXJlZERhdGEgPSBGaWx0ZXJTeW5jLnByb2Nlc3MoaW5mbGF0ZWREYXRhLCBtZXRhRGF0YSk7XG4gIGluZmxhdGVEYXRhID0gbnVsbDtcblxuICB2YXIgYml0bWFwRGF0YSA9IGJpdG1hcHBlci5kYXRhVG9CaXRNYXAodW5maWx0ZXJlZERhdGEsIG1ldGFEYXRhKTtcbiAgdW5maWx0ZXJlZERhdGEgPSBudWxsO1xuXG4gIHZhciBub3JtYWxpc2VkQml0bWFwRGF0YSA9IGZvcm1hdE5vcm1hbGlzZXIoYml0bWFwRGF0YSwgbWV0YURhdGEpO1xuXG4gIG1ldGFEYXRhLmRhdGEgPSBub3JtYWxpc2VkQml0bWFwRGF0YTtcbiAgbWV0YURhdGEuZ2FtbWEgPSBnYW1tYSB8fCAwO1xuXG4gIHJldHVybiBtZXRhRGF0YTtcbn07XG4iXSwibmFtZXMiOlsiaGFzU3luY1psaWIiLCJ6bGliIiwicmVxdWlyZSIsImluZmxhdGVTeW5jIiwiZGVmbGF0ZVN5bmMiLCJTeW5jUmVhZGVyIiwiRmlsdGVyU3luYyIsIlBhcnNlciIsImJpdG1hcHBlciIsImZvcm1hdE5vcm1hbGlzZXIiLCJtb2R1bGUiLCJleHBvcnRzIiwiYnVmZmVyIiwib3B0aW9ucyIsIkVycm9yIiwiZXJyIiwiaGFuZGxlRXJyb3IiLCJfZXJyXyIsIm1ldGFEYXRhIiwiaGFuZGxlTWV0YURhdGEiLCJfbWV0YURhdGFfIiwiaGFuZGxlVHJhbnNDb2xvciIsInRyYW5zQ29sb3IiLCJoYW5kbGVQYWxldHRlIiwicGFsZXR0ZSIsImhhbmRsZVNpbXBsZVRyYW5zcGFyZW5jeSIsImFscGhhIiwiZ2FtbWEiLCJoYW5kbGVHYW1tYSIsIl9nYW1tYV8iLCJpbmZsYXRlRGF0YUxpc3QiLCJoYW5kbGVJbmZsYXRlRGF0YSIsImluZmxhdGVkRGF0YSIsInB1c2giLCJyZWFkZXIiLCJwYXJzZXIiLCJyZWFkIiwiYmluZCIsImVycm9yIiwibWV0YWRhdGEiLCJpbmZsYXRlRGF0YSIsInNpbXBsZVRyYW5zcGFyZW5jeSIsInN0YXJ0IiwicHJvY2VzcyIsIkJ1ZmZlciIsImNvbmNhdCIsImxlbmd0aCIsImludGVybGFjZSIsInJvd1NpemUiLCJ3aWR0aCIsImJwcCIsImRlcHRoIiwiaW1hZ2VTaXplIiwiaGVpZ2h0IiwiY2h1bmtTaXplIiwibWF4TGVuZ3RoIiwidW5maWx0ZXJlZERhdGEiLCJiaXRtYXBEYXRhIiwiZGF0YVRvQml0TWFwIiwibm9ybWFsaXNlZEJpdG1hcERhdGEiLCJkYXRhIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/pngjs/lib/parser-sync.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/pngjs/lib/parser.js":
/*!*******************************************!*\
  !*** ../node_modules/pngjs/lib/parser.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar constants = __webpack_require__(/*! ./constants */ \"(ssr)/../node_modules/pngjs/lib/constants.js\");\nvar CrcCalculator = __webpack_require__(/*! ./crc */ \"(ssr)/../node_modules/pngjs/lib/crc.js\");\nvar Parser = module.exports = function(options, dependencies) {\n    this._options = options;\n    options.checkCRC = options.checkCRC !== false;\n    this._hasIHDR = false;\n    this._hasIEND = false;\n    this._emittedHeadersFinished = false;\n    // input flags/metadata\n    this._palette = [];\n    this._colorType = 0;\n    this._chunks = {};\n    this._chunks[constants.TYPE_IHDR] = this._handleIHDR.bind(this);\n    this._chunks[constants.TYPE_IEND] = this._handleIEND.bind(this);\n    this._chunks[constants.TYPE_IDAT] = this._handleIDAT.bind(this);\n    this._chunks[constants.TYPE_PLTE] = this._handlePLTE.bind(this);\n    this._chunks[constants.TYPE_tRNS] = this._handleTRNS.bind(this);\n    this._chunks[constants.TYPE_gAMA] = this._handleGAMA.bind(this);\n    this.read = dependencies.read;\n    this.error = dependencies.error;\n    this.metadata = dependencies.metadata;\n    this.gamma = dependencies.gamma;\n    this.transColor = dependencies.transColor;\n    this.palette = dependencies.palette;\n    this.parsed = dependencies.parsed;\n    this.inflateData = dependencies.inflateData;\n    this.finished = dependencies.finished;\n    this.simpleTransparency = dependencies.simpleTransparency;\n    this.headersFinished = dependencies.headersFinished || function() {};\n};\nParser.prototype.start = function() {\n    this.read(constants.PNG_SIGNATURE.length, this._parseSignature.bind(this));\n};\nParser.prototype._parseSignature = function(data) {\n    var signature = constants.PNG_SIGNATURE;\n    for(var i = 0; i < signature.length; i++){\n        if (data[i] !== signature[i]) {\n            this.error(new Error(\"Invalid file signature\"));\n            return;\n        }\n    }\n    this.read(8, this._parseChunkBegin.bind(this));\n};\nParser.prototype._parseChunkBegin = function(data) {\n    // chunk content length\n    var length = data.readUInt32BE(0);\n    // chunk type\n    var type = data.readUInt32BE(4);\n    var name = \"\";\n    for(var i = 4; i < 8; i++){\n        name += String.fromCharCode(data[i]);\n    }\n    //console.log('chunk ', name, length);\n    // chunk flags\n    var ancillary = Boolean(data[4] & 0x20); // or critical\n    //    priv = Boolean(data[5] & 0x20), // or public\n    //    safeToCopy = Boolean(data[7] & 0x20); // or unsafe\n    if (!this._hasIHDR && type !== constants.TYPE_IHDR) {\n        this.error(new Error(\"Expected IHDR on beggining\"));\n        return;\n    }\n    this._crc = new CrcCalculator();\n    this._crc.write(new Buffer(name));\n    if (this._chunks[type]) {\n        return this._chunks[type](length);\n    }\n    if (!ancillary) {\n        this.error(new Error(\"Unsupported critical chunk type \" + name));\n        return;\n    }\n    this.read(length + 4, this._skipChunk.bind(this));\n};\nParser.prototype._skipChunk = function() {\n    this.read(8, this._parseChunkBegin.bind(this));\n};\nParser.prototype._handleChunkEnd = function() {\n    this.read(4, this._parseChunkEnd.bind(this));\n};\nParser.prototype._parseChunkEnd = function(data) {\n    var fileCrc = data.readInt32BE(0);\n    var calcCrc = this._crc.crc32();\n    // check CRC\n    if (this._options.checkCRC && calcCrc !== fileCrc) {\n        this.error(new Error(\"Crc error - \" + fileCrc + \" - \" + calcCrc));\n        return;\n    }\n    if (!this._hasIEND) {\n        this.read(8, this._parseChunkBegin.bind(this));\n    }\n};\nParser.prototype._handleIHDR = function(length) {\n    this.read(length, this._parseIHDR.bind(this));\n};\nParser.prototype._parseIHDR = function(data) {\n    this._crc.write(data);\n    var width = data.readUInt32BE(0);\n    var height = data.readUInt32BE(4);\n    var depth = data[8];\n    var colorType = data[9]; // bits: 1 palette, 2 color, 4 alpha\n    var compr = data[10];\n    var filter = data[11];\n    var interlace = data[12];\n    // console.log('    width', width, 'height', height,\n    //     'depth', depth, 'colorType', colorType,\n    //     'compr', compr, 'filter', filter, 'interlace', interlace\n    // );\n    if (depth !== 8 && depth !== 4 && depth !== 2 && depth !== 1 && depth !== 16) {\n        this.error(new Error(\"Unsupported bit depth \" + depth));\n        return;\n    }\n    if (!(colorType in constants.COLORTYPE_TO_BPP_MAP)) {\n        this.error(new Error(\"Unsupported color type\"));\n        return;\n    }\n    if (compr !== 0) {\n        this.error(new Error(\"Unsupported compression method\"));\n        return;\n    }\n    if (filter !== 0) {\n        this.error(new Error(\"Unsupported filter method\"));\n        return;\n    }\n    if (interlace !== 0 && interlace !== 1) {\n        this.error(new Error(\"Unsupported interlace method\"));\n        return;\n    }\n    this._colorType = colorType;\n    var bpp = constants.COLORTYPE_TO_BPP_MAP[this._colorType];\n    this._hasIHDR = true;\n    this.metadata({\n        width: width,\n        height: height,\n        depth: depth,\n        interlace: Boolean(interlace),\n        palette: Boolean(colorType & constants.COLORTYPE_PALETTE),\n        color: Boolean(colorType & constants.COLORTYPE_COLOR),\n        alpha: Boolean(colorType & constants.COLORTYPE_ALPHA),\n        bpp: bpp,\n        colorType: colorType\n    });\n    this._handleChunkEnd();\n};\nParser.prototype._handlePLTE = function(length) {\n    this.read(length, this._parsePLTE.bind(this));\n};\nParser.prototype._parsePLTE = function(data) {\n    this._crc.write(data);\n    var entries = Math.floor(data.length / 3);\n    // console.log('Palette:', entries);\n    for(var i = 0; i < entries; i++){\n        this._palette.push([\n            data[i * 3],\n            data[i * 3 + 1],\n            data[i * 3 + 2],\n            0xff\n        ]);\n    }\n    this.palette(this._palette);\n    this._handleChunkEnd();\n};\nParser.prototype._handleTRNS = function(length) {\n    this.simpleTransparency();\n    this.read(length, this._parseTRNS.bind(this));\n};\nParser.prototype._parseTRNS = function(data) {\n    this._crc.write(data);\n    // palette\n    if (this._colorType === constants.COLORTYPE_PALETTE_COLOR) {\n        if (this._palette.length === 0) {\n            this.error(new Error(\"Transparency chunk must be after palette\"));\n            return;\n        }\n        if (data.length > this._palette.length) {\n            this.error(new Error(\"More transparent colors than palette size\"));\n            return;\n        }\n        for(var i = 0; i < data.length; i++){\n            this._palette[i][3] = data[i];\n        }\n        this.palette(this._palette);\n    }\n    // for colorType 0 (grayscale) and 2 (rgb)\n    // there might be one gray/color defined as transparent\n    if (this._colorType === constants.COLORTYPE_GRAYSCALE) {\n        // grey, 2 bytes\n        this.transColor([\n            data.readUInt16BE(0)\n        ]);\n    }\n    if (this._colorType === constants.COLORTYPE_COLOR) {\n        this.transColor([\n            data.readUInt16BE(0),\n            data.readUInt16BE(2),\n            data.readUInt16BE(4)\n        ]);\n    }\n    this._handleChunkEnd();\n};\nParser.prototype._handleGAMA = function(length) {\n    this.read(length, this._parseGAMA.bind(this));\n};\nParser.prototype._parseGAMA = function(data) {\n    this._crc.write(data);\n    this.gamma(data.readUInt32BE(0) / constants.GAMMA_DIVISION);\n    this._handleChunkEnd();\n};\nParser.prototype._handleIDAT = function(length) {\n    if (!this._emittedHeadersFinished) {\n        this._emittedHeadersFinished = true;\n        this.headersFinished();\n    }\n    this.read(-length, this._parseIDAT.bind(this, length));\n};\nParser.prototype._parseIDAT = function(length, data) {\n    this._crc.write(data);\n    if (this._colorType === constants.COLORTYPE_PALETTE_COLOR && this._palette.length === 0) {\n        throw new Error(\"Expected palette not found\");\n    }\n    this.inflateData(data);\n    var leftOverLength = length - data.length;\n    if (leftOverLength > 0) {\n        this._handleIDAT(leftOverLength);\n    } else {\n        this._handleChunkEnd();\n    }\n};\nParser.prototype._handleIEND = function(length) {\n    this.read(length, this._parseIEND.bind(this));\n};\nParser.prototype._parseIEND = function(data) {\n    this._crc.write(data);\n    this._hasIEND = true;\n    this._handleChunkEnd();\n    if (this.finished) {\n        this.finished();\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/pngjs/lib/parser.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/pngjs/lib/png-sync.js":
/*!*********************************************!*\
  !*** ../node_modules/pngjs/lib/png-sync.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar parse = __webpack_require__(/*! ./parser-sync */ \"(ssr)/../node_modules/pngjs/lib/parser-sync.js\");\nvar pack = __webpack_require__(/*! ./packer-sync */ \"(ssr)/../node_modules/pngjs/lib/packer-sync.js\");\nexports.read = function(buffer, options) {\n    return parse(buffer, options || {});\n};\nexports.write = function(png, options) {\n    return pack(png, options);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL3BuZ2pzL2xpYi9wbmctc3luYy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUdBLElBQUlBLFFBQVFDLG1CQUFPQSxDQUFDO0FBQ3BCLElBQUlDLE9BQU9ELG1CQUFPQSxDQUFDO0FBR25CRSxZQUFZLEdBQUcsU0FBU0UsTUFBTSxFQUFFQyxPQUFPO0lBRXJDLE9BQU9OLE1BQU1LLFFBQVFDLFdBQVcsQ0FBQztBQUNuQztBQUVBSCxhQUFhLEdBQUcsU0FBU0ssR0FBRyxFQUFFRixPQUFPO0lBRW5DLE9BQU9KLEtBQUtNLEtBQUtGO0FBQ25CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9wbmdqcy9saWIvcG5nLXN5bmMuanM/M2I3OSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cblxudmFyIHBhcnNlID0gcmVxdWlyZSgnLi9wYXJzZXItc3luYycpO1xudmFyIHBhY2sgPSByZXF1aXJlKCcuL3BhY2tlci1zeW5jJyk7XG5cblxuZXhwb3J0cy5yZWFkID0gZnVuY3Rpb24oYnVmZmVyLCBvcHRpb25zKSB7XG5cbiAgcmV0dXJuIHBhcnNlKGJ1ZmZlciwgb3B0aW9ucyB8fCB7fSk7XG59O1xuXG5leHBvcnRzLndyaXRlID0gZnVuY3Rpb24ocG5nLCBvcHRpb25zKSB7XG5cbiAgcmV0dXJuIHBhY2socG5nLCBvcHRpb25zKTtcbn07XG4iXSwibmFtZXMiOlsicGFyc2UiLCJyZXF1aXJlIiwicGFjayIsImV4cG9ydHMiLCJyZWFkIiwiYnVmZmVyIiwib3B0aW9ucyIsIndyaXRlIiwicG5nIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/pngjs/lib/png-sync.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/pngjs/lib/png.js":
/*!****************************************!*\
  !*** ../node_modules/pngjs/lib/png.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar util = __webpack_require__(/*! util */ \"util\");\nvar Stream = __webpack_require__(/*! stream */ \"stream\");\nvar Parser = __webpack_require__(/*! ./parser-async */ \"(ssr)/../node_modules/pngjs/lib/parser-async.js\");\nvar Packer = __webpack_require__(/*! ./packer-async */ \"(ssr)/../node_modules/pngjs/lib/packer-async.js\");\nvar PNGSync = __webpack_require__(/*! ./png-sync */ \"(ssr)/../node_modules/pngjs/lib/png-sync.js\");\nvar PNG = exports.PNG = function(options) {\n    Stream.call(this);\n    options = options || {}; // eslint-disable-line no-param-reassign\n    // coerce pixel dimensions to integers (also coerces undefined -> 0):\n    this.width = options.width | 0;\n    this.height = options.height | 0;\n    this.data = this.width > 0 && this.height > 0 ? new Buffer(4 * this.width * this.height) : null;\n    if (options.fill && this.data) {\n        this.data.fill(0);\n    }\n    this.gamma = 0;\n    this.readable = this.writable = true;\n    this._parser = new Parser(options);\n    this._parser.on(\"error\", this.emit.bind(this, \"error\"));\n    this._parser.on(\"close\", this._handleClose.bind(this));\n    this._parser.on(\"metadata\", this._metadata.bind(this));\n    this._parser.on(\"gamma\", this._gamma.bind(this));\n    this._parser.on(\"parsed\", (function(data) {\n        this.data = data;\n        this.emit(\"parsed\", data);\n    }).bind(this));\n    this._packer = new Packer(options);\n    this._packer.on(\"data\", this.emit.bind(this, \"data\"));\n    this._packer.on(\"end\", this.emit.bind(this, \"end\"));\n    this._parser.on(\"close\", this._handleClose.bind(this));\n    this._packer.on(\"error\", this.emit.bind(this, \"error\"));\n};\nutil.inherits(PNG, Stream);\nPNG.sync = PNGSync;\nPNG.prototype.pack = function() {\n    if (!this.data || !this.data.length) {\n        this.emit(\"error\", \"No data provided\");\n        return this;\n    }\n    process.nextTick((function() {\n        this._packer.pack(this.data, this.width, this.height, this.gamma);\n    }).bind(this));\n    return this;\n};\nPNG.prototype.parse = function(data, callback) {\n    if (callback) {\n        var onParsed, onError;\n        onParsed = (function(parsedData) {\n            this.removeListener(\"error\", onError);\n            this.data = parsedData;\n            callback(null, this);\n        }).bind(this);\n        onError = (function(err) {\n            this.removeListener(\"parsed\", onParsed);\n            callback(err, null);\n        }).bind(this);\n        this.once(\"parsed\", onParsed);\n        this.once(\"error\", onError);\n    }\n    this.end(data);\n    return this;\n};\nPNG.prototype.write = function(data) {\n    this._parser.write(data);\n    return true;\n};\nPNG.prototype.end = function(data) {\n    this._parser.end(data);\n};\nPNG.prototype._metadata = function(metadata) {\n    this.width = metadata.width;\n    this.height = metadata.height;\n    this.emit(\"metadata\", metadata);\n};\nPNG.prototype._gamma = function(gamma) {\n    this.gamma = gamma;\n};\nPNG.prototype._handleClose = function() {\n    if (!this._parser.writable && !this._packer.readable) {\n        this.emit(\"close\");\n    }\n};\nPNG.bitblt = function(src, dst, srcX, srcY, width, height, deltaX, deltaY) {\n    // coerce pixel dimensions to integers (also coerces undefined -> 0):\n    /* eslint-disable no-param-reassign */ srcX |= 0;\n    srcY |= 0;\n    width |= 0;\n    height |= 0;\n    deltaX |= 0;\n    deltaY |= 0;\n    /* eslint-enable no-param-reassign */ if (srcX > src.width || srcY > src.height || srcX + width > src.width || srcY + height > src.height) {\n        throw new Error(\"bitblt reading outside image\");\n    }\n    if (deltaX > dst.width || deltaY > dst.height || deltaX + width > dst.width || deltaY + height > dst.height) {\n        throw new Error(\"bitblt writing outside image\");\n    }\n    for(var y = 0; y < height; y++){\n        src.data.copy(dst.data, (deltaY + y) * dst.width + deltaX << 2, (srcY + y) * src.width + srcX << 2, (srcY + y) * src.width + srcX + width << 2);\n    }\n};\nPNG.prototype.bitblt = function(dst, srcX, srcY, width, height, deltaX, deltaY) {\n    PNG.bitblt(this, dst, srcX, srcY, width, height, deltaX, deltaY);\n    return this;\n};\nPNG.adjustGamma = function(src) {\n    if (src.gamma) {\n        for(var y = 0; y < src.height; y++){\n            for(var x = 0; x < src.width; x++){\n                var idx = src.width * y + x << 2;\n                for(var i = 0; i < 3; i++){\n                    var sample = src.data[idx + i] / 255;\n                    sample = Math.pow(sample, 1 / 2.2 / src.gamma);\n                    src.data[idx + i] = Math.round(sample * 255);\n                }\n            }\n        }\n        src.gamma = 0;\n    }\n};\nPNG.prototype.adjustGamma = function() {\n    PNG.adjustGamma(this);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/pngjs/lib/png.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/pngjs/lib/sync-inflate.js":
/*!*************************************************!*\
  !*** ../node_modules/pngjs/lib/sync-inflate.js ***!
  \*************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nvar assert = (__webpack_require__(/*! assert */ \"assert\").ok);\nvar zlib = __webpack_require__(/*! zlib */ \"zlib\");\nvar util = __webpack_require__(/*! util */ \"util\");\nvar kMaxLength = (__webpack_require__(/*! buffer */ \"buffer\").kMaxLength);\nfunction Inflate(opts) {\n    if (!(this instanceof Inflate)) {\n        return new Inflate(opts);\n    }\n    if (opts && opts.chunkSize < zlib.Z_MIN_CHUNK) {\n        opts.chunkSize = zlib.Z_MIN_CHUNK;\n    }\n    zlib.Inflate.call(this, opts);\n    // Node 8 --> 9 compatibility check\n    this._offset = this._offset === undefined ? this._outOffset : this._offset;\n    this._buffer = this._buffer || this._outBuffer;\n    if (opts && opts.maxLength != null) {\n        this._maxLength = opts.maxLength;\n    }\n}\nfunction createInflate(opts) {\n    return new Inflate(opts);\n}\nfunction _close(engine, callback) {\n    if (callback) {\n        process.nextTick(callback);\n    }\n    // Caller may invoke .close after a zlib error (which will null _handle).\n    if (!engine._handle) {\n        return;\n    }\n    engine._handle.close();\n    engine._handle = null;\n}\nInflate.prototype._processChunk = function(chunk, flushFlag, asyncCb) {\n    if (typeof asyncCb === \"function\") {\n        return zlib.Inflate._processChunk.call(this, chunk, flushFlag, asyncCb);\n    }\n    var self = this;\n    var availInBefore = chunk && chunk.length;\n    var availOutBefore = this._chunkSize - this._offset;\n    var leftToInflate = this._maxLength;\n    var inOff = 0;\n    var buffers = [];\n    var nread = 0;\n    var error;\n    this.on(\"error\", function(err) {\n        error = err;\n    });\n    function handleChunk(availInAfter, availOutAfter) {\n        if (self._hadError) {\n            return;\n        }\n        var have = availOutBefore - availOutAfter;\n        assert(have >= 0, \"have should not go down\");\n        if (have > 0) {\n            var out = self._buffer.slice(self._offset, self._offset + have);\n            self._offset += have;\n            if (out.length > leftToInflate) {\n                out = out.slice(0, leftToInflate);\n            }\n            buffers.push(out);\n            nread += out.length;\n            leftToInflate -= out.length;\n            if (leftToInflate === 0) {\n                return false;\n            }\n        }\n        if (availOutAfter === 0 || self._offset >= self._chunkSize) {\n            availOutBefore = self._chunkSize;\n            self._offset = 0;\n            self._buffer = Buffer.allocUnsafe(self._chunkSize);\n        }\n        if (availOutAfter === 0) {\n            inOff += availInBefore - availInAfter;\n            availInBefore = availInAfter;\n            return true;\n        }\n        return false;\n    }\n    assert(this._handle, \"zlib binding closed\");\n    do {\n        var res = this._handle.writeSync(flushFlag, chunk, inOff, availInBefore, this._buffer, this._offset, availOutBefore); // out_len\n        // Node 8 --> 9 compatibility check\n        res = res || this._writeState;\n    }while (!this._hadError && handleChunk(res[0], res[1]));\n    if (this._hadError) {\n        throw error;\n    }\n    if (nread >= kMaxLength) {\n        _close(this);\n        throw new RangeError(\"Cannot create final Buffer. It would be larger than 0x\" + kMaxLength.toString(16) + \" bytes\");\n    }\n    var buf = Buffer.concat(buffers, nread);\n    _close(this);\n    return buf;\n};\nutil.inherits(Inflate, zlib.Inflate);\nfunction zlibBufferSync(engine, buffer) {\n    if (typeof buffer === \"string\") {\n        buffer = Buffer.from(buffer);\n    }\n    if (!(buffer instanceof Buffer)) {\n        throw new TypeError(\"Not a string or buffer\");\n    }\n    var flushFlag = engine._finishFlushFlag;\n    if (flushFlag == null) {\n        flushFlag = zlib.Z_FINISH;\n    }\n    return engine._processChunk(buffer, flushFlag);\n}\nfunction inflateSync(buffer, opts) {\n    return zlibBufferSync(new Inflate(opts), buffer);\n}\nmodule.exports = exports = inflateSync;\nexports.Inflate = Inflate;\nexports.createInflate = createInflate;\nexports.inflateSync = inflateSync;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/pngjs/lib/sync-inflate.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/pngjs/lib/sync-reader.js":
/*!************************************************!*\
  !*** ../node_modules/pngjs/lib/sync-reader.js ***!
  \************************************************/
/***/ ((module) => {

eval("\nvar SyncReader = module.exports = function(buffer) {\n    this._buffer = buffer;\n    this._reads = [];\n};\nSyncReader.prototype.read = function(length, callback) {\n    this._reads.push({\n        length: Math.abs(length),\n        allowLess: length < 0,\n        func: callback\n    });\n};\nSyncReader.prototype.process = function() {\n    // as long as there is any data and read requests\n    while(this._reads.length > 0 && this._buffer.length){\n        var read = this._reads[0];\n        if (this._buffer.length && (this._buffer.length >= read.length || read.allowLess)) {\n            // ok there is any data so that we can satisfy this request\n            this._reads.shift(); // == read\n            var buf = this._buffer;\n            this._buffer = buf.slice(read.length);\n            read.func.call(this, buf.slice(0, read.length));\n        } else {\n            break;\n        }\n    }\n    if (this._reads.length > 0) {\n        return new Error(\"There are some read requests waitng on finished stream\");\n    }\n    if (this._buffer.length > 0) {\n        return new Error(\"unrecognised content at end of stream\");\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL3BuZ2pzL2xpYi9zeW5jLXJlYWRlci5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLGFBQWFDLE9BQU9DLE9BQU8sR0FBRyxTQUFTQyxNQUFNO0lBRS9DLElBQUksQ0FBQ0MsT0FBTyxHQUFHRDtJQUNmLElBQUksQ0FBQ0UsTUFBTSxHQUFHLEVBQUU7QUFDbEI7QUFFQUwsV0FBV00sU0FBUyxDQUFDQyxJQUFJLEdBQUcsU0FBU0MsTUFBTSxFQUFFQyxRQUFRO0lBRW5ELElBQUksQ0FBQ0osTUFBTSxDQUFDSyxJQUFJLENBQUM7UUFDZkYsUUFBUUcsS0FBS0MsR0FBRyxDQUFDSjtRQUNqQkssV0FBV0wsU0FBUztRQUNwQk0sTUFBTUw7SUFDUjtBQUNGO0FBRUFULFdBQVdNLFNBQVMsQ0FBQ1MsT0FBTyxHQUFHO0lBRTdCLGlEQUFpRDtJQUNqRCxNQUFPLElBQUksQ0FBQ1YsTUFBTSxDQUFDRyxNQUFNLEdBQUcsS0FBSyxJQUFJLENBQUNKLE9BQU8sQ0FBQ0ksTUFBTSxDQUFFO1FBRXBELElBQUlELE9BQU8sSUFBSSxDQUFDRixNQUFNLENBQUMsRUFBRTtRQUV6QixJQUFJLElBQUksQ0FBQ0QsT0FBTyxDQUFDSSxNQUFNLElBQUssS0FBSSxDQUFDSixPQUFPLENBQUNJLE1BQU0sSUFBSUQsS0FBS0MsTUFBTSxJQUFJRCxLQUFLTSxTQUFTLEdBQUc7WUFFakYsMkRBQTJEO1lBQzNELElBQUksQ0FBQ1IsTUFBTSxDQUFDVyxLQUFLLElBQUksVUFBVTtZQUUvQixJQUFJQyxNQUFNLElBQUksQ0FBQ2IsT0FBTztZQUV0QixJQUFJLENBQUNBLE9BQU8sR0FBR2EsSUFBSUMsS0FBSyxDQUFDWCxLQUFLQyxNQUFNO1lBRXBDRCxLQUFLTyxJQUFJLENBQUNLLElBQUksQ0FBQyxJQUFJLEVBQUVGLElBQUlDLEtBQUssQ0FBQyxHQUFHWCxLQUFLQyxNQUFNO1FBRS9DLE9BQ0s7WUFDSDtRQUNGO0lBRUY7SUFFQSxJQUFJLElBQUksQ0FBQ0gsTUFBTSxDQUFDRyxNQUFNLEdBQUcsR0FBRztRQUMxQixPQUFPLElBQUlZLE1BQU07SUFDbkI7SUFFQSxJQUFJLElBQUksQ0FBQ2hCLE9BQU8sQ0FBQ0ksTUFBTSxHQUFHLEdBQUc7UUFDM0IsT0FBTyxJQUFJWSxNQUFNO0lBQ25CO0FBRUYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3BuZ2pzL2xpYi9zeW5jLXJlYWRlci5qcz8yNzA2Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIFN5bmNSZWFkZXIgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGJ1ZmZlcikge1xuXG4gIHRoaXMuX2J1ZmZlciA9IGJ1ZmZlcjtcbiAgdGhpcy5fcmVhZHMgPSBbXTtcbn07XG5cblN5bmNSZWFkZXIucHJvdG90eXBlLnJlYWQgPSBmdW5jdGlvbihsZW5ndGgsIGNhbGxiYWNrKSB7XG5cbiAgdGhpcy5fcmVhZHMucHVzaCh7XG4gICAgbGVuZ3RoOiBNYXRoLmFicyhsZW5ndGgpLCAvLyBpZiBsZW5ndGggPCAwIHRoZW4gYXQgbW9zdCB0aGlzIGxlbmd0aFxuICAgIGFsbG93TGVzczogbGVuZ3RoIDwgMCxcbiAgICBmdW5jOiBjYWxsYmFja1xuICB9KTtcbn07XG5cblN5bmNSZWFkZXIucHJvdG90eXBlLnByb2Nlc3MgPSBmdW5jdGlvbigpIHtcblxuICAvLyBhcyBsb25nIGFzIHRoZXJlIGlzIGFueSBkYXRhIGFuZCByZWFkIHJlcXVlc3RzXG4gIHdoaWxlICh0aGlzLl9yZWFkcy5sZW5ndGggPiAwICYmIHRoaXMuX2J1ZmZlci5sZW5ndGgpIHtcblxuICAgIHZhciByZWFkID0gdGhpcy5fcmVhZHNbMF07XG5cbiAgICBpZiAodGhpcy5fYnVmZmVyLmxlbmd0aCAmJiAodGhpcy5fYnVmZmVyLmxlbmd0aCA+PSByZWFkLmxlbmd0aCB8fCByZWFkLmFsbG93TGVzcykpIHtcblxuICAgICAgLy8gb2sgdGhlcmUgaXMgYW55IGRhdGEgc28gdGhhdCB3ZSBjYW4gc2F0aXNmeSB0aGlzIHJlcXVlc3RcbiAgICAgIHRoaXMuX3JlYWRzLnNoaWZ0KCk7IC8vID09IHJlYWRcblxuICAgICAgdmFyIGJ1ZiA9IHRoaXMuX2J1ZmZlcjtcblxuICAgICAgdGhpcy5fYnVmZmVyID0gYnVmLnNsaWNlKHJlYWQubGVuZ3RoKTtcblxuICAgICAgcmVhZC5mdW5jLmNhbGwodGhpcywgYnVmLnNsaWNlKDAsIHJlYWQubGVuZ3RoKSk7XG5cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgfVxuXG4gIGlmICh0aGlzLl9yZWFkcy5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIG5ldyBFcnJvcignVGhlcmUgYXJlIHNvbWUgcmVhZCByZXF1ZXN0cyB3YWl0bmcgb24gZmluaXNoZWQgc3RyZWFtJyk7XG4gIH1cblxuICBpZiAodGhpcy5fYnVmZmVyLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gbmV3IEVycm9yKCd1bnJlY29nbmlzZWQgY29udGVudCBhdCBlbmQgb2Ygc3RyZWFtJyk7XG4gIH1cblxufTtcbiJdLCJuYW1lcyI6WyJTeW5jUmVhZGVyIiwibW9kdWxlIiwiZXhwb3J0cyIsImJ1ZmZlciIsIl9idWZmZXIiLCJfcmVhZHMiLCJwcm90b3R5cGUiLCJyZWFkIiwibGVuZ3RoIiwiY2FsbGJhY2siLCJwdXNoIiwiTWF0aCIsImFicyIsImFsbG93TGVzcyIsImZ1bmMiLCJwcm9jZXNzIiwic2hpZnQiLCJidWYiLCJzbGljZSIsImNhbGwiLCJFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/pngjs/lib/sync-reader.js\n");

/***/ })

};
;