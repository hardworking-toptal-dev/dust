"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/jayson";
exports.ids = ["vendor-chunks/jayson"];
exports.modules = {

/***/ "(ssr)/../node_modules/jayson/lib/client/browser/index.js":
/*!**********************************************************!*\
  !*** ../node_modules/jayson/lib/client/browser/index.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst uuid = (__webpack_require__(/*! uuid */ \"(ssr)/../node_modules/uuid/dist/esm-node/index.js\").v4);\nconst generateRequest = __webpack_require__(/*! ../../generateRequest */ \"(ssr)/../node_modules/jayson/lib/generateRequest.js\");\n/**\n * Constructor for a Jayson Browser Client that does not depend any node.js core libraries\n * @class ClientBrowser\n * @param {Function} callServer Method that calls the server, receives the stringified request and a regular node-style callback\n * @param {Object} [options]\n * @param {Function} [options.reviver] Reviver function for JSON\n * @param {Function} [options.replacer] Replacer function for JSON\n * @param {Number} [options.version=2] JSON-RPC version to use (1|2)\n * @param {Function} [options.generator] Function to use for generating request IDs\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n * @return {ClientBrowser}\n */ const ClientBrowser = function(callServer, options) {\n    if (!(this instanceof ClientBrowser)) {\n        return new ClientBrowser(callServer, options);\n    }\n    if (!options) {\n        options = {};\n    }\n    this.options = {\n        reviver: typeof options.reviver !== \"undefined\" ? options.reviver : null,\n        replacer: typeof options.replacer !== \"undefined\" ? options.replacer : null,\n        generator: typeof options.generator !== \"undefined\" ? options.generator : function() {\n            return uuid();\n        },\n        version: typeof options.version !== \"undefined\" ? options.version : 2,\n        notificationIdNull: typeof options.notificationIdNull === \"boolean\" ? options.notificationIdNull : false\n    };\n    this.callServer = callServer;\n};\nmodule.exports = ClientBrowser;\n/**\n *  Creates a request and dispatches it if given a callback.\n *  @param {String|Array} method A batch request if passed an Array, or a method name if passed a String\n *  @param {Array|Object} [params] Parameters for the method\n *  @param {String|Number} [id] Optional id. If undefined an id will be generated. If null it creates a notification request\n *  @param {Function} [callback] Request callback. If specified, executes the request rather than only returning it.\n *  @throws {TypeError} Invalid parameters\n *  @return {Object} JSON-RPC 1.0 or 2.0 compatible request\n */ ClientBrowser.prototype.request = function(method, params, id, callback) {\n    const self = this;\n    let request = null;\n    // is this a batch request?\n    const isBatch = Array.isArray(method) && typeof params === \"function\";\n    if (this.options.version === 1 && isBatch) {\n        throw new TypeError(\"JSON-RPC 1.0 does not support batching\");\n    }\n    // is this a raw request?\n    const isRaw = !isBatch && method && typeof method === \"object\" && typeof params === \"function\";\n    if (isBatch || isRaw) {\n        callback = params;\n        request = method;\n    } else {\n        if (typeof id === \"function\") {\n            callback = id;\n            // specifically undefined because \"null\" is a notification request\n            id = undefined;\n        }\n        const hasCallback = typeof callback === \"function\";\n        try {\n            request = generateRequest(method, params, id, {\n                generator: this.options.generator,\n                version: this.options.version,\n                notificationIdNull: this.options.notificationIdNull\n            });\n        } catch (err) {\n            if (hasCallback) {\n                return callback(err);\n            }\n            throw err;\n        }\n        // no callback means we should just return a raw request\n        if (!hasCallback) {\n            return request;\n        }\n    }\n    let message;\n    try {\n        message = JSON.stringify(request, this.options.replacer);\n    } catch (err) {\n        return callback(err);\n    }\n    this.callServer(message, function(err, response) {\n        self._parseResponse(err, response, callback);\n    });\n    // always return the raw request\n    return request;\n};\n/**\n * Parses a response from a server\n * @param {Object} err Error to pass on that is unrelated to the actual response\n * @param {String} responseText JSON-RPC 1.0 or 2.0 response\n * @param {Function} callback Callback that will receive different arguments depending on the amount of parameters\n * @private\n */ ClientBrowser.prototype._parseResponse = function(err, responseText, callback) {\n    if (err) {\n        callback(err);\n        return;\n    }\n    if (!responseText) {\n        // empty response text, assume that is correct because it could be a\n        // notification which jayson does not give any body for\n        return callback();\n    }\n    let response;\n    try {\n        response = JSON.parse(responseText, this.options.reviver);\n    } catch (err) {\n        return callback(err);\n    }\n    if (callback.length === 3) {\n        // if callback length is 3, we split callback arguments on error and response\n        // is batch response?\n        if (Array.isArray(response)) {\n            // neccesary to split strictly on validity according to spec here\n            const isError = function(res) {\n                return typeof res.error !== \"undefined\";\n            };\n            const isNotError = function(res) {\n                return !isError(res);\n            };\n            return callback(null, response.filter(isError), response.filter(isNotError));\n        } else {\n            // split regardless of validity\n            return callback(null, response.error, response.result);\n        }\n    }\n    callback(null, response);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/jayson/lib/client/browser/index.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/jayson/lib/generateRequest.js":
/*!*****************************************************!*\
  !*** ../node_modules/jayson/lib/generateRequest.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst uuid = (__webpack_require__(/*! uuid */ \"(ssr)/../node_modules/uuid/dist/esm-node/index.js\").v4);\n/**\n *  Generates a JSON-RPC 1.0 or 2.0 request\n *  @param {String} method Name of method to call\n *  @param {Array|Object} params Array of parameters passed to the method as specified, or an object of parameter names and corresponding value\n *  @param {String|Number|null} [id] Request ID can be a string, number, null for explicit notification or left out for automatic generation\n *  @param {Object} [options]\n *  @param {Number} [options.version=2] JSON-RPC version to use (1 or 2)\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n *  @param {Function} [options.generator] Passed the request, and the options object and is expected to return a request ID\n *  @throws {TypeError} If any of the parameters are invalid\n *  @return {Object} A JSON-RPC 1.0 or 2.0 request\n *  @memberOf Utils\n */ const generateRequest = function(method, params, id, options) {\n    if (typeof method !== \"string\") {\n        throw new TypeError(method + \" must be a string\");\n    }\n    options = options || {};\n    // check valid version provided\n    const version = typeof options.version === \"number\" ? options.version : 2;\n    if (version !== 1 && version !== 2) {\n        throw new TypeError(version + \" must be 1 or 2\");\n    }\n    const request = {\n        method: method\n    };\n    if (version === 2) {\n        request.jsonrpc = \"2.0\";\n    }\n    if (params) {\n        // params given, but invalid?\n        if (typeof params !== \"object\" && !Array.isArray(params)) {\n            throw new TypeError(params + \" must be an object, array or omitted\");\n        }\n        request.params = params;\n    }\n    // if id was left out, generate one (null means explicit notification)\n    if (typeof id === \"undefined\") {\n        const generator = typeof options.generator === \"function\" ? options.generator : function() {\n            return uuid();\n        };\n        request.id = generator(request, options);\n    } else if (version === 2 && id === null) {\n        // we have a version 2 notification\n        if (options.notificationIdNull) {\n            request.id = null; // id will not be set at all unless option provided\n        }\n    } else {\n        request.id = id;\n    }\n    return request;\n};\nmodule.exports = generateRequest;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL2pheXNvbi9saWIvZ2VuZXJhdGVSZXF1ZXN0LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsTUFBTUEsT0FBT0MseUZBQWtCO0FBRS9COzs7Ozs7Ozs7Ozs7Q0FZQyxHQUNELE1BQU1FLGtCQUFrQixTQUFTQyxNQUFNLEVBQUVDLE1BQU0sRUFBRUMsRUFBRSxFQUFFQyxPQUFPO0lBQzFELElBQUcsT0FBT0gsV0FBVyxVQUFVO1FBQzdCLE1BQU0sSUFBSUksVUFBVUosU0FBUztJQUMvQjtJQUVBRyxVQUFVQSxXQUFXLENBQUM7SUFFdEIsK0JBQStCO0lBQy9CLE1BQU1FLFVBQVUsT0FBT0YsUUFBUUUsT0FBTyxLQUFLLFdBQVdGLFFBQVFFLE9BQU8sR0FBRztJQUN4RSxJQUFJQSxZQUFZLEtBQUtBLFlBQVksR0FBRztRQUNsQyxNQUFNLElBQUlELFVBQVVDLFVBQVU7SUFDaEM7SUFFQSxNQUFNQyxVQUFVO1FBQ2ROLFFBQVFBO0lBQ1Y7SUFFQSxJQUFHSyxZQUFZLEdBQUc7UUFDaEJDLFFBQVFDLE9BQU8sR0FBRztJQUNwQjtJQUVBLElBQUdOLFFBQVE7UUFDVCw2QkFBNkI7UUFDN0IsSUFBRyxPQUFPQSxXQUFXLFlBQVksQ0FBQ08sTUFBTUMsT0FBTyxDQUFDUixTQUFTO1lBQ3ZELE1BQU0sSUFBSUcsVUFBVUgsU0FBUztRQUMvQjtRQUNBSyxRQUFRTCxNQUFNLEdBQUdBO0lBQ25CO0lBRUEsc0VBQXNFO0lBQ3RFLElBQUcsT0FBT0MsT0FBUSxhQUFhO1FBQzdCLE1BQU1RLFlBQVksT0FBT1AsUUFBUU8sU0FBUyxLQUFLLGFBQWFQLFFBQVFPLFNBQVMsR0FBRztZQUFhLE9BQU9kO1FBQVE7UUFDNUdVLFFBQVFKLEVBQUUsR0FBR1EsVUFBVUosU0FBU0g7SUFDbEMsT0FBTyxJQUFJRSxZQUFZLEtBQUtILE9BQU8sTUFBTTtRQUN2QyxtQ0FBbUM7UUFDbkMsSUFBSUMsUUFBUVEsa0JBQWtCLEVBQUU7WUFDOUJMLFFBQVFKLEVBQUUsR0FBRyxNQUFNLG1EQUFtRDtRQUN4RTtJQUNGLE9BQU87UUFDTEksUUFBUUosRUFBRSxHQUFHQTtJQUNmO0lBRUEsT0FBT0k7QUFDVDtBQUVBTSxPQUFPQyxPQUFPLEdBQUdkIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9qYXlzb24vbGliL2dlbmVyYXRlUmVxdWVzdC5qcz9mOWE4Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgdXVpZCA9IHJlcXVpcmUoJ3V1aWQnKS52NDtcblxuLyoqXG4gKiAgR2VuZXJhdGVzIGEgSlNPTi1SUEMgMS4wIG9yIDIuMCByZXF1ZXN0XG4gKiAgQHBhcmFtIHtTdHJpbmd9IG1ldGhvZCBOYW1lIG9mIG1ldGhvZCB0byBjYWxsXG4gKiAgQHBhcmFtIHtBcnJheXxPYmplY3R9IHBhcmFtcyBBcnJheSBvZiBwYXJhbWV0ZXJzIHBhc3NlZCB0byB0aGUgbWV0aG9kIGFzIHNwZWNpZmllZCwgb3IgYW4gb2JqZWN0IG9mIHBhcmFtZXRlciBuYW1lcyBhbmQgY29ycmVzcG9uZGluZyB2YWx1ZVxuICogIEBwYXJhbSB7U3RyaW5nfE51bWJlcnxudWxsfSBbaWRdIFJlcXVlc3QgSUQgY2FuIGJlIGEgc3RyaW5nLCBudW1iZXIsIG51bGwgZm9yIGV4cGxpY2l0IG5vdGlmaWNhdGlvbiBvciBsZWZ0IG91dCBmb3IgYXV0b21hdGljIGdlbmVyYXRpb25cbiAqICBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gKiAgQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLnZlcnNpb249Ml0gSlNPTi1SUEMgdmVyc2lvbiB0byB1c2UgKDEgb3IgMilcbiAqICBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLm5vdGlmaWNhdGlvbklkTnVsbD1mYWxzZV0gV2hlbiB0cnVlLCB2ZXJzaW9uIDIgcmVxdWVzdHMgd2lsbCBzZXQgaWQgdG8gbnVsbCBpbnN0ZWFkIG9mIG9taXR0aW5nIGl0XG4gKiAgQHBhcmFtIHtGdW5jdGlvbn0gW29wdGlvbnMuZ2VuZXJhdG9yXSBQYXNzZWQgdGhlIHJlcXVlc3QsIGFuZCB0aGUgb3B0aW9ucyBvYmplY3QgYW5kIGlzIGV4cGVjdGVkIHRvIHJldHVybiBhIHJlcXVlc3QgSURcbiAqICBAdGhyb3dzIHtUeXBlRXJyb3J9IElmIGFueSBvZiB0aGUgcGFyYW1ldGVycyBhcmUgaW52YWxpZFxuICogIEByZXR1cm4ge09iamVjdH0gQSBKU09OLVJQQyAxLjAgb3IgMi4wIHJlcXVlc3RcbiAqICBAbWVtYmVyT2YgVXRpbHNcbiAqL1xuY29uc3QgZ2VuZXJhdGVSZXF1ZXN0ID0gZnVuY3Rpb24obWV0aG9kLCBwYXJhbXMsIGlkLCBvcHRpb25zKSB7XG4gIGlmKHR5cGVvZiBtZXRob2QgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihtZXRob2QgKyAnIG11c3QgYmUgYSBzdHJpbmcnKTtcbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIC8vIGNoZWNrIHZhbGlkIHZlcnNpb24gcHJvdmlkZWRcbiAgY29uc3QgdmVyc2lvbiA9IHR5cGVvZiBvcHRpb25zLnZlcnNpb24gPT09ICdudW1iZXInID8gb3B0aW9ucy52ZXJzaW9uIDogMjtcbiAgaWYgKHZlcnNpb24gIT09IDEgJiYgdmVyc2lvbiAhPT0gMikge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IodmVyc2lvbiArICcgbXVzdCBiZSAxIG9yIDInKTtcbiAgfVxuXG4gIGNvbnN0IHJlcXVlc3QgPSB7XG4gICAgbWV0aG9kOiBtZXRob2RcbiAgfTtcblxuICBpZih2ZXJzaW9uID09PSAyKSB7XG4gICAgcmVxdWVzdC5qc29ucnBjID0gJzIuMCc7XG4gIH1cblxuICBpZihwYXJhbXMpIHtcbiAgICAvLyBwYXJhbXMgZ2l2ZW4sIGJ1dCBpbnZhbGlkP1xuICAgIGlmKHR5cGVvZiBwYXJhbXMgIT09ICdvYmplY3QnICYmICFBcnJheS5pc0FycmF5KHBhcmFtcykpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IocGFyYW1zICsgJyBtdXN0IGJlIGFuIG9iamVjdCwgYXJyYXkgb3Igb21pdHRlZCcpO1xuICAgIH1cbiAgICByZXF1ZXN0LnBhcmFtcyA9IHBhcmFtcztcbiAgfVxuXG4gIC8vIGlmIGlkIHdhcyBsZWZ0IG91dCwgZ2VuZXJhdGUgb25lIChudWxsIG1lYW5zIGV4cGxpY2l0IG5vdGlmaWNhdGlvbilcbiAgaWYodHlwZW9mKGlkKSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjb25zdCBnZW5lcmF0b3IgPSB0eXBlb2Ygb3B0aW9ucy5nZW5lcmF0b3IgPT09ICdmdW5jdGlvbicgPyBvcHRpb25zLmdlbmVyYXRvciA6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdXVpZCgpOyB9O1xuICAgIHJlcXVlc3QuaWQgPSBnZW5lcmF0b3IocmVxdWVzdCwgb3B0aW9ucyk7XG4gIH0gZWxzZSBpZiAodmVyc2lvbiA9PT0gMiAmJiBpZCA9PT0gbnVsbCkge1xuICAgIC8vIHdlIGhhdmUgYSB2ZXJzaW9uIDIgbm90aWZpY2F0aW9uXG4gICAgaWYgKG9wdGlvbnMubm90aWZpY2F0aW9uSWROdWxsKSB7XG4gICAgICByZXF1ZXN0LmlkID0gbnVsbDsgLy8gaWQgd2lsbCBub3QgYmUgc2V0IGF0IGFsbCB1bmxlc3Mgb3B0aW9uIHByb3ZpZGVkXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJlcXVlc3QuaWQgPSBpZDtcbiAgfVxuXG4gIHJldHVybiByZXF1ZXN0O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBnZW5lcmF0ZVJlcXVlc3Q7XG4iXSwibmFtZXMiOlsidXVpZCIsInJlcXVpcmUiLCJ2NCIsImdlbmVyYXRlUmVxdWVzdCIsIm1ldGhvZCIsInBhcmFtcyIsImlkIiwib3B0aW9ucyIsIlR5cGVFcnJvciIsInZlcnNpb24iLCJyZXF1ZXN0IiwianNvbnJwYyIsIkFycmF5IiwiaXNBcnJheSIsImdlbmVyYXRvciIsIm5vdGlmaWNhdGlvbklkTnVsbCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/jayson/lib/generateRequest.js\n");

/***/ })

};
;