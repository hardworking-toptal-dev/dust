"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/bigint-buffer";
exports.ids = ["vendor-chunks/bigint-buffer"];
exports.modules = {

/***/ "(ssr)/../node_modules/bigint-buffer/dist/node.js":
/*!**************************************************!*\
  !*** ../node_modules/bigint-buffer/dist/node.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nlet converter;\n{\n    try {\n        converter = __webpack_require__(/*! bindings */ \"(ssr)/../node_modules/bindings/bindings.js\")(\"bigint_buffer\");\n    } catch (e) {\n        console.warn(\"bigint: Failed to load bindings, pure JS will be used (try npm run rebuild?)\");\n    }\n}/**\n * Convert a little-endian buffer into a BigInt.\n * @param buf The little-endian buffer to convert\n * @returns A BigInt with the little-endian representation of buf.\n */ function toBigIntLE(buf) {\n    if (converter === undefined) {\n        const reversed = Buffer.from(buf);\n        reversed.reverse();\n        const hex = reversed.toString(\"hex\");\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, false);\n}\nexports.toBigIntLE = toBigIntLE;\n/**\n * Convert a big-endian buffer into a BigInt\n * @param buf The big-endian buffer to convert.\n * @returns A BigInt with the big-endian representation of buf.\n */ function toBigIntBE(buf) {\n    if (converter === undefined) {\n        const hex = buf.toString(\"hex\");\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, true);\n}\nexports.toBigIntBE = toBigIntBE;\n/**\n * Convert a BigInt to a little-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A little-endian buffer representation of num.\n */ function toBufferLE(num, width) {\n    if (converter === undefined) {\n        const hex = num.toString(16);\n        const buffer = Buffer.from(hex.padStart(width * 2, \"0\").slice(0, width * 2), \"hex\");\n        buffer.reverse();\n        return buffer;\n    }\n    // Allocation is done here, since it is slower using napi in C\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), false);\n}\nexports.toBufferLE = toBufferLE;\n/**\n * Convert a BigInt to a big-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A big-endian buffer representation of num.\n */ function toBufferBE(num, width) {\n    if (converter === undefined) {\n        const hex = num.toString(16);\n        return Buffer.from(hex.padStart(width * 2, \"0\").slice(0, width * 2), \"hex\");\n    }\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), true);\n}\nexports.toBufferBE = toBufferBE;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL2JpZ2ludC1idWZmZXIvZGlzdC9ub2RlLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUFBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELElBQUlDO0FBQ0o7SUFDSSxJQUFJO1FBQ0FBLFlBQVlDLG1CQUFPQSxDQUFDLDhEQUFZO0lBQ3BDLEVBQ0EsT0FBT0MsR0FBRztRQUNOQyxRQUFRQyxJQUFJLENBQUM7SUFDakI7QUFDSixDQUNBOzs7O0NBSUMsR0FDRCxTQUFTQyxXQUFXQyxHQUFHO0lBQ25CLElBQUlOLGNBQWNPLFdBQVc7UUFDekIsTUFBTUMsV0FBV0MsT0FBT0MsSUFBSSxDQUFDSjtRQUM3QkUsU0FBU0csT0FBTztRQUNoQixNQUFNQyxNQUFNSixTQUFTSyxRQUFRLENBQUM7UUFDOUIsSUFBSUQsSUFBSUUsTUFBTSxLQUFLLEdBQUc7WUFDbEIsT0FBT0MsT0FBTztRQUNsQjtRQUNBLE9BQU9BLE9BQU8sQ0FBQyxFQUFFLEVBQUVILElBQUksQ0FBQztJQUM1QjtJQUNBLE9BQU9aLFVBQVVnQixRQUFRLENBQUNWLEtBQUs7QUFDbkM7QUFDQVIsa0JBQWtCLEdBQUdPO0FBQ3JCOzs7O0NBSUMsR0FDRCxTQUFTWSxXQUFXWCxHQUFHO0lBQ25CLElBQUlOLGNBQWNPLFdBQVc7UUFDekIsTUFBTUssTUFBTU4sSUFBSU8sUUFBUSxDQUFDO1FBQ3pCLElBQUlELElBQUlFLE1BQU0sS0FBSyxHQUFHO1lBQ2xCLE9BQU9DLE9BQU87UUFDbEI7UUFDQSxPQUFPQSxPQUFPLENBQUMsRUFBRSxFQUFFSCxJQUFJLENBQUM7SUFDNUI7SUFDQSxPQUFPWixVQUFVZ0IsUUFBUSxDQUFDVixLQUFLO0FBQ25DO0FBQ0FSLGtCQUFrQixHQUFHbUI7QUFDckI7Ozs7O0NBS0MsR0FDRCxTQUFTQyxXQUFXQyxHQUFHLEVBQUVDLEtBQUs7SUFDMUIsSUFBSXBCLGNBQWNPLFdBQVc7UUFDekIsTUFBTUssTUFBTU8sSUFBSU4sUUFBUSxDQUFDO1FBQ3pCLE1BQU1RLFNBQVNaLE9BQU9DLElBQUksQ0FBQ0UsSUFBSVUsUUFBUSxDQUFDRixRQUFRLEdBQUcsS0FBS0csS0FBSyxDQUFDLEdBQUdILFFBQVEsSUFBSTtRQUM3RUMsT0FBT1YsT0FBTztRQUNkLE9BQU9VO0lBQ1g7SUFDQSw4REFBOEQ7SUFDOUQsT0FBT3JCLFVBQVV3QixVQUFVLENBQUNMLEtBQUtWLE9BQU9nQixXQUFXLENBQUNMLFFBQVE7QUFDaEU7QUFDQXRCLGtCQUFrQixHQUFHb0I7QUFDckI7Ozs7O0NBS0MsR0FDRCxTQUFTUSxXQUFXUCxHQUFHLEVBQUVDLEtBQUs7SUFDMUIsSUFBSXBCLGNBQWNPLFdBQVc7UUFDekIsTUFBTUssTUFBTU8sSUFBSU4sUUFBUSxDQUFDO1FBQ3pCLE9BQU9KLE9BQU9DLElBQUksQ0FBQ0UsSUFBSVUsUUFBUSxDQUFDRixRQUFRLEdBQUcsS0FBS0csS0FBSyxDQUFDLEdBQUdILFFBQVEsSUFBSTtJQUN6RTtJQUNBLE9BQU9wQixVQUFVd0IsVUFBVSxDQUFDTCxLQUFLVixPQUFPZ0IsV0FBVyxDQUFDTCxRQUFRO0FBQ2hFO0FBQ0F0QixrQkFBa0IsR0FBRzRCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9iaWdpbnQtYnVmZmVyL2Rpc3Qvbm9kZS5qcz80OWJkIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xubGV0IGNvbnZlcnRlcjtcbntcbiAgICB0cnkge1xuICAgICAgICBjb252ZXJ0ZXIgPSByZXF1aXJlKCdiaW5kaW5ncycpKCdiaWdpbnRfYnVmZmVyJyk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUud2FybignYmlnaW50OiBGYWlsZWQgdG8gbG9hZCBiaW5kaW5ncywgcHVyZSBKUyB3aWxsIGJlIHVzZWQgKHRyeSBucG0gcnVuIHJlYnVpbGQ/KScpO1xuICAgIH1cbn1cbi8qKlxuICogQ29udmVydCBhIGxpdHRsZS1lbmRpYW4gYnVmZmVyIGludG8gYSBCaWdJbnQuXG4gKiBAcGFyYW0gYnVmIFRoZSBsaXR0bGUtZW5kaWFuIGJ1ZmZlciB0byBjb252ZXJ0XG4gKiBAcmV0dXJucyBBIEJpZ0ludCB3aXRoIHRoZSBsaXR0bGUtZW5kaWFuIHJlcHJlc2VudGF0aW9uIG9mIGJ1Zi5cbiAqL1xuZnVuY3Rpb24gdG9CaWdJbnRMRShidWYpIHtcbiAgICBpZiAoY29udmVydGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29uc3QgcmV2ZXJzZWQgPSBCdWZmZXIuZnJvbShidWYpO1xuICAgICAgICByZXZlcnNlZC5yZXZlcnNlKCk7XG4gICAgICAgIGNvbnN0IGhleCA9IHJldmVyc2VkLnRvU3RyaW5nKCdoZXgnKTtcbiAgICAgICAgaWYgKGhleC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBCaWdJbnQoMCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIEJpZ0ludChgMHgke2hleH1gKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnZlcnRlci50b0JpZ0ludChidWYsIGZhbHNlKTtcbn1cbmV4cG9ydHMudG9CaWdJbnRMRSA9IHRvQmlnSW50TEU7XG4vKipcbiAqIENvbnZlcnQgYSBiaWctZW5kaWFuIGJ1ZmZlciBpbnRvIGEgQmlnSW50XG4gKiBAcGFyYW0gYnVmIFRoZSBiaWctZW5kaWFuIGJ1ZmZlciB0byBjb252ZXJ0LlxuICogQHJldHVybnMgQSBCaWdJbnQgd2l0aCB0aGUgYmlnLWVuZGlhbiByZXByZXNlbnRhdGlvbiBvZiBidWYuXG4gKi9cbmZ1bmN0aW9uIHRvQmlnSW50QkUoYnVmKSB7XG4gICAgaWYgKGNvbnZlcnRlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnN0IGhleCA9IGJ1Zi50b1N0cmluZygnaGV4Jyk7XG4gICAgICAgIGlmIChoZXgubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gQmlnSW50KDApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBCaWdJbnQoYDB4JHtoZXh9YCk7XG4gICAgfVxuICAgIHJldHVybiBjb252ZXJ0ZXIudG9CaWdJbnQoYnVmLCB0cnVlKTtcbn1cbmV4cG9ydHMudG9CaWdJbnRCRSA9IHRvQmlnSW50QkU7XG4vKipcbiAqIENvbnZlcnQgYSBCaWdJbnQgdG8gYSBsaXR0bGUtZW5kaWFuIGJ1ZmZlci5cbiAqIEBwYXJhbSBudW0gICBUaGUgQmlnSW50IHRvIGNvbnZlcnQuXG4gKiBAcGFyYW0gd2lkdGggVGhlIG51bWJlciBvZiBieXRlcyB0aGF0IHRoZSByZXN1bHRpbmcgYnVmZmVyIHNob3VsZCBiZS5cbiAqIEByZXR1cm5zIEEgbGl0dGxlLWVuZGlhbiBidWZmZXIgcmVwcmVzZW50YXRpb24gb2YgbnVtLlxuICovXG5mdW5jdGlvbiB0b0J1ZmZlckxFKG51bSwgd2lkdGgpIHtcbiAgICBpZiAoY29udmVydGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29uc3QgaGV4ID0gbnVtLnRvU3RyaW5nKDE2KTtcbiAgICAgICAgY29uc3QgYnVmZmVyID0gQnVmZmVyLmZyb20oaGV4LnBhZFN0YXJ0KHdpZHRoICogMiwgJzAnKS5zbGljZSgwLCB3aWR0aCAqIDIpLCAnaGV4Jyk7XG4gICAgICAgIGJ1ZmZlci5yZXZlcnNlKCk7XG4gICAgICAgIHJldHVybiBidWZmZXI7XG4gICAgfVxuICAgIC8vIEFsbG9jYXRpb24gaXMgZG9uZSBoZXJlLCBzaW5jZSBpdCBpcyBzbG93ZXIgdXNpbmcgbmFwaSBpbiBDXG4gICAgcmV0dXJuIGNvbnZlcnRlci5mcm9tQmlnSW50KG51bSwgQnVmZmVyLmFsbG9jVW5zYWZlKHdpZHRoKSwgZmFsc2UpO1xufVxuZXhwb3J0cy50b0J1ZmZlckxFID0gdG9CdWZmZXJMRTtcbi8qKlxuICogQ29udmVydCBhIEJpZ0ludCB0byBhIGJpZy1lbmRpYW4gYnVmZmVyLlxuICogQHBhcmFtIG51bSAgIFRoZSBCaWdJbnQgdG8gY29udmVydC5cbiAqIEBwYXJhbSB3aWR0aCBUaGUgbnVtYmVyIG9mIGJ5dGVzIHRoYXQgdGhlIHJlc3VsdGluZyBidWZmZXIgc2hvdWxkIGJlLlxuICogQHJldHVybnMgQSBiaWctZW5kaWFuIGJ1ZmZlciByZXByZXNlbnRhdGlvbiBvZiBudW0uXG4gKi9cbmZ1bmN0aW9uIHRvQnVmZmVyQkUobnVtLCB3aWR0aCkge1xuICAgIGlmIChjb252ZXJ0ZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb25zdCBoZXggPSBudW0udG9TdHJpbmcoMTYpO1xuICAgICAgICByZXR1cm4gQnVmZmVyLmZyb20oaGV4LnBhZFN0YXJ0KHdpZHRoICogMiwgJzAnKS5zbGljZSgwLCB3aWR0aCAqIDIpLCAnaGV4Jyk7XG4gICAgfVxuICAgIHJldHVybiBjb252ZXJ0ZXIuZnJvbUJpZ0ludChudW0sIEJ1ZmZlci5hbGxvY1Vuc2FmZSh3aWR0aCksIHRydWUpO1xufVxuZXhwb3J0cy50b0J1ZmZlckJFID0gdG9CdWZmZXJCRTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImNvbnZlcnRlciIsInJlcXVpcmUiLCJlIiwiY29uc29sZSIsIndhcm4iLCJ0b0JpZ0ludExFIiwiYnVmIiwidW5kZWZpbmVkIiwicmV2ZXJzZWQiLCJCdWZmZXIiLCJmcm9tIiwicmV2ZXJzZSIsImhleCIsInRvU3RyaW5nIiwibGVuZ3RoIiwiQmlnSW50IiwidG9CaWdJbnQiLCJ0b0JpZ0ludEJFIiwidG9CdWZmZXJMRSIsIm51bSIsIndpZHRoIiwiYnVmZmVyIiwicGFkU3RhcnQiLCJzbGljZSIsImZyb21CaWdJbnQiLCJhbGxvY1Vuc2FmZSIsInRvQnVmZmVyQkUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/bigint-buffer/dist/node.js\n");

/***/ })

};
;