"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/hmac-drbg";
exports.ids = ["vendor-chunks/hmac-drbg"];
exports.modules = {

/***/ "(ssr)/../node_modules/hmac-drbg/lib/hmac-drbg.js":
/*!**************************************************!*\
  !*** ../node_modules/hmac-drbg/lib/hmac-drbg.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar hash = __webpack_require__(/*! hash.js */ \"(ssr)/../node_modules/hash.js/lib/hash.js\");\nvar utils = __webpack_require__(/*! minimalistic-crypto-utils */ \"(ssr)/../node_modules/minimalistic-crypto-utils/lib/utils.js\");\nvar assert = __webpack_require__(/*! minimalistic-assert */ \"(ssr)/../node_modules/minimalistic-assert/index.js\");\nfunction HmacDRBG(options) {\n    if (!(this instanceof HmacDRBG)) return new HmacDRBG(options);\n    this.hash = options.hash;\n    this.predResist = !!options.predResist;\n    this.outLen = this.hash.outSize;\n    this.minEntropy = options.minEntropy || this.hash.hmacStrength;\n    this._reseed = null;\n    this.reseedInterval = null;\n    this.K = null;\n    this.V = null;\n    var entropy = utils.toArray(options.entropy, options.entropyEnc || \"hex\");\n    var nonce = utils.toArray(options.nonce, options.nonceEnc || \"hex\");\n    var pers = utils.toArray(options.pers, options.persEnc || \"hex\");\n    assert(entropy.length >= this.minEntropy / 8, \"Not enough entropy. Minimum is: \" + this.minEntropy + \" bits\");\n    this._init(entropy, nonce, pers);\n}\nmodule.exports = HmacDRBG;\nHmacDRBG.prototype._init = function init(entropy, nonce, pers) {\n    var seed = entropy.concat(nonce).concat(pers);\n    this.K = new Array(this.outLen / 8);\n    this.V = new Array(this.outLen / 8);\n    for(var i = 0; i < this.V.length; i++){\n        this.K[i] = 0x00;\n        this.V[i] = 0x01;\n    }\n    this._update(seed);\n    this._reseed = 1;\n    this.reseedInterval = 0x1000000000000; // 2^48\n};\nHmacDRBG.prototype._hmac = function hmac() {\n    return new hash.hmac(this.hash, this.K);\n};\nHmacDRBG.prototype._update = function update(seed) {\n    var kmac = this._hmac().update(this.V).update([\n        0x00\n    ]);\n    if (seed) kmac = kmac.update(seed);\n    this.K = kmac.digest();\n    this.V = this._hmac().update(this.V).digest();\n    if (!seed) return;\n    this.K = this._hmac().update(this.V).update([\n        0x01\n    ]).update(seed).digest();\n    this.V = this._hmac().update(this.V).digest();\n};\nHmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {\n    // Optional entropy enc\n    if (typeof entropyEnc !== \"string\") {\n        addEnc = add;\n        add = entropyEnc;\n        entropyEnc = null;\n    }\n    entropy = utils.toArray(entropy, entropyEnc);\n    add = utils.toArray(add, addEnc);\n    assert(entropy.length >= this.minEntropy / 8, \"Not enough entropy. Minimum is: \" + this.minEntropy + \" bits\");\n    this._update(entropy.concat(add || []));\n    this._reseed = 1;\n};\nHmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {\n    if (this._reseed > this.reseedInterval) throw new Error(\"Reseed is required\");\n    // Optional encoding\n    if (typeof enc !== \"string\") {\n        addEnc = add;\n        add = enc;\n        enc = null;\n    }\n    // Optional additional data\n    if (add) {\n        add = utils.toArray(add, addEnc || \"hex\");\n        this._update(add);\n    }\n    var temp = [];\n    while(temp.length < len){\n        this.V = this._hmac().update(this.V).digest();\n        temp = temp.concat(this.V);\n    }\n    var res = temp.slice(0, len);\n    this._update(add);\n    this._reseed++;\n    return utils.encode(res, enc);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/hmac-drbg/lib/hmac-drbg.js\n");

/***/ })

};
;