"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@ledgerhq";
exports.ids = ["vendor-chunks/@ledgerhq"];
exports.modules = {

/***/ "(ssr)/../node_modules/@ledgerhq/devices/lib-es/index.js":
/*!*********************************************************!*\
  !*** ../node_modules/@ledgerhq/devices/lib-es/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DeviceModelId: () => (/* binding */ DeviceModelId),\n/* harmony export */   IICCID: () => (/* binding */ IICCID),\n/* harmony export */   IIGenericHID: () => (/* binding */ IIGenericHID),\n/* harmony export */   IIKeyboardHID: () => (/* binding */ IIKeyboardHID),\n/* harmony export */   IIU2F: () => (/* binding */ IIU2F),\n/* harmony export */   IIWebUSB: () => (/* binding */ IIWebUSB),\n/* harmony export */   getBluetoothServiceUuids: () => (/* binding */ getBluetoothServiceUuids),\n/* harmony export */   getDeviceModel: () => (/* binding */ getDeviceModel),\n/* harmony export */   getInfosForServiceUuid: () => (/* binding */ getInfosForServiceUuid),\n/* harmony export */   identifyProductName: () => (/* binding */ identifyProductName),\n/* harmony export */   identifyTargetId: () => (/* binding */ identifyTargetId),\n/* harmony export */   identifyUSBProductId: () => (/* binding */ identifyUSBProductId),\n/* harmony export */   ledgerUSBVendorId: () => (/* binding */ ledgerUSBVendorId)\n/* harmony export */ });\n/* harmony import */ var semver__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! semver */ \"(ssr)/../node_modules/semver/index.js\");\n/* harmony import */ var semver__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(semver__WEBPACK_IMPORTED_MODULE_0__);\nvar __assign = undefined && undefined.__assign || function() {\n    __assign = Object.assign || function(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar _a;\n\n/**\n * The USB product IDs will be defined as MMII, encoding a model (MM) and an interface bitfield (II)\n *\n ** Model\n * Ledger Nano S : 0x10\n * Ledger Blue : 0x00\n * Ledger Nano X : 0x40\n *\n ** Interface support bitfield\n * Generic HID : 0x01\n * Keyboard HID : 0x02\n * U2F : 0x04\n * CCID : 0x08\n * WebUSB : 0x10\n */ var IIGenericHID = 0x01;\nvar IIKeyboardHID = 0x02;\nvar IIU2F = 0x04;\nvar IICCID = 0x08;\nvar IIWebUSB = 0x10;\nvar DeviceModelId;\n(function(DeviceModelId) {\n    DeviceModelId[\"blue\"] = \"blue\";\n    DeviceModelId[\"nanoS\"] = \"nanoS\";\n    DeviceModelId[\"nanoSP\"] = \"nanoSP\";\n    DeviceModelId[\"nanoX\"] = \"nanoX\";\n    DeviceModelId[\"nanoFTS\"] = \"nanoFTS\";\n})(DeviceModelId || (DeviceModelId = {}));\nvar devices = (_a = {}, _a[DeviceModelId.blue] = {\n    id: DeviceModelId.blue,\n    productName: \"Ledger\\xa0Blue\",\n    productIdMM: 0x00,\n    legacyUsbProductId: 0x0000,\n    usbOnly: true,\n    memorySize: 480 * 1024,\n    masks: [\n        0x31000000,\n        0x31010000\n    ],\n    getBlockSize: function(_firwareVersion) {\n        return 4 * 1024;\n    }\n}, _a[DeviceModelId.nanoS] = {\n    id: DeviceModelId.nanoS,\n    productName: \"Ledger\\xa0Nano\\xa0S\",\n    productIdMM: 0x10,\n    legacyUsbProductId: 0x0001,\n    usbOnly: true,\n    memorySize: 320 * 1024,\n    masks: [\n        0x31100000\n    ],\n    getBlockSize: function(firmwareVersion) {\n        var _a;\n        return semver__WEBPACK_IMPORTED_MODULE_0___default().lt((_a = semver__WEBPACK_IMPORTED_MODULE_0___default().coerce(firmwareVersion)) !== null && _a !== void 0 ? _a : \"\", \"2.0.0\") ? 4 * 1024 : 2 * 1024;\n    }\n}, _a[DeviceModelId.nanoSP] = {\n    id: DeviceModelId.nanoSP,\n    productName: \"Ledger Nano S Plus\",\n    productIdMM: 0x50,\n    legacyUsbProductId: 0x0005,\n    usbOnly: true,\n    memorySize: 1536 * 1024,\n    masks: [\n        0x33100000\n    ],\n    getBlockSize: function(_firmwareVersion) {\n        return 32;\n    }\n}, _a[DeviceModelId.nanoX] = {\n    id: DeviceModelId.nanoX,\n    productName: \"Ledger\\xa0Nano\\xa0X\",\n    productIdMM: 0x40,\n    legacyUsbProductId: 0x0004,\n    usbOnly: false,\n    memorySize: 2 * 1024 * 1024,\n    masks: [\n        0x33000000\n    ],\n    getBlockSize: function(_firwareVersion) {\n        return 4 * 1024;\n    },\n    bluetoothSpec: [\n        {\n            serviceUuid: \"13d63400-2c97-0004-0000-4c6564676572\",\n            notifyUuid: \"13d63400-2c97-0004-0001-4c6564676572\",\n            writeUuid: \"13d63400-2c97-0004-0002-4c6564676572\",\n            writeCmdUuid: \"13d63400-2c97-0004-0003-4c6564676572\"\n        }\n    ]\n}, _a[DeviceModelId.nanoFTS] = {\n    id: DeviceModelId.nanoFTS,\n    productName: \"Ledger\\xa0Nano\\xa0FTS\",\n    productIdMM: 0x60,\n    legacyUsbProductId: 0x0006,\n    usbOnly: false,\n    memorySize: 2 * 1024 * 1024,\n    masks: [\n        0x33200000\n    ],\n    getBlockSize: function(_firwareVersion) {\n        return 4 * 1024;\n    },\n    bluetoothSpec: [\n        {\n            serviceUuid: \"13d63400-2c97-6004-0000-4c6564676572\",\n            notifyUuid: \"13d63400-2c97-6004-0001-4c6564676572\",\n            writeUuid: \"13d63400-2c97-6004-0002-4c6564676572\",\n            writeCmdUuid: \"13d63400-2c97-6004-0003-4c6564676572\"\n        }\n    ]\n}, _a);\nvar productMap = {\n    Blue: DeviceModelId.blue,\n    \"Nano S\": DeviceModelId.nanoS,\n    \"Nano S Plus\": DeviceModelId.nanoSP,\n    \"Nano X\": DeviceModelId.nanoX,\n    \"Nano FTS\": DeviceModelId.nanoFTS\n};\nvar devicesList = Object.values(devices);\n/**\n *\n */ var ledgerUSBVendorId = 0x2c97;\n/**\n *\n */ var getDeviceModel = function(id) {\n    var info = devices[id];\n    if (!info) throw new Error(\"device '\" + id + \"' does not exist\");\n    return info;\n};\n/**\n * Given a `targetId`, return the deviceModel associated to it,\n * based on the first two bytes.\n */ var identifyTargetId = function(targetId) {\n    var deviceModel = devicesList.find(function(_a) {\n        var masks = _a.masks;\n        return masks.find(function(mask) {\n            return (targetId & 0xffff0000) === mask;\n        });\n    });\n    return deviceModel;\n};\n/**\n *\n */ var identifyUSBProductId = function(usbProductId) {\n    var legacy = devicesList.find(function(d) {\n        return d.legacyUsbProductId === usbProductId;\n    });\n    if (legacy) return legacy;\n    var mm = usbProductId >> 8;\n    var deviceModel = devicesList.find(function(d) {\n        return d.productIdMM === mm;\n    });\n    return deviceModel;\n};\nvar identifyProductName = function(productName) {\n    var deviceModel = devicesList.find(function(d) {\n        return d.id === productMap[productName];\n    });\n    return deviceModel;\n};\nvar bluetoothServices = [];\nvar serviceUuidToInfos = {};\nfor(var id in devices){\n    var deviceModel = devices[id];\n    var bluetoothSpec = deviceModel.bluetoothSpec;\n    if (bluetoothSpec) {\n        for(var i = 0; i < bluetoothSpec.length; i++){\n            var spec = bluetoothSpec[i];\n            bluetoothServices.push(spec.serviceUuid);\n            serviceUuidToInfos[spec.serviceUuid] = serviceUuidToInfos[spec.serviceUuid.replace(/-/g, \"\")] = __assign({\n                deviceModel: deviceModel\n            }, spec);\n        }\n    }\n}\n/**\n *\n */ var getBluetoothServiceUuids = function() {\n    return bluetoothServices;\n};\n/**\n *\n */ var getInfosForServiceUuid = function(uuid) {\n    return serviceUuidToInfos[uuid.toLowerCase()];\n}; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@ledgerhq/devices/lib-es/index.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@ledgerhq/devices/lib/hid-framing.js":
/*!************************************************************!*\
  !*** ../node_modules/@ledgerhq/devices/lib/hid-framing.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nexports.__esModule = true;\nvar errors_1 = __webpack_require__(/*! @ledgerhq/errors */ \"(ssr)/../node_modules/@ledgerhq/errors/lib-es/index.js\");\nvar Tag = 0x05;\nfunction asUInt16BE(value) {\n    var b = Buffer.alloc(2);\n    b.writeUInt16BE(value, 0);\n    return b;\n}\nvar initialAcc = {\n    data: Buffer.alloc(0),\n    dataLength: 0,\n    sequence: 0\n};\n/**\n *\n */ var createHIDframing = function(channel, packetSize) {\n    return {\n        makeBlocks: function(apdu) {\n            var data = Buffer.concat([\n                asUInt16BE(apdu.length),\n                apdu\n            ]);\n            var blockSize = packetSize - 5;\n            var nbBlocks = Math.ceil(data.length / blockSize);\n            data = Buffer.concat([\n                data,\n                Buffer.alloc(nbBlocks * blockSize - data.length + 1).fill(0)\n            ]);\n            var blocks = [];\n            for(var i = 0; i < nbBlocks; i++){\n                var head = Buffer.alloc(5);\n                head.writeUInt16BE(channel, 0);\n                head.writeUInt8(Tag, 2);\n                head.writeUInt16BE(i, 3);\n                var chunk = data.slice(i * blockSize, (i + 1) * blockSize);\n                blocks.push(Buffer.concat([\n                    head,\n                    chunk\n                ]));\n            }\n            return blocks;\n        },\n        reduceResponse: function(acc, chunk) {\n            var _a = acc || initialAcc, data = _a.data, dataLength = _a.dataLength, sequence = _a.sequence;\n            if (chunk.readUInt16BE(0) !== channel) {\n                throw new errors_1.TransportError(\"Invalid channel\", \"InvalidChannel\");\n            }\n            if (chunk.readUInt8(2) !== Tag) {\n                throw new errors_1.TransportError(\"Invalid tag\", \"InvalidTag\");\n            }\n            if (chunk.readUInt16BE(3) !== sequence) {\n                throw new errors_1.TransportError(\"Invalid sequence\", \"InvalidSequence\");\n            }\n            if (!acc) {\n                dataLength = chunk.readUInt16BE(5);\n            }\n            sequence++;\n            var chunkData = chunk.slice(acc ? 5 : 7);\n            data = Buffer.concat([\n                data,\n                chunkData\n            ]);\n            if (data.length > dataLength) {\n                data = data.slice(0, dataLength);\n            }\n            return {\n                data: data,\n                dataLength: dataLength,\n                sequence: sequence\n            };\n        },\n        getReducedResult: function(acc) {\n            if (acc && acc.dataLength === acc.data.length) {\n                return acc.data;\n            }\n        }\n    };\n};\nexports[\"default\"] = createHIDframing; //# sourceMappingURL=hid-framing.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0BsZWRnZXJocS9kZXZpY2VzL2xpYi9oaWQtZnJhbWluZy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSxrQkFBa0IsR0FBRztBQUNyQixJQUFJRSxXQUFXQyxtQkFBT0EsQ0FBQyxnRkFBa0I7QUFDekMsSUFBSUMsTUFBTTtBQUNWLFNBQVNDLFdBQVdDLEtBQUs7SUFDckIsSUFBSUMsSUFBSUMsT0FBT0MsS0FBSyxDQUFDO0lBQ3JCRixFQUFFRyxhQUFhLENBQUNKLE9BQU87SUFDdkIsT0FBT0M7QUFDWDtBQUNBLElBQUlJLGFBQWE7SUFDYkMsTUFBTUosT0FBT0MsS0FBSyxDQUFDO0lBQ25CSSxZQUFZO0lBQ1pDLFVBQVU7QUFDZDtBQUNBOztDQUVDLEdBQ0QsSUFBSUMsbUJBQW1CLFNBQVVDLE9BQU8sRUFBRUMsVUFBVTtJQUNoRCxPQUFPO1FBQ0hDLFlBQVksU0FBVUMsSUFBSTtZQUN0QixJQUFJUCxPQUFPSixPQUFPWSxNQUFNLENBQUM7Z0JBQUNmLFdBQVdjLEtBQUtFLE1BQU07Z0JBQUdGO2FBQUs7WUFDeEQsSUFBSUcsWUFBWUwsYUFBYTtZQUM3QixJQUFJTSxXQUFXQyxLQUFLQyxJQUFJLENBQUNiLEtBQUtTLE1BQU0sR0FBR0M7WUFDdkNWLE9BQU9KLE9BQU9ZLE1BQU0sQ0FBQztnQkFDakJSO2dCQUNBSixPQUFPQyxLQUFLLENBQUNjLFdBQVdELFlBQVlWLEtBQUtTLE1BQU0sR0FBRyxHQUFHSyxJQUFJLENBQUM7YUFDN0Q7WUFDRCxJQUFJQyxTQUFTLEVBQUU7WUFDZixJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUwsVUFBVUssSUFBSztnQkFDL0IsSUFBSUMsT0FBT3JCLE9BQU9DLEtBQUssQ0FBQztnQkFDeEJvQixLQUFLbkIsYUFBYSxDQUFDTSxTQUFTO2dCQUM1QmEsS0FBS0MsVUFBVSxDQUFDMUIsS0FBSztnQkFDckJ5QixLQUFLbkIsYUFBYSxDQUFDa0IsR0FBRztnQkFDdEIsSUFBSUcsUUFBUW5CLEtBQUtvQixLQUFLLENBQUNKLElBQUlOLFdBQVcsQ0FBQ00sSUFBSSxLQUFLTjtnQkFDaERLLE9BQU9NLElBQUksQ0FBQ3pCLE9BQU9ZLE1BQU0sQ0FBQztvQkFBQ1M7b0JBQU1FO2lCQUFNO1lBQzNDO1lBQ0EsT0FBT0o7UUFDWDtRQUNBTyxnQkFBZ0IsU0FBVUMsR0FBRyxFQUFFSixLQUFLO1lBQ2hDLElBQUlLLEtBQUtELE9BQU94QixZQUFZQyxPQUFPd0IsR0FBR3hCLElBQUksRUFBRUMsYUFBYXVCLEdBQUd2QixVQUFVLEVBQUVDLFdBQVdzQixHQUFHdEIsUUFBUTtZQUM5RixJQUFJaUIsTUFBTU0sWUFBWSxDQUFDLE9BQU9yQixTQUFTO2dCQUNuQyxNQUFNLElBQUlkLFNBQVNvQyxjQUFjLENBQUMsbUJBQW1CO1lBQ3pEO1lBQ0EsSUFBSVAsTUFBTVEsU0FBUyxDQUFDLE9BQU9uQyxLQUFLO2dCQUM1QixNQUFNLElBQUlGLFNBQVNvQyxjQUFjLENBQUMsZUFBZTtZQUNyRDtZQUNBLElBQUlQLE1BQU1NLFlBQVksQ0FBQyxPQUFPdkIsVUFBVTtnQkFDcEMsTUFBTSxJQUFJWixTQUFTb0MsY0FBYyxDQUFDLG9CQUFvQjtZQUMxRDtZQUNBLElBQUksQ0FBQ0gsS0FBSztnQkFDTnRCLGFBQWFrQixNQUFNTSxZQUFZLENBQUM7WUFDcEM7WUFDQXZCO1lBQ0EsSUFBSTBCLFlBQVlULE1BQU1DLEtBQUssQ0FBQ0csTUFBTSxJQUFJO1lBQ3RDdkIsT0FBT0osT0FBT1ksTUFBTSxDQUFDO2dCQUFDUjtnQkFBTTRCO2FBQVU7WUFDdEMsSUFBSTVCLEtBQUtTLE1BQU0sR0FBR1IsWUFBWTtnQkFDMUJELE9BQU9BLEtBQUtvQixLQUFLLENBQUMsR0FBR25CO1lBQ3pCO1lBQ0EsT0FBTztnQkFDSEQsTUFBTUE7Z0JBQ05DLFlBQVlBO2dCQUNaQyxVQUFVQTtZQUNkO1FBQ0o7UUFDQTJCLGtCQUFrQixTQUFVTixHQUFHO1lBQzNCLElBQUlBLE9BQU9BLElBQUl0QixVQUFVLEtBQUtzQixJQUFJdkIsSUFBSSxDQUFDUyxNQUFNLEVBQUU7Z0JBQzNDLE9BQU9jLElBQUl2QixJQUFJO1lBQ25CO1FBQ0o7SUFDSjtBQUNKO0FBQ0FaLGtCQUFrQixHQUFHZSxrQkFDckIsdUNBQXVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9AbGVkZ2VyaHEvZGV2aWNlcy9saWIvaGlkLWZyYW1pbmcuanM/MzA3ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG52YXIgZXJyb3JzXzEgPSByZXF1aXJlKFwiQGxlZGdlcmhxL2Vycm9yc1wiKTtcbnZhciBUYWcgPSAweDA1O1xuZnVuY3Rpb24gYXNVSW50MTZCRSh2YWx1ZSkge1xuICAgIHZhciBiID0gQnVmZmVyLmFsbG9jKDIpO1xuICAgIGIud3JpdGVVSW50MTZCRSh2YWx1ZSwgMCk7XG4gICAgcmV0dXJuIGI7XG59XG52YXIgaW5pdGlhbEFjYyA9IHtcbiAgICBkYXRhOiBCdWZmZXIuYWxsb2MoMCksXG4gICAgZGF0YUxlbmd0aDogMCxcbiAgICBzZXF1ZW5jZTogMFxufTtcbi8qKlxuICpcbiAqL1xudmFyIGNyZWF0ZUhJRGZyYW1pbmcgPSBmdW5jdGlvbiAoY2hhbm5lbCwgcGFja2V0U2l6ZSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIG1ha2VCbG9ja3M6IGZ1bmN0aW9uIChhcGR1KSB7XG4gICAgICAgICAgICB2YXIgZGF0YSA9IEJ1ZmZlci5jb25jYXQoW2FzVUludDE2QkUoYXBkdS5sZW5ndGgpLCBhcGR1XSk7XG4gICAgICAgICAgICB2YXIgYmxvY2tTaXplID0gcGFja2V0U2l6ZSAtIDU7XG4gICAgICAgICAgICB2YXIgbmJCbG9ja3MgPSBNYXRoLmNlaWwoZGF0YS5sZW5ndGggLyBibG9ja1NpemUpO1xuICAgICAgICAgICAgZGF0YSA9IEJ1ZmZlci5jb25jYXQoW1xuICAgICAgICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgICAgICAgQnVmZmVyLmFsbG9jKG5iQmxvY2tzICogYmxvY2tTaXplIC0gZGF0YS5sZW5ndGggKyAxKS5maWxsKDApLFxuICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICB2YXIgYmxvY2tzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5iQmxvY2tzOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgaGVhZCA9IEJ1ZmZlci5hbGxvYyg1KTtcbiAgICAgICAgICAgICAgICBoZWFkLndyaXRlVUludDE2QkUoY2hhbm5lbCwgMCk7XG4gICAgICAgICAgICAgICAgaGVhZC53cml0ZVVJbnQ4KFRhZywgMik7XG4gICAgICAgICAgICAgICAgaGVhZC53cml0ZVVJbnQxNkJFKGksIDMpO1xuICAgICAgICAgICAgICAgIHZhciBjaHVuayA9IGRhdGEuc2xpY2UoaSAqIGJsb2NrU2l6ZSwgKGkgKyAxKSAqIGJsb2NrU2l6ZSk7XG4gICAgICAgICAgICAgICAgYmxvY2tzLnB1c2goQnVmZmVyLmNvbmNhdChbaGVhZCwgY2h1bmtdKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYmxvY2tzO1xuICAgICAgICB9LFxuICAgICAgICByZWR1Y2VSZXNwb25zZTogZnVuY3Rpb24gKGFjYywgY2h1bmspIHtcbiAgICAgICAgICAgIHZhciBfYSA9IGFjYyB8fCBpbml0aWFsQWNjLCBkYXRhID0gX2EuZGF0YSwgZGF0YUxlbmd0aCA9IF9hLmRhdGFMZW5ndGgsIHNlcXVlbmNlID0gX2Euc2VxdWVuY2U7XG4gICAgICAgICAgICBpZiAoY2h1bmsucmVhZFVJbnQxNkJFKDApICE9PSBjaGFubmVsKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLlRyYW5zcG9ydEVycm9yKFwiSW52YWxpZCBjaGFubmVsXCIsIFwiSW52YWxpZENoYW5uZWxcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY2h1bmsucmVhZFVJbnQ4KDIpICE9PSBUYWcpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuVHJhbnNwb3J0RXJyb3IoXCJJbnZhbGlkIHRhZ1wiLCBcIkludmFsaWRUYWdcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY2h1bmsucmVhZFVJbnQxNkJFKDMpICE9PSBzZXF1ZW5jZSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5UcmFuc3BvcnRFcnJvcihcIkludmFsaWQgc2VxdWVuY2VcIiwgXCJJbnZhbGlkU2VxdWVuY2VcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWFjYykge1xuICAgICAgICAgICAgICAgIGRhdGFMZW5ndGggPSBjaHVuay5yZWFkVUludDE2QkUoNSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZXF1ZW5jZSsrO1xuICAgICAgICAgICAgdmFyIGNodW5rRGF0YSA9IGNodW5rLnNsaWNlKGFjYyA/IDUgOiA3KTtcbiAgICAgICAgICAgIGRhdGEgPSBCdWZmZXIuY29uY2F0KFtkYXRhLCBjaHVua0RhdGFdKTtcbiAgICAgICAgICAgIGlmIChkYXRhLmxlbmd0aCA+IGRhdGFMZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBkYXRhID0gZGF0YS5zbGljZSgwLCBkYXRhTGVuZ3RoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgICAgICAgICBkYXRhTGVuZ3RoOiBkYXRhTGVuZ3RoLFxuICAgICAgICAgICAgICAgIHNlcXVlbmNlOiBzZXF1ZW5jZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0UmVkdWNlZFJlc3VsdDogZnVuY3Rpb24gKGFjYykge1xuICAgICAgICAgICAgaWYgKGFjYyAmJiBhY2MuZGF0YUxlbmd0aCA9PT0gYWNjLmRhdGEubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjYy5kYXRhO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbn07XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IGNyZWF0ZUhJRGZyYW1pbmc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1oaWQtZnJhbWluZy5qcy5tYXAiXSwibmFtZXMiOlsiZXhwb3J0cyIsIl9fZXNNb2R1bGUiLCJlcnJvcnNfMSIsInJlcXVpcmUiLCJUYWciLCJhc1VJbnQxNkJFIiwidmFsdWUiLCJiIiwiQnVmZmVyIiwiYWxsb2MiLCJ3cml0ZVVJbnQxNkJFIiwiaW5pdGlhbEFjYyIsImRhdGEiLCJkYXRhTGVuZ3RoIiwic2VxdWVuY2UiLCJjcmVhdGVISURmcmFtaW5nIiwiY2hhbm5lbCIsInBhY2tldFNpemUiLCJtYWtlQmxvY2tzIiwiYXBkdSIsImNvbmNhdCIsImxlbmd0aCIsImJsb2NrU2l6ZSIsIm5iQmxvY2tzIiwiTWF0aCIsImNlaWwiLCJmaWxsIiwiYmxvY2tzIiwiaSIsImhlYWQiLCJ3cml0ZVVJbnQ4IiwiY2h1bmsiLCJzbGljZSIsInB1c2giLCJyZWR1Y2VSZXNwb25zZSIsImFjYyIsIl9hIiwicmVhZFVJbnQxNkJFIiwiVHJhbnNwb3J0RXJyb3IiLCJyZWFkVUludDgiLCJjaHVua0RhdGEiLCJnZXRSZWR1Y2VkUmVzdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@ledgerhq/devices/lib/hid-framing.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@ledgerhq/errors/lib-es/helpers.js":
/*!**********************************************************!*\
  !*** ../node_modules/@ledgerhq/errors/lib-es/helpers.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addCustomErrorDeserializer: () => (/* binding */ addCustomErrorDeserializer),\n/* harmony export */   createCustomErrorClass: () => (/* binding */ createCustomErrorClass),\n/* harmony export */   deserializeError: () => (/* binding */ deserializeError),\n/* harmony export */   serializeError: () => (/* binding */ serializeError)\n/* harmony export */ });\n/* eslint-disable no-continue */ /* eslint-disable no-unused-vars */ /* eslint-disable no-param-reassign */ /* eslint-disable no-prototype-builtins */ const errorClasses = {};\nconst deserializers = {};\nconst addCustomErrorDeserializer = (name, deserializer)=>{\n    deserializers[name] = deserializer;\n};\nconst createCustomErrorClass = (name)=>{\n    class CustomErrorClass extends Error {\n        constructor(message, fields, options){\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            super(message || name, options);\n            // Set the prototype explicitly. See https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work\n            Object.setPrototypeOf(this, CustomErrorClass.prototype);\n            this.name = name;\n            if (fields) {\n                for(const k in fields){\n                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                    // @ts-ignore\n                    this[k] = fields[k];\n                }\n            }\n            if (options && isObject(options) && \"cause\" in options && !(\"cause\" in this)) {\n                // .cause was specified but the superconstructor\n                // did not create an instance property.\n                const cause = options.cause;\n                this.cause = cause;\n                if (\"stack\" in cause) {\n                    this.stack = this.stack + \"\\nCAUSE: \" + cause.stack;\n                }\n            }\n        }\n    }\n    errorClasses[name] = CustomErrorClass;\n    return CustomErrorClass;\n};\nfunction isObject(value) {\n    return typeof value === \"object\";\n}\n// inspired from https://github.com/programble/errio/blob/master/index.js\nconst deserializeError = (object)=>{\n    if (object && typeof object === \"object\") {\n        try {\n            if (typeof object.message === \"string\") {\n                const msg = JSON.parse(object.message);\n                if (msg.message && msg.name) {\n                    object = msg;\n                }\n            }\n        } catch (e) {\n        // nothing\n        }\n        let error;\n        if (typeof object.name === \"string\") {\n            const { name } = object;\n            const des = deserializers[name];\n            if (des) {\n                error = des(object);\n            } else {\n                let constructor = name === \"Error\" ? Error : errorClasses[name];\n                if (!constructor) {\n                    console.warn(\"deserializing an unknown class '\" + name + \"'\");\n                    constructor = createCustomErrorClass(name);\n                }\n                error = Object.create(constructor.prototype);\n                try {\n                    for(const prop in object){\n                        if (object.hasOwnProperty(prop)) {\n                            error[prop] = object[prop];\n                        }\n                    }\n                } catch (e) {\n                // sometimes setting a property can fail (e.g. .name)\n                }\n            }\n        } else {\n            if (typeof object.message === \"string\") {\n                error = new Error(object.message);\n            }\n        }\n        if (error && !error.stack && Error.captureStackTrace) {\n            Error.captureStackTrace(error, deserializeError);\n        }\n        return error;\n    }\n    return new Error(String(object));\n};\n// inspired from https://github.com/sindresorhus/serialize-error/blob/master/index.js\nconst serializeError = (value)=>{\n    if (!value) return value;\n    if (typeof value === \"object\") {\n        return destroyCircular(value, []);\n    }\n    if (typeof value === \"function\") {\n        return `[Function: ${value.name || \"anonymous\"}]`;\n    }\n    return value;\n};\n// https://www.npmjs.com/package/destroy-circular\nfunction destroyCircular(from, seen) {\n    const to = {};\n    seen.push(from);\n    for (const key of Object.keys(from)){\n        const value = from[key];\n        if (typeof value === \"function\") {\n            continue;\n        }\n        if (!value || typeof value !== \"object\") {\n            to[key] = value;\n            continue;\n        }\n        if (seen.indexOf(from[key]) === -1) {\n            to[key] = destroyCircular(from[key], seen.slice(0));\n            continue;\n        }\n        to[key] = \"[Circular]\";\n    }\n    if (typeof from.name === \"string\") {\n        to.name = from.name;\n    }\n    if (typeof from.message === \"string\") {\n        to.message = from.message;\n    }\n    if (typeof from.stack === \"string\") {\n        to.stack = from.stack;\n    }\n    return to;\n} //# sourceMappingURL=helpers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@ledgerhq/errors/lib-es/helpers.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@ledgerhq/errors/lib-es/index.js":
/*!********************************************************!*\
  !*** ../node_modules/@ledgerhq/errors/lib-es/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AccountNameRequiredError: () => (/* binding */ AccountNameRequiredError),\n/* harmony export */   AccountNotSupported: () => (/* binding */ AccountNotSupported),\n/* harmony export */   AmountRequired: () => (/* binding */ AmountRequired),\n/* harmony export */   BluetoothRequired: () => (/* binding */ BluetoothRequired),\n/* harmony export */   BtcUnmatchedApp: () => (/* binding */ BtcUnmatchedApp),\n/* harmony export */   CantOpenDevice: () => (/* binding */ CantOpenDevice),\n/* harmony export */   CantScanQRCode: () => (/* binding */ CantScanQRCode),\n/* harmony export */   CashAddrNotSupported: () => (/* binding */ CashAddrNotSupported),\n/* harmony export */   ClaimRewardsFeesWarning: () => (/* binding */ ClaimRewardsFeesWarning),\n/* harmony export */   CurrencyNotSupported: () => (/* binding */ CurrencyNotSupported),\n/* harmony export */   DBNotReset: () => (/* binding */ DBNotReset),\n/* harmony export */   DBWrongPassword: () => (/* binding */ DBWrongPassword),\n/* harmony export */   DeviceAppVerifyNotSupported: () => (/* binding */ DeviceAppVerifyNotSupported),\n/* harmony export */   DeviceExtractOnboardingStateError: () => (/* binding */ DeviceExtractOnboardingStateError),\n/* harmony export */   DeviceGenuineSocketEarlyClose: () => (/* binding */ DeviceGenuineSocketEarlyClose),\n/* harmony export */   DeviceHalted: () => (/* binding */ DeviceHalted),\n/* harmony export */   DeviceInOSUExpected: () => (/* binding */ DeviceInOSUExpected),\n/* harmony export */   DeviceNameInvalid: () => (/* binding */ DeviceNameInvalid),\n/* harmony export */   DeviceNeedsRestart: () => (/* binding */ DeviceNeedsRestart),\n/* harmony export */   DeviceNotGenuineError: () => (/* binding */ DeviceNotGenuineError),\n/* harmony export */   DeviceOnDashboardExpected: () => (/* binding */ DeviceOnDashboardExpected),\n/* harmony export */   DeviceOnDashboardUnexpected: () => (/* binding */ DeviceOnDashboardUnexpected),\n/* harmony export */   DeviceOnboardingStatePollingError: () => (/* binding */ DeviceOnboardingStatePollingError),\n/* harmony export */   DeviceShouldStayInApp: () => (/* binding */ DeviceShouldStayInApp),\n/* harmony export */   DeviceSocketFail: () => (/* binding */ DeviceSocketFail),\n/* harmony export */   DeviceSocketNoBulkStatus: () => (/* binding */ DeviceSocketNoBulkStatus),\n/* harmony export */   DisabledTransactionBroadcastError: () => (/* binding */ DisabledTransactionBroadcastError),\n/* harmony export */   DisconnectedDevice: () => (/* binding */ DisconnectedDevice),\n/* harmony export */   DisconnectedDeviceDuringOperation: () => (/* binding */ DisconnectedDeviceDuringOperation),\n/* harmony export */   DustLimit: () => (/* binding */ DustLimit),\n/* harmony export */   ETHAddressNonEIP: () => (/* binding */ ETHAddressNonEIP),\n/* harmony export */   EnpointConfigError: () => (/* binding */ EnpointConfigError),\n/* harmony export */   EthAppPleaseEnableContractData: () => (/* binding */ EthAppPleaseEnableContractData),\n/* harmony export */   ExpertModeRequired: () => (/* binding */ ExpertModeRequired),\n/* harmony export */   FeeEstimationFailed: () => (/* binding */ FeeEstimationFailed),\n/* harmony export */   FeeNotLoaded: () => (/* binding */ FeeNotLoaded),\n/* harmony export */   FeeNotLoadedSwap: () => (/* binding */ FeeNotLoadedSwap),\n/* harmony export */   FeeRequired: () => (/* binding */ FeeRequired),\n/* harmony export */   FeeTooHigh: () => (/* binding */ FeeTooHigh),\n/* harmony export */   FirmwareNotRecognized: () => (/* binding */ FirmwareNotRecognized),\n/* harmony export */   FirmwareOrAppUpdateRequired: () => (/* binding */ FirmwareOrAppUpdateRequired),\n/* harmony export */   GasLessThanEstimate: () => (/* binding */ GasLessThanEstimate),\n/* harmony export */   GenuineCheckFailed: () => (/* binding */ GenuineCheckFailed),\n/* harmony export */   HardResetFail: () => (/* binding */ HardResetFail),\n/* harmony export */   HwTransportError: () => (/* binding */ HwTransportError),\n/* harmony export */   HwTransportErrorType: () => (/* binding */ HwTransportErrorType),\n/* harmony export */   InvalidAddress: () => (/* binding */ InvalidAddress),\n/* harmony export */   InvalidAddressBecauseDestinationIsAlsoSource: () => (/* binding */ InvalidAddressBecauseDestinationIsAlsoSource),\n/* harmony export */   InvalidNonce: () => (/* binding */ InvalidNonce),\n/* harmony export */   InvalidXRPTag: () => (/* binding */ InvalidXRPTag),\n/* harmony export */   LanguageNotFound: () => (/* binding */ LanguageNotFound),\n/* harmony export */   LatestMCUInstalledError: () => (/* binding */ LatestMCUInstalledError),\n/* harmony export */   LedgerAPI4xx: () => (/* binding */ LedgerAPI4xx),\n/* harmony export */   LedgerAPI5xx: () => (/* binding */ LedgerAPI5xx),\n/* harmony export */   LedgerAPIError: () => (/* binding */ LedgerAPIError),\n/* harmony export */   LedgerAPIErrorWithMessage: () => (/* binding */ LedgerAPIErrorWithMessage),\n/* harmony export */   LedgerAPINotAvailable: () => (/* binding */ LedgerAPINotAvailable),\n/* harmony export */   LockedDeviceError: () => (/* binding */ LockedDeviceError),\n/* harmony export */   MCUNotGenuineToDashboard: () => (/* binding */ MCUNotGenuineToDashboard),\n/* harmony export */   ManagerAppAlreadyInstalledError: () => (/* binding */ ManagerAppAlreadyInstalledError),\n/* harmony export */   ManagerAppDepInstallRequired: () => (/* binding */ ManagerAppDepInstallRequired),\n/* harmony export */   ManagerAppDepUninstallRequired: () => (/* binding */ ManagerAppDepUninstallRequired),\n/* harmony export */   ManagerAppRelyOnBTCError: () => (/* binding */ ManagerAppRelyOnBTCError),\n/* harmony export */   ManagerDeviceLockedError: () => (/* binding */ ManagerDeviceLockedError),\n/* harmony export */   ManagerFirmwareNotEnoughSpaceError: () => (/* binding */ ManagerFirmwareNotEnoughSpaceError),\n/* harmony export */   ManagerNotEnoughSpaceError: () => (/* binding */ ManagerNotEnoughSpaceError),\n/* harmony export */   ManagerUninstallBTCDep: () => (/* binding */ ManagerUninstallBTCDep),\n/* harmony export */   MaxFeeTooLow: () => (/* binding */ MaxFeeTooLow),\n/* harmony export */   NetworkDown: () => (/* binding */ NetworkDown),\n/* harmony export */   NetworkError: () => (/* binding */ NetworkError),\n/* harmony export */   NoAccessToCamera: () => (/* binding */ NoAccessToCamera),\n/* harmony export */   NoAddressesFound: () => (/* binding */ NoAddressesFound),\n/* harmony export */   NoDBPathGiven: () => (/* binding */ NoDBPathGiven),\n/* harmony export */   NotEnoughBalance: () => (/* binding */ NotEnoughBalance),\n/* harmony export */   NotEnoughBalanceBecauseDestinationNotCreated: () => (/* binding */ NotEnoughBalanceBecauseDestinationNotCreated),\n/* harmony export */   NotEnoughBalanceInParentAccount: () => (/* binding */ NotEnoughBalanceInParentAccount),\n/* harmony export */   NotEnoughBalanceToDelegate: () => (/* binding */ NotEnoughBalanceToDelegate),\n/* harmony export */   NotEnoughGas: () => (/* binding */ NotEnoughGas),\n/* harmony export */   NotEnoughGasSwap: () => (/* binding */ NotEnoughGasSwap),\n/* harmony export */   NotEnoughSpendableBalance: () => (/* binding */ NotEnoughSpendableBalance),\n/* harmony export */   NotSupportedLegacyAddress: () => (/* binding */ NotSupportedLegacyAddress),\n/* harmony export */   OpReturnDataSizeLimit: () => (/* binding */ OpReturnDataSizeLimit),\n/* harmony export */   PairingFailed: () => (/* binding */ PairingFailed),\n/* harmony export */   PasswordIncorrectError: () => (/* binding */ PasswordIncorrectError),\n/* harmony export */   PasswordsDontMatchError: () => (/* binding */ PasswordsDontMatchError),\n/* harmony export */   PeerRemovedPairing: () => (/* binding */ PeerRemovedPairing),\n/* harmony export */   PendingOperation: () => (/* binding */ PendingOperation),\n/* harmony export */   PriorityFeeHigherThanMaxFee: () => (/* binding */ PriorityFeeHigherThanMaxFee),\n/* harmony export */   PriorityFeeTooHigh: () => (/* binding */ PriorityFeeTooHigh),\n/* harmony export */   PriorityFeeTooLow: () => (/* binding */ PriorityFeeTooLow),\n/* harmony export */   RecipientRequired: () => (/* binding */ RecipientRequired),\n/* harmony export */   RecommendSubAccountsToEmpty: () => (/* binding */ RecommendSubAccountsToEmpty),\n/* harmony export */   RecommendUndelegation: () => (/* binding */ RecommendUndelegation),\n/* harmony export */   ReplacementTransactionUnderpriced: () => (/* binding */ ReplacementTransactionUnderpriced),\n/* harmony export */   SequenceNumberError: () => (/* binding */ SequenceNumberError),\n/* harmony export */   StatusCodes: () => (/* binding */ StatusCodes),\n/* harmony export */   SyncError: () => (/* binding */ SyncError),\n/* harmony export */   TimeoutTagged: () => (/* binding */ TimeoutTagged),\n/* harmony export */   TransactionHasBeenValidatedError: () => (/* binding */ TransactionHasBeenValidatedError),\n/* harmony export */   TransportError: () => (/* binding */ TransportError),\n/* harmony export */   TransportExchangeTimeoutError: () => (/* binding */ TransportExchangeTimeoutError),\n/* harmony export */   TransportInterfaceNotAvailable: () => (/* binding */ TransportInterfaceNotAvailable),\n/* harmony export */   TransportOpenUserCancelled: () => (/* binding */ TransportOpenUserCancelled),\n/* harmony export */   TransportPendingOperation: () => (/* binding */ TransportPendingOperation),\n/* harmony export */   TransportStatusError: () => (/* binding */ TransportStatusError),\n/* harmony export */   TransportWebUSBGestureRequired: () => (/* binding */ TransportWebUSBGestureRequired),\n/* harmony export */   UnavailableTezosOriginatedAccountReceive: () => (/* binding */ UnavailableTezosOriginatedAccountReceive),\n/* harmony export */   UnavailableTezosOriginatedAccountSend: () => (/* binding */ UnavailableTezosOriginatedAccountSend),\n/* harmony export */   UnexpectedBootloader: () => (/* binding */ UnexpectedBootloader),\n/* harmony export */   UnknownMCU: () => (/* binding */ UnknownMCU),\n/* harmony export */   UnresponsiveDeviceError: () => (/* binding */ UnresponsiveDeviceError),\n/* harmony export */   UpdateFetchFileFail: () => (/* binding */ UpdateFetchFileFail),\n/* harmony export */   UpdateIncorrectHash: () => (/* binding */ UpdateIncorrectHash),\n/* harmony export */   UpdateIncorrectSig: () => (/* binding */ UpdateIncorrectSig),\n/* harmony export */   UpdateYourApp: () => (/* binding */ UpdateYourApp),\n/* harmony export */   UserRefusedAddress: () => (/* binding */ UserRefusedAddress),\n/* harmony export */   UserRefusedAllowManager: () => (/* binding */ UserRefusedAllowManager),\n/* harmony export */   UserRefusedDeviceNameChange: () => (/* binding */ UserRefusedDeviceNameChange),\n/* harmony export */   UserRefusedFirmwareUpdate: () => (/* binding */ UserRefusedFirmwareUpdate),\n/* harmony export */   UserRefusedOnDevice: () => (/* binding */ UserRefusedOnDevice),\n/* harmony export */   WebsocketConnectionError: () => (/* binding */ WebsocketConnectionError),\n/* harmony export */   WebsocketConnectionFailed: () => (/* binding */ WebsocketConnectionFailed),\n/* harmony export */   WrongAppForCurrency: () => (/* binding */ WrongAppForCurrency),\n/* harmony export */   WrongDeviceForAccount: () => (/* binding */ WrongDeviceForAccount),\n/* harmony export */   WrongDeviceForAccountPayout: () => (/* binding */ WrongDeviceForAccountPayout),\n/* harmony export */   WrongDeviceForAccountRefund: () => (/* binding */ WrongDeviceForAccountRefund),\n/* harmony export */   addCustomErrorDeserializer: () => (/* reexport safe */ _helpers__WEBPACK_IMPORTED_MODULE_0__.addCustomErrorDeserializer),\n/* harmony export */   createCustomErrorClass: () => (/* reexport safe */ _helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass),\n/* harmony export */   deserializeError: () => (/* reexport safe */ _helpers__WEBPACK_IMPORTED_MODULE_0__.deserializeError),\n/* harmony export */   getAltStatusMessage: () => (/* binding */ getAltStatusMessage),\n/* harmony export */   serializeError: () => (/* reexport safe */ _helpers__WEBPACK_IMPORTED_MODULE_0__.serializeError)\n/* harmony export */ });\n/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers */ \"(ssr)/../node_modules/@ledgerhq/errors/lib-es/helpers.js\");\n\n\nconst AccountNameRequiredError = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"AccountNameRequired\");\nconst AccountNotSupported = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"AccountNotSupported\");\nconst AmountRequired = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"AmountRequired\");\nconst BluetoothRequired = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"BluetoothRequired\");\nconst BtcUnmatchedApp = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"BtcUnmatchedApp\");\nconst CantOpenDevice = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"CantOpenDevice\");\nconst CashAddrNotSupported = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"CashAddrNotSupported\");\nconst ClaimRewardsFeesWarning = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"ClaimRewardsFeesWarning\");\nconst CurrencyNotSupported = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"CurrencyNotSupported\");\nconst DeviceAppVerifyNotSupported = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"DeviceAppVerifyNotSupported\");\nconst DeviceGenuineSocketEarlyClose = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"DeviceGenuineSocketEarlyClose\");\nconst DeviceNotGenuineError = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"DeviceNotGenuine\");\nconst DeviceOnDashboardExpected = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"DeviceOnDashboardExpected\");\nconst DeviceOnDashboardUnexpected = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"DeviceOnDashboardUnexpected\");\nconst DeviceInOSUExpected = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"DeviceInOSUExpected\");\nconst DeviceHalted = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"DeviceHalted\");\nconst DeviceNameInvalid = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"DeviceNameInvalid\");\nconst DeviceSocketFail = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"DeviceSocketFail\");\nconst DeviceSocketNoBulkStatus = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"DeviceSocketNoBulkStatus\");\nconst DeviceNeedsRestart = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"DeviceSocketNoBulkStatus\");\nconst UnresponsiveDeviceError = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"UnresponsiveDeviceError\");\nconst DisconnectedDevice = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"DisconnectedDevice\");\nconst DisconnectedDeviceDuringOperation = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"DisconnectedDeviceDuringOperation\");\nconst DeviceExtractOnboardingStateError = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"DeviceExtractOnboardingStateError\");\nconst DeviceOnboardingStatePollingError = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"DeviceOnboardingStatePollingError\");\nconst EnpointConfigError = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"EnpointConfig\");\nconst EthAppPleaseEnableContractData = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"EthAppPleaseEnableContractData\");\nconst FeeEstimationFailed = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"FeeEstimationFailed\");\nconst FirmwareNotRecognized = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"FirmwareNotRecognized\");\nconst HardResetFail = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"HardResetFail\");\nconst InvalidXRPTag = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"InvalidXRPTag\");\nconst InvalidAddress = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"InvalidAddress\");\nconst InvalidNonce = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"InvalidNonce\");\nconst InvalidAddressBecauseDestinationIsAlsoSource = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"InvalidAddressBecauseDestinationIsAlsoSource\");\nconst LatestMCUInstalledError = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"LatestMCUInstalledError\");\nconst UnknownMCU = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"UnknownMCU\");\nconst LedgerAPIError = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"LedgerAPIError\");\nconst LedgerAPIErrorWithMessage = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"LedgerAPIErrorWithMessage\");\nconst LedgerAPINotAvailable = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"LedgerAPINotAvailable\");\nconst ManagerAppAlreadyInstalledError = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"ManagerAppAlreadyInstalled\");\nconst ManagerAppRelyOnBTCError = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"ManagerAppRelyOnBTC\");\nconst ManagerAppDepInstallRequired = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"ManagerAppDepInstallRequired\");\nconst ManagerAppDepUninstallRequired = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"ManagerAppDepUninstallRequired\");\nconst ManagerDeviceLockedError = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"ManagerDeviceLocked\");\nconst ManagerFirmwareNotEnoughSpaceError = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"ManagerFirmwareNotEnoughSpace\");\nconst ManagerNotEnoughSpaceError = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"ManagerNotEnoughSpace\");\nconst ManagerUninstallBTCDep = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"ManagerUninstallBTCDep\");\nconst NetworkDown = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"NetworkDown\");\nconst NetworkError = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"NetworkError\");\nconst NoAddressesFound = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"NoAddressesFound\");\nconst NotEnoughBalance = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"NotEnoughBalance\");\nconst NotEnoughBalanceToDelegate = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"NotEnoughBalanceToDelegate\");\nconst NotEnoughBalanceInParentAccount = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"NotEnoughBalanceInParentAccount\");\nconst NotEnoughSpendableBalance = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"NotEnoughSpendableBalance\");\nconst NotEnoughBalanceBecauseDestinationNotCreated = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"NotEnoughBalanceBecauseDestinationNotCreated\");\nconst NoAccessToCamera = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"NoAccessToCamera\");\nconst NotEnoughGas = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"NotEnoughGas\");\n// Error message specifically for the PTX swap flow\nconst NotEnoughGasSwap = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"NotEnoughGasSwap\");\nconst NotSupportedLegacyAddress = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"NotSupportedLegacyAddress\");\nconst GasLessThanEstimate = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"GasLessThanEstimate\");\nconst PriorityFeeTooLow = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"PriorityFeeTooLow\");\nconst PriorityFeeTooHigh = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"PriorityFeeTooHigh\");\nconst PriorityFeeHigherThanMaxFee = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"PriorityFeeHigherThanMaxFee\");\nconst MaxFeeTooLow = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"MaxFeeTooLow\");\nconst PasswordsDontMatchError = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"PasswordsDontMatch\");\nconst PasswordIncorrectError = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"PasswordIncorrect\");\nconst RecommendSubAccountsToEmpty = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"RecommendSubAccountsToEmpty\");\nconst RecommendUndelegation = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"RecommendUndelegation\");\nconst TimeoutTagged = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"TimeoutTagged\");\nconst UnexpectedBootloader = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"UnexpectedBootloader\");\nconst MCUNotGenuineToDashboard = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"MCUNotGenuineToDashboard\");\nconst RecipientRequired = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"RecipientRequired\");\nconst UnavailableTezosOriginatedAccountReceive = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"UnavailableTezosOriginatedAccountReceive\");\nconst UnavailableTezosOriginatedAccountSend = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"UnavailableTezosOriginatedAccountSend\");\nconst UpdateFetchFileFail = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"UpdateFetchFileFail\");\nconst UpdateIncorrectHash = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"UpdateIncorrectHash\");\nconst UpdateIncorrectSig = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"UpdateIncorrectSig\");\nconst UpdateYourApp = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"UpdateYourApp\");\nconst UserRefusedDeviceNameChange = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"UserRefusedDeviceNameChange\");\nconst UserRefusedAddress = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"UserRefusedAddress\");\nconst UserRefusedFirmwareUpdate = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"UserRefusedFirmwareUpdate\");\nconst UserRefusedAllowManager = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"UserRefusedAllowManager\");\nconst UserRefusedOnDevice = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"UserRefusedOnDevice\"); // TODO rename because it's just for transaction refusal\nconst ExpertModeRequired = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"ExpertModeRequired\");\nconst TransportOpenUserCancelled = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"TransportOpenUserCancelled\");\nconst TransportInterfaceNotAvailable = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"TransportInterfaceNotAvailable\");\nconst TransportPendingOperation = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"TransportPendingOperation\");\nconst TransportWebUSBGestureRequired = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"TransportWebUSBGestureRequired\");\nconst TransactionHasBeenValidatedError = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"TransactionHasBeenValidatedError\");\nconst TransportExchangeTimeoutError = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"TransportExchangeTimeoutError\");\nconst DeviceShouldStayInApp = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"DeviceShouldStayInApp\");\nconst WebsocketConnectionError = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"WebsocketConnectionError\");\nconst WebsocketConnectionFailed = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"WebsocketConnectionFailed\");\nconst WrongDeviceForAccount = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"WrongDeviceForAccount\");\nconst WrongDeviceForAccountPayout = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"WrongDeviceForAccountPayout\");\nconst WrongDeviceForAccountRefund = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"WrongDeviceForAccountRefund\");\nconst WrongAppForCurrency = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"WrongAppForCurrency\");\nconst ETHAddressNonEIP = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"ETHAddressNonEIP\");\nconst CantScanQRCode = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"CantScanQRCode\");\nconst FeeNotLoaded = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"FeeNotLoaded\");\nconst FeeNotLoadedSwap = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"FeeNotLoadedSwap\");\nconst FeeRequired = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"FeeRequired\");\nconst FeeTooHigh = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"FeeTooHigh\");\nconst PendingOperation = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"PendingOperation\");\nconst SyncError = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"SyncError\");\nconst PairingFailed = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"PairingFailed\");\nconst PeerRemovedPairing = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"PeerRemovedPairing\");\nconst GenuineCheckFailed = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"GenuineCheckFailed\");\nconst LedgerAPI4xx = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"LedgerAPI4xx\");\nconst LedgerAPI5xx = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"LedgerAPI5xx\");\nconst FirmwareOrAppUpdateRequired = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"FirmwareOrAppUpdateRequired\");\n// SpeedUp / Cancel EVM tx\nconst ReplacementTransactionUnderpriced = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"ReplacementTransactionUnderpriced\");\n// Bitcoin family\nconst OpReturnDataSizeLimit = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"OpReturnSizeLimit\");\nconst DustLimit = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"DustLimit\");\n// Language\nconst LanguageNotFound = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"LanguageNotFound\");\n// db stuff, no need to translate\nconst NoDBPathGiven = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"NoDBPathGiven\");\nconst DBWrongPassword = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"DBWrongPassword\");\nconst DBNotReset = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"DBNotReset\");\nconst SequenceNumberError = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"SequenceNumberError\");\nconst DisabledTransactionBroadcastError = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"DisabledTransactionBroadcastError\");\n/**\n * Type of a Transport error used to represent all equivalent errors coming from all possible implementation of Transport\n */ var HwTransportErrorType;\n(function(HwTransportErrorType) {\n    HwTransportErrorType[\"Unknown\"] = \"Unknown\";\n    HwTransportErrorType[\"LocationServicesDisabled\"] = \"LocationServicesDisabled\";\n    HwTransportErrorType[\"LocationServicesUnauthorized\"] = \"LocationServicesUnauthorized\";\n    HwTransportErrorType[\"BluetoothScanStartFailed\"] = \"BluetoothScanStartFailed\";\n})(HwTransportErrorType || (HwTransportErrorType = {}));\n/**\n * Represents an error coming from the usage of any Transport implementation.\n *\n * Needed to map a specific implementation error into an error that\n * can be managed by any code unaware of the specific Transport implementation\n * that was used.\n */ class HwTransportError extends Error {\n    constructor(type, message){\n        super(message);\n        this.name = \"HwTransportError\";\n        this.type = type;\n        // Needed as long as we target < ES6\n        Object.setPrototypeOf(this, HwTransportError.prototype);\n    }\n}\n/**\n * TransportError is used for any generic transport errors.\n * e.g. Error thrown when data received by exchanges are incorrect or if exchanged failed to communicate with the device for various reason.\n */ class TransportError extends Error {\n    constructor(message, id){\n        const name = \"TransportError\";\n        super(message || name);\n        this.name = name;\n        this.message = message;\n        this.stack = new Error(message).stack;\n        this.id = id;\n    }\n}\n(0,_helpers__WEBPACK_IMPORTED_MODULE_0__.addCustomErrorDeserializer)(\"TransportError\", (e)=>new TransportError(e.message, e.id));\nconst StatusCodes = {\n    ACCESS_CONDITION_NOT_FULFILLED: 0x9804,\n    ALGORITHM_NOT_SUPPORTED: 0x9484,\n    CLA_NOT_SUPPORTED: 0x6e00,\n    CODE_BLOCKED: 0x9840,\n    CODE_NOT_INITIALIZED: 0x9802,\n    COMMAND_INCOMPATIBLE_FILE_STRUCTURE: 0x6981,\n    CONDITIONS_OF_USE_NOT_SATISFIED: 0x6985,\n    CONTRADICTION_INVALIDATION: 0x9810,\n    CONTRADICTION_SECRET_CODE_STATUS: 0x9808,\n    CUSTOM_IMAGE_BOOTLOADER: 0x662f,\n    CUSTOM_IMAGE_EMPTY: 0x662e,\n    FILE_ALREADY_EXISTS: 0x6a89,\n    FILE_NOT_FOUND: 0x9404,\n    GP_AUTH_FAILED: 0x6300,\n    HALTED: 0x6faa,\n    INCONSISTENT_FILE: 0x9408,\n    INCORRECT_DATA: 0x6a80,\n    INCORRECT_LENGTH: 0x6700,\n    INCORRECT_P1_P2: 0x6b00,\n    INS_NOT_SUPPORTED: 0x6d00,\n    DEVICE_NOT_ONBOARDED: 0x6d07,\n    DEVICE_NOT_ONBOARDED_2: 0x6611,\n    INVALID_KCV: 0x9485,\n    INVALID_OFFSET: 0x9402,\n    LICENSING: 0x6f42,\n    LOCKED_DEVICE: 0x5515,\n    MAX_VALUE_REACHED: 0x9850,\n    MEMORY_PROBLEM: 0x9240,\n    MISSING_CRITICAL_PARAMETER: 0x6800,\n    NO_EF_SELECTED: 0x9400,\n    NOT_ENOUGH_MEMORY_SPACE: 0x6a84,\n    OK: 0x9000,\n    PIN_REMAINING_ATTEMPTS: 0x63c0,\n    REFERENCED_DATA_NOT_FOUND: 0x6a88,\n    SECURITY_STATUS_NOT_SATISFIED: 0x6982,\n    TECHNICAL_PROBLEM: 0x6f00,\n    UNKNOWN_APDU: 0x6d02,\n    USER_REFUSED_ON_DEVICE: 0x5501,\n    NOT_ENOUGH_SPACE: 0x5102\n};\nfunction getAltStatusMessage(code) {\n    switch(code){\n        // improve text of most common errors\n        case 0x6700:\n            return \"Incorrect length\";\n        case 0x6800:\n            return \"Missing critical parameter\";\n        case 0x6982:\n            return \"Security not satisfied (dongle locked or have invalid access rights)\";\n        case 0x6985:\n            return \"Condition of use not satisfied (denied by the user?)\";\n        case 0x6a80:\n            return \"Invalid data received\";\n        case 0x6b00:\n            return \"Invalid parameter received\";\n        case 0x5515:\n            return \"Locked device\";\n    }\n    if (0x6f00 <= code && code <= 0x6fff) {\n        return \"Internal error, please report\";\n    }\n}\n/**\n * Error thrown when a device returned a non success status.\n * the error.statusCode is one of the `StatusCodes` exported by this library.\n */ class TransportStatusError extends Error {\n    /**\n     * @param statusCode The error status code coming from a Transport implementation\n     * @param options containing:\n     *  - canBeMappedToChildError: enable the mapping of TransportStatusError to an error extending/inheriting from it\n     *  . Ex: LockedDeviceError. Default to true.\n     */ constructor(statusCode, { canBeMappedToChildError = true } = {}){\n        const statusText = Object.keys(StatusCodes).find((k)=>StatusCodes[k] === statusCode) || \"UNKNOWN_ERROR\";\n        const smsg = getAltStatusMessage(statusCode) || statusText;\n        const statusCodeStr = statusCode.toString(16);\n        const message = `Ledger device: ${smsg} (0x${statusCodeStr})`;\n        super(message);\n        this.name = \"TransportStatusError\";\n        this.statusCode = statusCode;\n        this.statusText = statusText;\n        Object.setPrototypeOf(this, TransportStatusError.prototype);\n        // Maps to a LockedDeviceError\n        if (canBeMappedToChildError && statusCode === StatusCodes.LOCKED_DEVICE) {\n            return new LockedDeviceError(message);\n        }\n    }\n}\nclass LockedDeviceError extends TransportStatusError {\n    constructor(message){\n        super(StatusCodes.LOCKED_DEVICE, {\n            canBeMappedToChildError: false\n        });\n        if (message) {\n            this.message = message;\n        }\n        this.name = \"LockedDeviceError\";\n        Object.setPrototypeOf(this, LockedDeviceError.prototype);\n    }\n}\n(0,_helpers__WEBPACK_IMPORTED_MODULE_0__.addCustomErrorDeserializer)(\"TransportStatusError\", (e)=>new TransportStatusError(e.statusCode)); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@ledgerhq/errors/lib-es/index.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@ledgerhq/hw-transport-webhid/lib-es/TransportWebHID.js":
/*!*******************************************************************************!*\
  !*** ../node_modules/@ledgerhq/hw-transport-webhid/lib-es/TransportWebHID.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _ledgerhq_hw_transport__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ledgerhq/hw-transport */ \"(ssr)/../node_modules/@ledgerhq/hw-transport-webhid/node_modules/@ledgerhq/hw-transport/lib-es/Transport.js\");\n/* harmony import */ var _ledgerhq_devices_lib_hid_framing__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ledgerhq/devices/lib/hid-framing */ \"(ssr)/../node_modules/@ledgerhq/devices/lib/hid-framing.js\");\n/* harmony import */ var _ledgerhq_devices__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ledgerhq/devices */ \"(ssr)/../node_modules/@ledgerhq/devices/lib-es/index.js\");\n/* harmony import */ var _ledgerhq_logs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ledgerhq/logs */ \"(ssr)/../node_modules/@ledgerhq/logs/lib-es/index.js\");\n/* harmony import */ var _ledgerhq_errors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ledgerhq/errors */ \"(ssr)/../node_modules/@ledgerhq/errors/lib-es/index.js\");\nvar __extends = undefined && undefined.__extends || function() {\n    var extendStatics = function(d, b) {\n        extendStatics = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(d, b) {\n            d.__proto__ = b;\n        } || function(d, b) {\n            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n        };\n        return extendStatics(d, b);\n    };\n    return function(d, b) {\n        if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\nvar __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = undefined && undefined.__generator || function(thisArg, body) {\n    var _ = {\n        label: 0,\n        sent: function() {\n            if (t[0] & 1) throw t[1];\n            return t[1];\n        },\n        trys: [],\n        ops: []\n    }, f, y, t, g;\n    return g = {\n        next: verb(0),\n        \"throw\": verb(1),\n        \"return\": verb(2)\n    }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() {\n        return this;\n    }), g;\n    function verb(n) {\n        return function(v) {\n            return step([\n                n,\n                v\n            ]);\n        };\n    }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while(_)try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [\n                op[0] & 2,\n                t.value\n            ];\n            switch(op[0]){\n                case 0:\n                case 1:\n                    t = op;\n                    break;\n                case 4:\n                    _.label++;\n                    return {\n                        value: op[1],\n                        done: false\n                    };\n                case 5:\n                    _.label++;\n                    y = op[1];\n                    op = [\n                        0\n                    ];\n                    continue;\n                case 7:\n                    op = _.ops.pop();\n                    _.trys.pop();\n                    continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                        _ = 0;\n                        continue;\n                    }\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                        _.label = op[1];\n                        break;\n                    }\n                    if (op[0] === 6 && _.label < t[1]) {\n                        _.label = t[1];\n                        t = op;\n                        break;\n                    }\n                    if (t && _.label < t[2]) {\n                        _.label = t[2];\n                        _.ops.push(op);\n                        break;\n                    }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop();\n                    continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) {\n            op = [\n                6,\n                e\n            ];\n            y = 0;\n        } finally{\n            f = t = 0;\n        }\n        if (op[0] & 5) throw op[1];\n        return {\n            value: op[0] ? op[1] : void 0,\n            done: true\n        };\n    }\n};\nvar __read = undefined && undefined.__read || function(o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);\n    } catch (error) {\n        e = {\n            error: error\n        };\n    } finally{\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        } finally{\n            if (e) throw e.error;\n        }\n    }\n    return ar;\n};\n\n\n\n\n\nvar ledgerDevices = [\n    {\n        vendorId: _ledgerhq_devices__WEBPACK_IMPORTED_MODULE_2__.ledgerUSBVendorId\n    }\n];\nvar isSupported = function() {\n    return Promise.resolve(!!(window.navigator && window.navigator.hid));\n};\nvar getHID = function() {\n    // $FlowFixMe\n    var hid = navigator.hid;\n    if (!hid) throw new _ledgerhq_errors__WEBPACK_IMPORTED_MODULE_4__.TransportError(\"navigator.hid is not supported\", \"HIDNotSupported\");\n    return hid;\n};\nfunction requestLedgerDevices() {\n    return __awaiter(this, void 0, void 0, function() {\n        var device;\n        return __generator(this, function(_a) {\n            switch(_a.label){\n                case 0:\n                    return [\n                        4 /*yield*/ ,\n                        getHID().requestDevice({\n                            filters: ledgerDevices\n                        })\n                    ];\n                case 1:\n                    device = _a.sent();\n                    if (Array.isArray(device)) return [\n                        2 /*return*/ ,\n                        device\n                    ];\n                    return [\n                        2 /*return*/ ,\n                        [\n                            device\n                        ]\n                    ];\n            }\n        });\n    });\n}\nfunction getLedgerDevices() {\n    return __awaiter(this, void 0, void 0, function() {\n        var devices;\n        return __generator(this, function(_a) {\n            switch(_a.label){\n                case 0:\n                    return [\n                        4 /*yield*/ ,\n                        getHID().getDevices()\n                    ];\n                case 1:\n                    devices = _a.sent();\n                    return [\n                        2 /*return*/ ,\n                        devices.filter(function(d) {\n                            return d.vendorId === _ledgerhq_devices__WEBPACK_IMPORTED_MODULE_2__.ledgerUSBVendorId;\n                        })\n                    ];\n            }\n        });\n    });\n}\nfunction getFirstLedgerDevice() {\n    return __awaiter(this, void 0, void 0, function() {\n        var existingDevices, devices;\n        return __generator(this, function(_a) {\n            switch(_a.label){\n                case 0:\n                    return [\n                        4 /*yield*/ ,\n                        getLedgerDevices()\n                    ];\n                case 1:\n                    existingDevices = _a.sent();\n                    if (existingDevices.length > 0) return [\n                        2 /*return*/ ,\n                        existingDevices[0]\n                    ];\n                    return [\n                        4 /*yield*/ ,\n                        requestLedgerDevices()\n                    ];\n                case 2:\n                    devices = _a.sent();\n                    return [\n                        2 /*return*/ ,\n                        devices[0]\n                    ];\n            }\n        });\n    });\n}\n/**\n * WebHID Transport implementation\n * @example\n * import TransportWebHID from \"@ledgerhq/hw-transport-webhid\";\n * ...\n * TransportWebHID.create().then(transport => ...)\n */ var TransportWebHID = /** @class */ function(_super) {\n    __extends(TransportWebHID, _super);\n    function TransportWebHID(device) {\n        var _this = _super.call(this) || this;\n        _this.channel = Math.floor(Math.random() * 0xffff);\n        _this.packetSize = 64;\n        _this.inputs = [];\n        _this.read = function() {\n            if (_this.inputs.length) {\n                return Promise.resolve(_this.inputs.shift());\n            }\n            return new Promise(function(success) {\n                _this.inputCallback = success;\n            });\n        };\n        _this.onInputReport = function(e) {\n            var buffer = Buffer.from(e.data.buffer);\n            if (_this.inputCallback) {\n                _this.inputCallback(buffer);\n                _this.inputCallback = null;\n            } else {\n                _this.inputs.push(buffer);\n            }\n        };\n        _this._disconnectEmitted = false;\n        _this._emitDisconnect = function(e) {\n            if (_this._disconnectEmitted) return;\n            _this._disconnectEmitted = true;\n            _this.emit(\"disconnect\", e);\n        };\n        /**\n         * Exchange with the device using APDU protocol.\n         * @param apdu\n         * @returns a promise of apdu response\n         */ _this.exchange = function(apdu) {\n            return __awaiter(_this, void 0, void 0, function() {\n                var b;\n                var _this = this;\n                return __generator(this, function(_a) {\n                    switch(_a.label){\n                        case 0:\n                            return [\n                                4 /*yield*/ ,\n                                this.exchangeAtomicImpl(function() {\n                                    return __awaiter(_this, void 0, void 0, function() {\n                                        var _a, channel, packetSize, framing, blocks, i, result, acc, buffer;\n                                        return __generator(this, function(_b) {\n                                            switch(_b.label){\n                                                case 0:\n                                                    _a = this, channel = _a.channel, packetSize = _a.packetSize;\n                                                    (0,_ledgerhq_logs__WEBPACK_IMPORTED_MODULE_3__.log)(\"apdu\", \"=> \" + apdu.toString(\"hex\"));\n                                                    framing = (0,_ledgerhq_devices_lib_hid_framing__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(channel, packetSize);\n                                                    blocks = framing.makeBlocks(apdu);\n                                                    i = 0;\n                                                    _b.label = 1;\n                                                case 1:\n                                                    if (!(i < blocks.length)) return [\n                                                        3 /*break*/ ,\n                                                        4\n                                                    ];\n                                                    return [\n                                                        4 /*yield*/ ,\n                                                        this.device.sendReport(0, blocks[i])\n                                                    ];\n                                                case 2:\n                                                    _b.sent();\n                                                    _b.label = 3;\n                                                case 3:\n                                                    i++;\n                                                    return [\n                                                        3 /*break*/ ,\n                                                        1\n                                                    ];\n                                                case 4:\n                                                    if (!!(result = framing.getReducedResult(acc))) return [\n                                                        3 /*break*/ ,\n                                                        6\n                                                    ];\n                                                    return [\n                                                        4 /*yield*/ ,\n                                                        this.read()\n                                                    ];\n                                                case 5:\n                                                    buffer = _b.sent();\n                                                    acc = framing.reduceResponse(acc, buffer);\n                                                    return [\n                                                        3 /*break*/ ,\n                                                        4\n                                                    ];\n                                                case 6:\n                                                    (0,_ledgerhq_logs__WEBPACK_IMPORTED_MODULE_3__.log)(\"apdu\", \"<= \" + result.toString(\"hex\"));\n                                                    return [\n                                                        2 /*return*/ ,\n                                                        result\n                                                    ];\n                                            }\n                                        });\n                                    });\n                                })[\"catch\"](function(e) {\n                                    if (e && e.message && e.message.includes(\"write\")) {\n                                        _this._emitDisconnect(e);\n                                        throw new _ledgerhq_errors__WEBPACK_IMPORTED_MODULE_4__.DisconnectedDeviceDuringOperation(e.message);\n                                    }\n                                    throw e;\n                                })\n                            ];\n                        case 1:\n                            b = _a.sent();\n                            return [\n                                2 /*return*/ ,\n                                b\n                            ];\n                    }\n                });\n            });\n        };\n        _this.device = device;\n        _this.deviceModel = typeof device.productId === \"number\" ? (0,_ledgerhq_devices__WEBPACK_IMPORTED_MODULE_2__.identifyUSBProductId)(device.productId) : undefined;\n        device.addEventListener(\"inputreport\", _this.onInputReport);\n        return _this;\n    }\n    /**\n     * Similar to create() except it will always display the device permission (even if some devices are already accepted).\n     */ TransportWebHID.request = function() {\n        return __awaiter(this, void 0, void 0, function() {\n            var _a, device;\n            return __generator(this, function(_b) {\n                switch(_b.label){\n                    case 0:\n                        return [\n                            4 /*yield*/ ,\n                            requestLedgerDevices()\n                        ];\n                    case 1:\n                        _a = __read.apply(void 0, [\n                            _b.sent(),\n                            1\n                        ]), device = _a[0];\n                        return [\n                            2 /*return*/ ,\n                            TransportWebHID.open(device)\n                        ];\n                }\n            });\n        });\n    };\n    /**\n     * Similar to create() except it will never display the device permission (it returns a Promise<?Transport>, null if it fails to find a device).\n     */ TransportWebHID.openConnected = function() {\n        return __awaiter(this, void 0, void 0, function() {\n            var devices;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        return [\n                            4 /*yield*/ ,\n                            getLedgerDevices()\n                        ];\n                    case 1:\n                        devices = _a.sent();\n                        if (devices.length === 0) return [\n                            2 /*return*/ ,\n                            null\n                        ];\n                        return [\n                            2 /*return*/ ,\n                            TransportWebHID.open(devices[0])\n                        ];\n                }\n            });\n        });\n    };\n    /**\n     * Create a Ledger transport with a HIDDevice\n     */ TransportWebHID.open = function(device) {\n        return __awaiter(this, void 0, void 0, function() {\n            var transport, onDisconnect;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        return [\n                            4 /*yield*/ ,\n                            device.open()\n                        ];\n                    case 1:\n                        _a.sent();\n                        transport = new TransportWebHID(device);\n                        onDisconnect = function(e) {\n                            if (device === e.device) {\n                                getHID().removeEventListener(\"disconnect\", onDisconnect);\n                                transport._emitDisconnect(new _ledgerhq_errors__WEBPACK_IMPORTED_MODULE_4__.DisconnectedDevice());\n                            }\n                        };\n                        getHID().addEventListener(\"disconnect\", onDisconnect);\n                        return [\n                            2 /*return*/ ,\n                            transport\n                        ];\n                }\n            });\n        });\n    };\n    /**\n     * Release the transport device\n     */ TransportWebHID.prototype.close = function() {\n        return __awaiter(this, void 0, void 0, function() {\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        return [\n                            4 /*yield*/ ,\n                            this.exchangeBusyPromise\n                        ];\n                    case 1:\n                        _a.sent();\n                        this.device.removeEventListener(\"inputreport\", this.onInputReport);\n                        return [\n                            4 /*yield*/ ,\n                            this.device.close()\n                        ];\n                    case 2:\n                        _a.sent();\n                        return [\n                            2 /*return*/ \n                        ];\n                }\n            });\n        });\n    };\n    TransportWebHID.prototype.setScrambleKey = function() {};\n    /**\n     * Check if WebUSB transport is supported.\n     */ TransportWebHID.isSupported = isSupported;\n    /**\n     * List the WebUSB devices that was previously authorized by the user.\n     */ TransportWebHID.list = getLedgerDevices;\n    /**\n     * Actively listen to WebUSB devices and emit ONE device\n     * that was either accepted before, if not it will trigger the native permission UI.\n     *\n     * Important: it must be called in the context of a UI click!\n     */ TransportWebHID.listen = function(observer) {\n        var unsubscribed = false;\n        getFirstLedgerDevice().then(function(device) {\n            if (!device) {\n                observer.error(new _ledgerhq_errors__WEBPACK_IMPORTED_MODULE_4__.TransportOpenUserCancelled(\"Access denied to use Ledger device\"));\n            } else if (!unsubscribed) {\n                var deviceModel = typeof device.productId === \"number\" ? (0,_ledgerhq_devices__WEBPACK_IMPORTED_MODULE_2__.identifyUSBProductId)(device.productId) : undefined;\n                observer.next({\n                    type: \"add\",\n                    descriptor: device,\n                    deviceModel: deviceModel\n                });\n                observer.complete();\n            }\n        }, function(error) {\n            observer.error(new _ledgerhq_errors__WEBPACK_IMPORTED_MODULE_4__.TransportOpenUserCancelled(error.message));\n        });\n        function unsubscribe() {\n            unsubscribed = true;\n        }\n        return {\n            unsubscribe: unsubscribe\n        };\n    };\n    return TransportWebHID;\n}(_ledgerhq_hw_transport__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (TransportWebHID); //# sourceMappingURL=TransportWebHID.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0BsZWRnZXJocS9ody10cmFuc3BvcnQtd2ViaGlkL2xpYi1lcy9UcmFuc3BvcnRXZWJISUQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsSUFBSUEsWUFBWSxTQUFLLElBQUksU0FBSSxDQUFDQSxTQUFTLElBQUs7SUFDeEMsSUFBSUMsZ0JBQWdCLFNBQVVDLENBQUMsRUFBRUMsQ0FBQztRQUM5QkYsZ0JBQWdCRyxPQUFPQyxjQUFjLElBQ2hDO1lBQUVDLFdBQVcsRUFBRTtRQUFDLGNBQWFDLFNBQVMsU0FBVUwsQ0FBQyxFQUFFQyxDQUFDO1lBQUlELEVBQUVJLFNBQVMsR0FBR0g7UUFBRyxLQUMxRSxTQUFVRCxDQUFDLEVBQUVDLENBQUM7WUFBSSxJQUFLLElBQUlLLEtBQUtMLEVBQUcsSUFBSUMsT0FBT0ssU0FBUyxDQUFDQyxjQUFjLENBQUNDLElBQUksQ0FBQ1IsR0FBR0ssSUFBSU4sQ0FBQyxDQUFDTSxFQUFFLEdBQUdMLENBQUMsQ0FBQ0ssRUFBRTtRQUFFO1FBQ3BHLE9BQU9QLGNBQWNDLEdBQUdDO0lBQzVCO0lBQ0EsT0FBTyxTQUFVRCxDQUFDLEVBQUVDLENBQUM7UUFDakIsSUFBSSxPQUFPQSxNQUFNLGNBQWNBLE1BQU0sTUFDakMsTUFBTSxJQUFJUyxVQUFVLHlCQUF5QkMsT0FBT1YsS0FBSztRQUM3REYsY0FBY0MsR0FBR0M7UUFDakIsU0FBU1c7WUFBTyxJQUFJLENBQUNDLFdBQVcsR0FBR2I7UUFBRztRQUN0Q0EsRUFBRU8sU0FBUyxHQUFHTixNQUFNLE9BQU9DLE9BQU9ZLE1BQU0sQ0FBQ2IsS0FBTVcsQ0FBQUEsR0FBR0wsU0FBUyxHQUFHTixFQUFFTSxTQUFTLEVBQUUsSUFBSUssSUFBRztJQUN0RjtBQUNKO0FBQ0EsSUFBSUcsWUFBWSxTQUFLLElBQUksU0FBSSxDQUFDQSxTQUFTLElBQUssU0FBVUMsT0FBTyxFQUFFQyxVQUFVLEVBQUVDLENBQUMsRUFBRUMsU0FBUztJQUNuRixTQUFTQyxN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LElBQUksQ0FBQ0EsUUFBUTtnQkFDVDZELFNBQVMvRSxLQUFLLENBQUMsSUFBSU0sd0VBQTBCQSxDQUFDO1lBQ2xELE9BQ0ssSUFBSSxDQUFDMEUsY0FBYztnQkFDcEIsSUFBSWhCLGNBQWMsT0FBTzlDLE9BQU8rQyxTQUFTLEtBQUssV0FDeEM5RCx1RUFBb0JBLENBQUNlLE9BQU8rQyxTQUFTLElBQ3JDQztnQkFDTmEsU0FBU2hILElBQUksQ0FBQztvQkFDVmtILE1BQU07b0JBQ05DLFlBQVloRTtvQkFDWjhDLGFBQWFBO2dCQUNqQjtnQkFDQWUsU0FBU0ksUUFBUTtZQUNyQjtRQUNKLEdBQUcsU0FBVW5GLEtBQUs7WUFDZCtFLFNBQVMvRSxLQUFLLENBQUMsSUFBSU0sd0VBQTBCQSxDQUFDTixNQUFNOEQsT0FBTztRQUMvRDtRQUNBLFNBQVNzQjtZQUNMSixlQUFlO1FBQ25CO1FBQ0EsT0FBTztZQUNISSxhQUFhQTtRQUNqQjtJQUNKO0lBQ0EsT0FBT3ZEO0FBQ1gsRUFBRTVCLDhEQUFTQTtBQUNYLGlFQUFlNEIsZUFBZUEsRUFBQyxDQUMvQiwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BsZWRnZXJocS9ody10cmFuc3BvcnQtd2ViaGlkL2xpYi1lcy9UcmFuc3BvcnRXZWJISUQuanM/Y2E0MCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG52YXIgX19nZW5lcmF0b3IgPSAodGhpcyAmJiB0aGlzLl9fZ2VuZXJhdG9yKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgYm9keSkge1xuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XG4gICAgfVxufTtcbnZhciBfX3JlYWQgPSAodGhpcyAmJiB0aGlzLl9fcmVhZCkgfHwgZnVuY3Rpb24gKG8sIG4pIHtcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XG4gICAgaWYgKCFtKSByZXR1cm4gbztcbiAgICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcbiAgICB0cnkge1xuICAgICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XG4gICAgZmluYWxseSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cbiAgICB9XG4gICAgcmV0dXJuIGFyO1xufTtcbmltcG9ydCBUcmFuc3BvcnQgZnJvbSBcIkBsZWRnZXJocS9ody10cmFuc3BvcnRcIjtcbmltcG9ydCBoaWRGcmFtaW5nIGZyb20gXCJAbGVkZ2VyaHEvZGV2aWNlcy9saWIvaGlkLWZyYW1pbmdcIjtcbmltcG9ydCB7IGlkZW50aWZ5VVNCUHJvZHVjdElkLCBsZWRnZXJVU0JWZW5kb3JJZCB9IGZyb20gXCJAbGVkZ2VyaHEvZGV2aWNlc1wiO1xuaW1wb3J0IHsgbG9nIH0gZnJvbSBcIkBsZWRnZXJocS9sb2dzXCI7XG5pbXBvcnQgeyBUcmFuc3BvcnRPcGVuVXNlckNhbmNlbGxlZCwgRGlzY29ubmVjdGVkRGV2aWNlRHVyaW5nT3BlcmF0aW9uLCBEaXNjb25uZWN0ZWREZXZpY2UsIFRyYW5zcG9ydEVycm9yLCB9IGZyb20gXCJAbGVkZ2VyaHEvZXJyb3JzXCI7XG52YXIgbGVkZ2VyRGV2aWNlcyA9IFtcbiAgICB7XG4gICAgICAgIHZlbmRvcklkOiBsZWRnZXJVU0JWZW5kb3JJZFxuICAgIH0sXG5dO1xudmFyIGlzU3VwcG9ydGVkID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoISEod2luZG93Lm5hdmlnYXRvciAmJiB3aW5kb3cubmF2aWdhdG9yLmhpZCkpO1xufTtcbnZhciBnZXRISUQgPSBmdW5jdGlvbiAoKSB7XG4gICAgLy8gJEZsb3dGaXhNZVxuICAgIHZhciBoaWQgPSBuYXZpZ2F0b3IuaGlkO1xuICAgIGlmICghaGlkKVxuICAgICAgICB0aHJvdyBuZXcgVHJhbnNwb3J0RXJyb3IoXCJuYXZpZ2F0b3IuaGlkIGlzIG5vdCBzdXBwb3J0ZWRcIiwgXCJISUROb3RTdXBwb3J0ZWRcIik7XG4gICAgcmV0dXJuIGhpZDtcbn07XG5mdW5jdGlvbiByZXF1ZXN0TGVkZ2VyRGV2aWNlcygpIHtcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBkZXZpY2U7XG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIGdldEhJRCgpLnJlcXVlc3REZXZpY2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyczogbGVkZ2VyRGV2aWNlc1xuICAgICAgICAgICAgICAgICAgICB9KV07XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBkZXZpY2UgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGRldmljZSkpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgZGV2aWNlXTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIFtkZXZpY2VdXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBnZXRMZWRnZXJEZXZpY2VzKCkge1xuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGRldmljZXM7XG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIGdldEhJRCgpLmdldERldmljZXMoKV07XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBkZXZpY2VzID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgZGV2aWNlcy5maWx0ZXIoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQudmVuZG9ySWQgPT09IGxlZGdlclVTQlZlbmRvcklkOyB9KV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gZ2V0Rmlyc3RMZWRnZXJEZXZpY2UoKSB7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZXhpc3RpbmdEZXZpY2VzLCBkZXZpY2VzO1xuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCBnZXRMZWRnZXJEZXZpY2VzKCldO1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmdEZXZpY2VzID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXhpc3RpbmdEZXZpY2VzLmxlbmd0aCA+IDApXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgZXhpc3RpbmdEZXZpY2VzWzBdXTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgcmVxdWVzdExlZGdlckRldmljZXMoKV07XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBkZXZpY2VzID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgZGV2aWNlc1swXV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuLyoqXG4gKiBXZWJISUQgVHJhbnNwb3J0IGltcGxlbWVudGF0aW9uXG4gKiBAZXhhbXBsZVxuICogaW1wb3J0IFRyYW5zcG9ydFdlYkhJRCBmcm9tIFwiQGxlZGdlcmhxL2h3LXRyYW5zcG9ydC13ZWJoaWRcIjtcbiAqIC4uLlxuICogVHJhbnNwb3J0V2ViSElELmNyZWF0ZSgpLnRoZW4odHJhbnNwb3J0ID0+IC4uLilcbiAqL1xudmFyIFRyYW5zcG9ydFdlYkhJRCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoVHJhbnNwb3J0V2ViSElELCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFRyYW5zcG9ydFdlYkhJRChkZXZpY2UpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuY2hhbm5lbCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDB4ZmZmZik7XG4gICAgICAgIF90aGlzLnBhY2tldFNpemUgPSA2NDtcbiAgICAgICAgX3RoaXMuaW5wdXRzID0gW107XG4gICAgICAgIF90aGlzLnJlYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoX3RoaXMuaW5wdXRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoX3RoaXMuaW5wdXRzLnNoaWZ0KCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChzdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuaW5wdXRDYWxsYmFjayA9IHN1Y2Nlc3M7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMub25JbnB1dFJlcG9ydCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICB2YXIgYnVmZmVyID0gQnVmZmVyLmZyb20oZS5kYXRhLmJ1ZmZlcik7XG4gICAgICAgICAgICBpZiAoX3RoaXMuaW5wdXRDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIF90aGlzLmlucHV0Q2FsbGJhY2soYnVmZmVyKTtcbiAgICAgICAgICAgICAgICBfdGhpcy5pbnB1dENhbGxiYWNrID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIF90aGlzLmlucHV0cy5wdXNoKGJ1ZmZlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9kaXNjb25uZWN0RW1pdHRlZCA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5fZW1pdERpc2Nvbm5lY3QgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgaWYgKF90aGlzLl9kaXNjb25uZWN0RW1pdHRlZClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBfdGhpcy5fZGlzY29ubmVjdEVtaXR0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgX3RoaXMuZW1pdChcImRpc2Nvbm5lY3RcIiwgZSk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFeGNoYW5nZSB3aXRoIHRoZSBkZXZpY2UgdXNpbmcgQVBEVSBwcm90b2NvbC5cbiAgICAgICAgICogQHBhcmFtIGFwZHVcbiAgICAgICAgICogQHJldHVybnMgYSBwcm9taXNlIG9mIGFwZHUgcmVzcG9uc2VcbiAgICAgICAgICovXG4gICAgICAgIF90aGlzLmV4Y2hhbmdlID0gZnVuY3Rpb24gKGFwZHUpIHsgcmV0dXJuIF9fYXdhaXRlcihfdGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBiO1xuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5leGNoYW5nZUF0b21pY0ltcGwoZnVuY3Rpb24gKCkgeyByZXR1cm4gX19hd2FpdGVyKF90aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfYSwgY2hhbm5lbCwgcGFja2V0U2l6ZSwgZnJhbWluZywgYmxvY2tzLCBpLCByZXN1bHQsIGFjYywgYnVmZmVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9hID0gdGhpcywgY2hhbm5lbCA9IF9hLmNoYW5uZWwsIHBhY2tldFNpemUgPSBfYS5wYWNrZXRTaXplO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZyhcImFwZHVcIiwgXCI9PiBcIiArIGFwZHUudG9TdHJpbmcoXCJoZXhcIikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyYW1pbmcgPSBoaWRGcmFtaW5nKGNoYW5uZWwsIHBhY2tldFNpemUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJsb2NrcyA9IGZyYW1pbmcubWFrZUJsb2NrcyhhcGR1KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoaSA8IGJsb2Nrcy5sZW5ndGgpKSByZXR1cm4gWzMgLypicmVhayovLCA0XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmRldmljZS5zZW5kUmVwb3J0KDAsIGJsb2Nrc1tpXSldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9iLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghIShyZXN1bHQgPSBmcmFtaW5nLmdldFJlZHVjZWRSZXN1bHQoYWNjKSkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDZdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMucmVhZCgpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWZmZXIgPSBfYi5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjID0gZnJhbWluZy5yZWR1Y2VSZXNwb25zZShhY2MsIGJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nKFwiYXBkdVwiLCBcIjw9IFwiICsgcmVzdWx0LnRvU3RyaW5nKFwiaGV4XCIpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgcmVzdWx0XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7IH0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZSAmJiBlLm1lc3NhZ2UgJiYgZS5tZXNzYWdlLmluY2x1ZGVzKFwid3JpdGVcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2VtaXREaXNjb25uZWN0KGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRGlzY29ubmVjdGVkRGV2aWNlRHVyaW5nT3BlcmF0aW9uKGUubWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGIgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgYl07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pOyB9O1xuICAgICAgICBfdGhpcy5kZXZpY2UgPSBkZXZpY2U7XG4gICAgICAgIF90aGlzLmRldmljZU1vZGVsID1cbiAgICAgICAgICAgIHR5cGVvZiBkZXZpY2UucHJvZHVjdElkID09PSBcIm51bWJlclwiXG4gICAgICAgICAgICAgICAgPyBpZGVudGlmeVVTQlByb2R1Y3RJZChkZXZpY2UucHJvZHVjdElkKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICBkZXZpY2UuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0cmVwb3J0XCIsIF90aGlzLm9uSW5wdXRSZXBvcnQpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNpbWlsYXIgdG8gY3JlYXRlKCkgZXhjZXB0IGl0IHdpbGwgYWx3YXlzIGRpc3BsYXkgdGhlIGRldmljZSBwZXJtaXNzaW9uIChldmVuIGlmIHNvbWUgZGV2aWNlcyBhcmUgYWxyZWFkeSBhY2NlcHRlZCkuXG4gICAgICovXG4gICAgVHJhbnNwb3J0V2ViSElELnJlcXVlc3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfYSwgZGV2aWNlO1xuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2IubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCByZXF1ZXN0TGVkZ2VyRGV2aWNlcygpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2EgPSBfX3JlYWQuYXBwbHkodm9pZCAwLCBbX2Iuc2VudCgpLCAxXSksIGRldmljZSA9IF9hWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIFRyYW5zcG9ydFdlYkhJRC5vcGVuKGRldmljZSldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNpbWlsYXIgdG8gY3JlYXRlKCkgZXhjZXB0IGl0IHdpbGwgbmV2ZXIgZGlzcGxheSB0aGUgZGV2aWNlIHBlcm1pc3Npb24gKGl0IHJldHVybnMgYSBQcm9taXNlPD9UcmFuc3BvcnQ+LCBudWxsIGlmIGl0IGZhaWxzIHRvIGZpbmQgYSBkZXZpY2UpLlxuICAgICAqL1xuICAgIFRyYW5zcG9ydFdlYkhJRC5vcGVuQ29ubmVjdGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgZGV2aWNlcztcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgZ2V0TGVkZ2VyRGV2aWNlcygpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgZGV2aWNlcyA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZXZpY2VzLmxlbmd0aCA9PT0gMClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgbnVsbF07XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgVHJhbnNwb3J0V2ViSElELm9wZW4oZGV2aWNlc1swXSldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIExlZGdlciB0cmFuc3BvcnQgd2l0aCBhIEhJRERldmljZVxuICAgICAqL1xuICAgIFRyYW5zcG9ydFdlYkhJRC5vcGVuID0gZnVuY3Rpb24gKGRldmljZSkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgdHJhbnNwb3J0LCBvbkRpc2Nvbm5lY3Q7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIGRldmljZS5vcGVuKCldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc3BvcnQgPSBuZXcgVHJhbnNwb3J0V2ViSElEKGRldmljZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBvbkRpc2Nvbm5lY3QgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZXZpY2UgPT09IGUuZGV2aWNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldEhJRCgpLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJkaXNjb25uZWN0XCIsIG9uRGlzY29ubmVjdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zcG9ydC5fZW1pdERpc2Nvbm5lY3QobmV3IERpc2Nvbm5lY3RlZERldmljZSgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0SElEKCkuYWRkRXZlbnRMaXN0ZW5lcihcImRpc2Nvbm5lY3RcIiwgb25EaXNjb25uZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCB0cmFuc3BvcnRdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJlbGVhc2UgdGhlIHRyYW5zcG9ydCBkZXZpY2VcbiAgICAgKi9cbiAgICBUcmFuc3BvcnRXZWJISUQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuZXhjaGFuZ2VCdXN5UHJvbWlzZV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGV2aWNlLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJpbnB1dHJlcG9ydFwiLCB0aGlzLm9uSW5wdXRSZXBvcnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5kZXZpY2UuY2xvc2UoKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBUcmFuc3BvcnRXZWJISUQucHJvdG90eXBlLnNldFNjcmFtYmxlS2V5ID0gZnVuY3Rpb24gKCkgeyB9O1xuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIFdlYlVTQiB0cmFuc3BvcnQgaXMgc3VwcG9ydGVkLlxuICAgICAqL1xuICAgIFRyYW5zcG9ydFdlYkhJRC5pc1N1cHBvcnRlZCA9IGlzU3VwcG9ydGVkO1xuICAgIC8qKlxuICAgICAqIExpc3QgdGhlIFdlYlVTQiBkZXZpY2VzIHRoYXQgd2FzIHByZXZpb3VzbHkgYXV0aG9yaXplZCBieSB0aGUgdXNlci5cbiAgICAgKi9cbiAgICBUcmFuc3BvcnRXZWJISUQubGlzdCA9IGdldExlZGdlckRldmljZXM7XG4gICAgLyoqXG4gICAgICogQWN0aXZlbHkgbGlzdGVuIHRvIFdlYlVTQiBkZXZpY2VzIGFuZCBlbWl0IE9ORSBkZXZpY2VcbiAgICAgKiB0aGF0IHdhcyBlaXRoZXIgYWNjZXB0ZWQgYmVmb3JlLCBpZiBub3QgaXQgd2lsbCB0cmlnZ2VyIHRoZSBuYXRpdmUgcGVybWlzc2lvbiBVSS5cbiAgICAgKlxuICAgICAqIEltcG9ydGFudDogaXQgbXVzdCBiZSBjYWxsZWQgaW4gdGhlIGNvbnRleHQgb2YgYSBVSSBjbGljayFcbiAgICAgKi9cbiAgICBUcmFuc3BvcnRXZWJISUQubGlzdGVuID0gZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICAgIHZhciB1bnN1YnNjcmliZWQgPSBmYWxzZTtcbiAgICAgICAgZ2V0Rmlyc3RMZWRnZXJEZXZpY2UoKS50aGVuKGZ1bmN0aW9uIChkZXZpY2UpIHtcbiAgICAgICAgICAgIGlmICghZGV2aWNlKSB7XG4gICAgICAgICAgICAgICAgb2JzZXJ2ZXIuZXJyb3IobmV3IFRyYW5zcG9ydE9wZW5Vc2VyQ2FuY2VsbGVkKFwiQWNjZXNzIGRlbmllZCB0byB1c2UgTGVkZ2VyIGRldmljZVwiKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICghdW5zdWJzY3JpYmVkKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRldmljZU1vZGVsID0gdHlwZW9mIGRldmljZS5wcm9kdWN0SWQgPT09IFwibnVtYmVyXCJcbiAgICAgICAgICAgICAgICAgICAgPyBpZGVudGlmeVVTQlByb2R1Y3RJZChkZXZpY2UucHJvZHVjdElkKVxuICAgICAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBvYnNlcnZlci5uZXh0KHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhZGRcIixcbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRvcjogZGV2aWNlLFxuICAgICAgICAgICAgICAgICAgICBkZXZpY2VNb2RlbDogZGV2aWNlTW9kZWxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgIG9ic2VydmVyLmVycm9yKG5ldyBUcmFuc3BvcnRPcGVuVXNlckNhbmNlbGxlZChlcnJvci5tZXNzYWdlKSk7XG4gICAgICAgIH0pO1xuICAgICAgICBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHtcbiAgICAgICAgICAgIHVuc3Vic2NyaWJlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHVuc3Vic2NyaWJlOiB1bnN1YnNjcmliZVxuICAgICAgICB9O1xuICAgIH07XG4gICAgcmV0dXJuIFRyYW5zcG9ydFdlYkhJRDtcbn0oVHJhbnNwb3J0KSk7XG5leHBvcnQgZGVmYXVsdCBUcmFuc3BvcnRXZWJISUQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1UcmFuc3BvcnRXZWJISUQuanMubWFwIl0sIm5hbWVzIjpbIl9fZXh0ZW5kcyIsImV4dGVuZFN0YXRpY3MiLCJkIiwiYiIsIk9iamVjdCIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiQXJyYXkiLCJwIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiVHlwZUVycm9yIiwiU3RyaW5nIiwiX18iLCJjb25zdHJ1Y3RvciIsImNyZWF0ZSIsIl9fYXdhaXRlciIsInRoaXNBcmciLCJfYXJndW1lbnRzIiwiUCIsImdlbmVyYXRvciIsImFkb3B0IiwidmFsdWUiLCJyZXNvbHZlIiwiUHJvbWlzZSIsInJlamVjdCIsImZ1bGZpbGxlZCIsInN0ZXAiLCJuZXh0IiwiZSIsInJlamVjdGVkIiwicmVzdWx0IiwiZG9uZSIsInRoZW4iLCJhcHBseSIsIl9fZ2VuZXJhdG9yIiwiYm9keSIsIl8iLCJsYWJlbCIsInNlbnQiLCJ0IiwidHJ5cyIsIm9wcyIsImYiLCJ5IiwiZyIsInZlcmIiLCJTeW1ib2wiLCJpdGVyYXRvciIsIm4iLCJ2Iiwib3AiLCJwb3AiLCJsZW5ndGgiLCJwdXNoIiwiX19yZWFkIiwibyIsIm0iLCJpIiwiciIsImFyIiwiZXJyb3IiLCJUcmFuc3BvcnQiLCJoaWRGcmFtaW5nIiwiaWRlbnRpZnlVU0JQcm9kdWN0SWQiLCJsZWRnZXJVU0JWZW5kb3JJZCIsImxvZyIsIlRyYW5zcG9ydE9wZW5Vc2VyQ2FuY2VsbGVkIiwiRGlzY29ubmVjdGVkRGV2aWNlRHVyaW5nT3BlcmF0aW9uIiwiRGlzY29ubmVjdGVkRGV2aWNlIiwiVHJhbnNwb3J0RXJyb3IiLCJsZWRnZXJEZXZpY2VzIiwidmVuZG9ySWQiLCJpc1N1cHBvcnRlZCIsIndpbmRvdyIsIm5hdmlnYXRvciIsImhpZCIsImdldEhJRCIsInJlcXVlc3RMZWRnZXJEZXZpY2VzIiwiZGV2aWNlIiwiX2EiLCJyZXF1ZXN0RGV2aWNlIiwiZmlsdGVycyIsImlzQXJyYXkiLCJnZXRMZWRnZXJEZXZpY2VzIiwiZGV2aWNlcyIsImdldERldmljZXMiLCJmaWx0ZXIiLCJnZXRGaXJzdExlZGdlckRldmljZSIsImV4aXN0aW5nRGV2aWNlcyIsIlRyYW5zcG9ydFdlYkhJRCIsIl9zdXBlciIsIl90aGlzIiwiY2hhbm5lbCIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsInBhY2tldFNpemUiLCJpbnB1dHMiLCJyZWFkIiwic2hpZnQiLCJzdWNjZXNzIiwiaW5wdXRDYWxsYmFjayIsIm9uSW5wdXRSZXBvcnQiLCJidWZmZXIiLCJCdWZmZXIiLCJmcm9tIiwiZGF0YSIsIl9kaXNjb25uZWN0RW1pdHRlZCIsIl9lbWl0RGlzY29ubmVjdCIsImVtaXQiLCJleGNoYW5nZSIsImFwZHUiLCJleGNoYW5nZUF0b21pY0ltcGwiLCJmcmFtaW5nIiwiYmxvY2tzIiwiYWNjIiwiX2IiLCJ0b1N0cmluZyIsIm1ha2VCbG9ja3MiLCJzZW5kUmVwb3J0IiwiZ2V0UmVkdWNlZFJlc3VsdCIsInJlZHVjZVJlc3BvbnNlIiwibWVzc2FnZSIsImluY2x1ZGVzIiwiZGV2aWNlTW9kZWwiLCJwcm9kdWN0SWQiLCJ1bmRlZmluZWQiLCJhZGRFdmVudExpc3RlbmVyIiwicmVxdWVzdCIsIm9wZW4iLCJvcGVuQ29ubmVjdGVkIiwidHJhbnNwb3J0Iiwib25EaXNjb25uZWN0IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImNsb3NlIiwiZXhjaGFuZ2VCdXN5UHJvbWlzZSIsInNldFNjcmFtYmxlS2V5IiwibGlzdCIsImxpc3RlbiIsIm9ic2VydmVyIiwidW5zdWJzY3JpYmVkIiwidHlwZSIsImRlc2NyaXB0b3IiLCJjb21wbGV0ZSIsInVuc3Vic2NyaWJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@ledgerhq/hw-transport-webhid/lib-es/TransportWebHID.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@ledgerhq/hw-transport-webhid/node_modules/@ledgerhq/hw-transport/lib-es/Transport.js":
/*!*************************************************************************************************************!*\
  !*** ../node_modules/@ledgerhq/hw-transport-webhid/node_modules/@ledgerhq/hw-transport/lib-es/Transport.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StatusCodes: () => (/* reexport safe */ _ledgerhq_errors__WEBPACK_IMPORTED_MODULE_1__.StatusCodes),\n/* harmony export */   TransportError: () => (/* reexport safe */ _ledgerhq_errors__WEBPACK_IMPORTED_MODULE_1__.TransportError),\n/* harmony export */   TransportStatusError: () => (/* reexport safe */ _ledgerhq_errors__WEBPACK_IMPORTED_MODULE_1__.TransportStatusError),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   getAltStatusMessage: () => (/* reexport safe */ _ledgerhq_errors__WEBPACK_IMPORTED_MODULE_1__.getAltStatusMessage)\n/* harmony export */ });\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ledgerhq_errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ledgerhq/errors */ \"(ssr)/../node_modules/@ledgerhq/errors/lib-es/index.js\");\n/* harmony import */ var _ledgerhq_logs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ledgerhq/logs */ \"(ssr)/../node_modules/@ledgerhq/logs/lib-es/index.js\");\nvar __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\n\nconst DEFAULT_LOG_TYPE = \"transport\";\n/**\n * The Transport class defines a generic interface for communicating with a Ledger hardware wallet.\n * There are different kind of transports based on the technology (channels like U2F, HID, Bluetooth, Webusb) and environment (Node, Web,...).\n * It is an abstract class that needs to be implemented.\n */ class Transport {\n    constructor({ context, logType } = {}){\n        this.exchangeTimeout = 30000;\n        this.unresponsiveTimeout = 15000;\n        this.deviceModel = null;\n        this._events = new (events__WEBPACK_IMPORTED_MODULE_0___default())();\n        /**\n         * Send data to the device using the higher level API.\n         *\n         * @param {number} cla - The instruction class for the command.\n         * @param {number} ins - The instruction code for the command.\n         * @param {number} p1 - The first parameter for the instruction.\n         * @param {number} p2 - The second parameter for the instruction.\n         * @param {Buffer} data - The data to be sent. Defaults to an empty buffer.\n         * @param {Array<number>} statusList - A list of acceptable status codes for the response. Defaults to [StatusCodes.OK].\n         * @param {Object} options - Contains optional options for the exchange function\n         *  - abortTimeoutMs: stop the send after a given timeout. Another timeout exists\n         *    to detect unresponsive device (see `unresponsiveTimeout`). This timeout aborts the exchange.\n         * @returns {Promise<Buffer>} A promise that resolves with the response data from the device.\n         */ this.send = (cla, ins, p1, p2, data = Buffer.alloc(0), statusList = [\n            _ledgerhq_errors__WEBPACK_IMPORTED_MODULE_1__.StatusCodes.OK\n        ], { abortTimeoutMs } = {})=>__awaiter(this, void 0, void 0, function*() {\n                const tracer = this.tracer.withUpdatedContext({\n                    function: \"send\"\n                });\n                if (data.length >= 256) {\n                    tracer.trace(\"data.length exceeded 256 bytes limit\", {\n                        dataLength: data.length\n                    });\n                    throw new _ledgerhq_errors__WEBPACK_IMPORTED_MODULE_1__.TransportError(\"data.length exceed 256 bytes limit. Got: \" + data.length, \"DataLengthTooBig\");\n                }\n                tracer.trace(\"Starting an exchange\", {\n                    abortTimeoutMs\n                });\n                const response = yield this.exchange(// The size of the data is added in 1 byte just before `data`\n                Buffer.concat([\n                    Buffer.from([\n                        cla,\n                        ins,\n                        p1,\n                        p2\n                    ]),\n                    Buffer.from([\n                        data.length\n                    ]),\n                    data\n                ]), {\n                    abortTimeoutMs\n                });\n                tracer.trace(\"Received response from exchange\");\n                const sw = response.readUInt16BE(response.length - 2);\n                if (!statusList.some((s)=>s === sw)) {\n                    throw new _ledgerhq_errors__WEBPACK_IMPORTED_MODULE_1__.TransportStatusError(sw);\n                }\n                return response;\n            });\n        this._appAPIlock = null;\n        this.tracer = new _ledgerhq_logs__WEBPACK_IMPORTED_MODULE_2__.LocalTracer(logType !== null && logType !== void 0 ? logType : DEFAULT_LOG_TYPE, context);\n    }\n    /**\n     * Send data to the device using a low level API.\n     * It's recommended to use the \"send\" method for a higher level API.\n     * @param {Buffer} apdu - The data to send.\n     * @param {Object} options - Contains optional options for the exchange function\n     *  - abortTimeoutMs: stop the exchange after a given timeout. Another timeout exists\n     *    to detect unresponsive device (see `unresponsiveTimeout`). This timeout aborts the exchange.\n     * @returns {Promise<Buffer>} A promise that resolves with the response data from the device.\n     */ exchange(_apdu, { abortTimeoutMs: _abortTimeoutMs } = {}) {\n        throw new Error(\"exchange not implemented\");\n    }\n    /**\n     * Send apdus in batch to the device using a low level API.\n     * The default implementation is to call exchange for each apdu.\n     * @param {Array<Buffer>} apdus - array of apdus to send.\n     * @param {Observer<Buffer>} observer - an observer that will receive the response of each apdu.\n     * @returns {Subscription} A Subscription object on which you can call \".unsubscribe()\" to stop sending apdus.\n     */ exchangeBulk(apdus, observer) {\n        let unsubscribed = false;\n        const unsubscribe = ()=>{\n            unsubscribed = true;\n        };\n        const main = ()=>__awaiter(this, void 0, void 0, function*() {\n                if (unsubscribed) return;\n                for (const apdu of apdus){\n                    const r = yield this.exchange(apdu);\n                    if (unsubscribed) return;\n                    const status = r.readUInt16BE(r.length - 2);\n                    if (status !== _ledgerhq_errors__WEBPACK_IMPORTED_MODULE_1__.StatusCodes.OK) {\n                        throw new _ledgerhq_errors__WEBPACK_IMPORTED_MODULE_1__.TransportStatusError(status);\n                    }\n                    observer.next(r);\n                }\n            });\n        main().then(()=>!unsubscribed && observer.complete(), (e)=>!unsubscribed && observer.error(e));\n        return {\n            unsubscribe\n        };\n    }\n    /**\n     * Set the \"scramble key\" for the next data exchanges with the device.\n     * Each app can have a different scramble key and it is set internally during instantiation.\n     * @param {string} key - The scramble key to set.\n     * deprecated This method is no longer needed for modern transports and should be migrated away from.\n     * no @ before deprecated as it breaks documentationjs on version 14.0.2\n     * https://github.com/documentationjs/documentation/issues/1596\n     */ setScrambleKey(_key) {}\n    /**\n     * Close the connection with the device.\n     *\n     * Note: for certain transports (hw-transport-node-hid-singleton for ex), once the promise resolved,\n     * the transport instance is actually still cached, and the device is disconnected only after a defined timeout.\n     * But for the consumer of the Transport, this does not matter and it can consider the transport to be closed.\n     *\n     * @returns {Promise<void>} A promise that resolves when the transport is closed.\n     */ close() {\n        return Promise.resolve();\n    }\n    /**\n     * Listen for an event on the transport instance.\n     * Transport implementations may have specific events. Common events include:\n     * \"disconnect\" : triggered when the transport is disconnected.\n     * @param {string} eventName - The name of the event to listen for.\n     * @param {(...args: Array<any>) => any} cb - The callback function to be invoked when the event occurs.\n     */ on(eventName, cb) {\n        this._events.on(eventName, cb);\n    }\n    /**\n     * Stop listening to an event on an instance of transport.\n     */ off(eventName, cb) {\n        this._events.removeListener(eventName, cb);\n    }\n    emit(event, ...args) {\n        this._events.emit(event, ...args);\n    }\n    /**\n     * Enable or not logs of the binary exchange\n     */ setDebugMode() {\n        console.warn(\"setDebugMode is deprecated. use @ledgerhq/logs instead. No logs are emitted in this anymore.\");\n    }\n    /**\n     * Set a timeout (in milliseconds) for the exchange call. Only some transport might implement it. (e.g. U2F)\n     */ setExchangeTimeout(exchangeTimeout) {\n        this.exchangeTimeout = exchangeTimeout;\n    }\n    /**\n     * Define the delay before emitting \"unresponsive\" on an exchange that does not respond\n     */ setExchangeUnresponsiveTimeout(unresponsiveTimeout) {\n        this.unresponsiveTimeout = unresponsiveTimeout;\n    }\n    /**\n     * create() allows to open the first descriptor available or\n     * throw if there is none or if timeout is reached.\n     * This is a light helper, alternative to using listen() and open() (that you may need for any more advanced usecase)\n     * @example\n    TransportFoo.create().then(transport => ...)\n     */ static create(openTimeout = 3000, listenTimeout) {\n        return new Promise((resolve, reject)=>{\n            let found = false;\n            const sub = this.listen({\n                next: (e)=>{\n                    found = true;\n                    if (sub) sub.unsubscribe();\n                    if (listenTimeoutId) clearTimeout(listenTimeoutId);\n                    this.open(e.descriptor, openTimeout).then(resolve, reject);\n                },\n                error: (e)=>{\n                    if (listenTimeoutId) clearTimeout(listenTimeoutId);\n                    reject(e);\n                },\n                complete: ()=>{\n                    if (listenTimeoutId) clearTimeout(listenTimeoutId);\n                    if (!found) {\n                        reject(new _ledgerhq_errors__WEBPACK_IMPORTED_MODULE_1__.TransportError(this.ErrorMessage_NoDeviceFound, \"NoDeviceFound\"));\n                    }\n                }\n            });\n            const listenTimeoutId = listenTimeout ? setTimeout(()=>{\n                sub.unsubscribe();\n                reject(new _ledgerhq_errors__WEBPACK_IMPORTED_MODULE_1__.TransportError(this.ErrorMessage_ListenTimeout, \"ListenTimeout\"));\n            }, listenTimeout) : null;\n        });\n    }\n    /**\n     * Wrapper to make an exchange \"atomic\" (blocking any other exchange)\n     *\n     * It also handles \"unresponsiveness\" by emitting \"unresponsive\" and \"responsive\" events.\n     *\n     * @param f The exchange job, using the transport to run\n     * @returns a Promise resolving with the output of the given job\n     */ exchangeAtomicImpl(f) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const tracer = this.tracer.withUpdatedContext({\n                function: \"exchangeAtomicImpl\",\n                unresponsiveTimeout: this.unresponsiveTimeout\n            });\n            if (this.exchangeBusyPromise) {\n                tracer.trace(\"Atomic exchange is already busy\");\n                throw new _ledgerhq_errors__WEBPACK_IMPORTED_MODULE_1__.TransportPendingOperation(\"An action was already pending on the Ledger device. Please deny or reconnect.\");\n            }\n            // Sets the atomic guard\n            let resolveBusy;\n            const busyPromise = new Promise((r)=>{\n                resolveBusy = r;\n            });\n            this.exchangeBusyPromise = busyPromise;\n            // The device unresponsiveness handler\n            let unresponsiveReached = false;\n            const timeout = setTimeout(()=>{\n                tracer.trace(`Timeout reached, emitting Transport event \"unresponsive\"`, {\n                    unresponsiveTimeout: this.unresponsiveTimeout\n                });\n                unresponsiveReached = true;\n                this.emit(\"unresponsive\");\n            }, this.unresponsiveTimeout);\n            try {\n                const res = yield f();\n                if (unresponsiveReached) {\n                    tracer.trace(\"Device was unresponsive, emitting responsive\");\n                    this.emit(\"responsive\");\n                }\n                return res;\n            } finally{\n                tracer.trace(\"Finalize, clearing busy guard\");\n                clearTimeout(timeout);\n                if (resolveBusy) resolveBusy();\n                this.exchangeBusyPromise = null;\n            }\n        });\n    }\n    decorateAppAPIMethods(self, methods, scrambleKey) {\n        for (const methodName of methods){\n            self[methodName] = this.decorateAppAPIMethod(methodName, self[methodName], self, scrambleKey);\n        }\n    }\n    decorateAppAPIMethod(methodName, f, ctx, scrambleKey) {\n        return (...args)=>__awaiter(this, void 0, void 0, function*() {\n                const { _appAPIlock } = this;\n                if (_appAPIlock) {\n                    return Promise.reject(new _ledgerhq_errors__WEBPACK_IMPORTED_MODULE_1__.TransportError(\"Ledger Device is busy (lock \" + _appAPIlock + \")\", \"TransportLocked\"));\n                }\n                try {\n                    this._appAPIlock = methodName;\n                    this.setScrambleKey(scrambleKey);\n                    return yield f.apply(ctx, args);\n                } finally{\n                    this._appAPIlock = null;\n                }\n            });\n    }\n    /**\n     * Sets the context used by the logging/tracing mechanism\n     *\n     * Useful when re-using (cached) the same Transport instance,\n     * but with a new tracing context.\n     *\n     * @param context A TraceContext, that can undefined to reset the context\n     */ setTraceContext(context) {\n        this.tracer = this.tracer.withContext(context);\n    }\n    /**\n     * Updates the context used by the logging/tracing mechanism\n     *\n     * The update only overrides the key-value that are already defined in the current context.\n     *\n     * @param contextToAdd A TraceContext that will be added to the current context\n     */ updateTraceContext(contextToAdd) {\n        this.tracer.updateContext(contextToAdd);\n    }\n    /**\n     * Gets the tracing context of the transport instance\n     */ getTraceContext() {\n        return this.tracer.getContext();\n    }\n}\nTransport.ErrorMessage_ListenTimeout = \"No Ledger device found (timeout)\";\nTransport.ErrorMessage_NoDeviceFound = \"No Ledger device found\";\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Transport); //# sourceMappingURL=Transport.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@ledgerhq/hw-transport-webhid/node_modules/@ledgerhq/hw-transport/lib-es/Transport.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@ledgerhq/hw-transport/lib-es/Transport.js":
/*!******************************************************************!*\
  !*** ../node_modules/@ledgerhq/hw-transport/lib-es/Transport.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StatusCodes: () => (/* reexport safe */ _ledgerhq_errors__WEBPACK_IMPORTED_MODULE_1__.StatusCodes),\n/* harmony export */   TransportError: () => (/* reexport safe */ _ledgerhq_errors__WEBPACK_IMPORTED_MODULE_1__.TransportError),\n/* harmony export */   TransportStatusError: () => (/* reexport safe */ _ledgerhq_errors__WEBPACK_IMPORTED_MODULE_1__.TransportStatusError),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   getAltStatusMessage: () => (/* reexport safe */ _ledgerhq_errors__WEBPACK_IMPORTED_MODULE_1__.getAltStatusMessage)\n/* harmony export */ });\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ledgerhq_errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ledgerhq/errors */ \"(ssr)/../node_modules/@ledgerhq/errors/lib-es/index.js\");\nvar __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = undefined && undefined.__generator || function(thisArg, body) {\n    var _ = {\n        label: 0,\n        sent: function() {\n            if (t[0] & 1) throw t[1];\n            return t[1];\n        },\n        trys: [],\n        ops: []\n    }, f, y, t, g;\n    return g = {\n        next: verb(0),\n        \"throw\": verb(1),\n        \"return\": verb(2)\n    }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() {\n        return this;\n    }), g;\n    function verb(n) {\n        return function(v) {\n            return step([\n                n,\n                v\n            ]);\n        };\n    }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while(_)try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [\n                op[0] & 2,\n                t.value\n            ];\n            switch(op[0]){\n                case 0:\n                case 1:\n                    t = op;\n                    break;\n                case 4:\n                    _.label++;\n                    return {\n                        value: op[1],\n                        done: false\n                    };\n                case 5:\n                    _.label++;\n                    y = op[1];\n                    op = [\n                        0\n                    ];\n                    continue;\n                case 7:\n                    op = _.ops.pop();\n                    _.trys.pop();\n                    continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                        _ = 0;\n                        continue;\n                    }\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                        _.label = op[1];\n                        break;\n                    }\n                    if (op[0] === 6 && _.label < t[1]) {\n                        _.label = t[1];\n                        t = op;\n                        break;\n                    }\n                    if (t && _.label < t[2]) {\n                        _.label = t[2];\n                        _.ops.push(op);\n                        break;\n                    }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop();\n                    continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) {\n            op = [\n                6,\n                e\n            ];\n            y = 0;\n        } finally{\n            f = t = 0;\n        }\n        if (op[0] & 5) throw op[1];\n        return {\n            value: op[0] ? op[1] : void 0,\n            done: true\n        };\n    }\n};\nvar __read = undefined && undefined.__read || function(o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);\n    } catch (error) {\n        e = {\n            error: error\n        };\n    } finally{\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        } finally{\n            if (e) throw e.error;\n        }\n    }\n    return ar;\n};\nvar __spreadArray = undefined && undefined.__spreadArray || function(to, from, pack) {\n    if (pack || arguments.length === 2) for(var i = 0, l = from.length, ar; i < l; i++){\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nvar __values = undefined && undefined.__values || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function() {\n            if (o && i >= o.length) o = void 0;\n            return {\n                value: o && o[i++],\n                done: !o\n            };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\n\n\n/**\n * Transport defines the generic interface to share between node/u2f impl\n * A **Descriptor** is a parametric type that is up to be determined for the implementation.\n * it can be for instance an ID, an file path, a URL,...\n */ var Transport = /** @class */ function() {\n    function Transport() {\n        var _this = this;\n        this.exchangeTimeout = 30000;\n        this.unresponsiveTimeout = 15000;\n        this.deviceModel = null;\n        this._events = new (events__WEBPACK_IMPORTED_MODULE_0___default())();\n        /**\n         * wrapper on top of exchange to simplify work of the implementation.\n         * @param cla\n         * @param ins\n         * @param p1\n         * @param p2\n         * @param data\n         * @param statusList is a list of accepted status code (shorts). [0x9000] by default\n         * @return a Promise of response buffer\n         */ this.send = function(cla, ins, p1, p2, data, statusList) {\n            if (data === void 0) {\n                data = Buffer.alloc(0);\n            }\n            if (statusList === void 0) {\n                statusList = [\n                    _ledgerhq_errors__WEBPACK_IMPORTED_MODULE_1__.StatusCodes.OK\n                ];\n            }\n            return __awaiter(_this, void 0, void 0, function() {\n                var response, sw;\n                return __generator(this, function(_a) {\n                    switch(_a.label){\n                        case 0:\n                            if (data.length >= 256) {\n                                throw new _ledgerhq_errors__WEBPACK_IMPORTED_MODULE_1__.TransportError(\"data.length exceed 256 bytes limit. Got: \" + data.length, \"DataLengthTooBig\");\n                            }\n                            return [\n                                4 /*yield*/ ,\n                                this.exchange(Buffer.concat([\n                                    Buffer.from([\n                                        cla,\n                                        ins,\n                                        p1,\n                                        p2\n                                    ]),\n                                    Buffer.from([\n                                        data.length\n                                    ]),\n                                    data\n                                ]))\n                            ];\n                        case 1:\n                            response = _a.sent();\n                            sw = response.readUInt16BE(response.length - 2);\n                            if (!statusList.some(function(s) {\n                                return s === sw;\n                            })) {\n                                throw new _ledgerhq_errors__WEBPACK_IMPORTED_MODULE_1__.TransportStatusError(sw);\n                            }\n                            return [\n                                2 /*return*/ ,\n                                response\n                            ];\n                    }\n                });\n            });\n        };\n        this.exchangeAtomicImpl = function(f) {\n            return __awaiter(_this, void 0, void 0, function() {\n                var resolveBusy, busyPromise, unresponsiveReached, timeout, res;\n                var _this = this;\n                return __generator(this, function(_a) {\n                    switch(_a.label){\n                        case 0:\n                            if (this.exchangeBusyPromise) {\n                                throw new _ledgerhq_errors__WEBPACK_IMPORTED_MODULE_1__.TransportRaceCondition(\"An action was already pending on the Ledger device. Please deny or reconnect.\");\n                            }\n                            busyPromise = new Promise(function(r) {\n                                resolveBusy = r;\n                            });\n                            this.exchangeBusyPromise = busyPromise;\n                            unresponsiveReached = false;\n                            timeout = setTimeout(function() {\n                                unresponsiveReached = true;\n                                _this.emit(\"unresponsive\");\n                            }, this.unresponsiveTimeout);\n                            _a.label = 1;\n                        case 1:\n                            _a.trys.push([\n                                1,\n                                ,\n                                3,\n                                4\n                            ]);\n                            return [\n                                4 /*yield*/ ,\n                                f()\n                            ];\n                        case 2:\n                            res = _a.sent();\n                            if (unresponsiveReached) {\n                                this.emit(\"responsive\");\n                            }\n                            return [\n                                2 /*return*/ ,\n                                res\n                            ];\n                        case 3:\n                            clearTimeout(timeout);\n                            if (resolveBusy) resolveBusy();\n                            this.exchangeBusyPromise = null;\n                            return [\n                                7 /*endfinally*/ \n                            ];\n                        case 4:\n                            return [\n                                2 /*return*/ \n                            ];\n                    }\n                });\n            });\n        };\n        this._appAPIlock = null;\n    }\n    /**\n     * low level api to communicate with the device\n     * This method is for implementations to implement but should not be directly called.\n     * Instead, the recommanded way is to use send() method\n     * @param apdu the data to send\n     * @return a Promise of response data\n     */ Transport.prototype.exchange = function(_apdu) {\n        throw new Error(\"exchange not implemented\");\n    };\n    /**\n     * set the \"scramble key\" for the next exchanges with the device.\n     * Each App can have a different scramble key and they internally will set it at instanciation.\n     * @param key the scramble key\n     */ Transport.prototype.setScrambleKey = function(_key) {};\n    /**\n     * close the exchange with the device.\n     * @return a Promise that ends when the transport is closed.\n     */ Transport.prototype.close = function() {\n        return Promise.resolve();\n    };\n    /**\n     * Listen to an event on an instance of transport.\n     * Transport implementation can have specific events. Here is the common events:\n     * * `\"disconnect\"` : triggered if Transport is disconnected\n     */ Transport.prototype.on = function(eventName, cb) {\n        this._events.on(eventName, cb);\n    };\n    /**\n     * Stop listening to an event on an instance of transport.\n     */ Transport.prototype.off = function(eventName, cb) {\n        this._events.removeListener(eventName, cb);\n    };\n    Transport.prototype.emit = function(event) {\n        var _a;\n        var args = [];\n        for(var _i = 1; _i < arguments.length; _i++){\n            args[_i - 1] = arguments[_i];\n        }\n        (_a = this._events).emit.apply(_a, __spreadArray([\n            event\n        ], __read(args), false));\n    };\n    /**\n     * Enable or not logs of the binary exchange\n     */ Transport.prototype.setDebugMode = function() {\n        console.warn(\"setDebugMode is deprecated. use @ledgerhq/logs instead. No logs are emitted in this anymore.\");\n    };\n    /**\n     * Set a timeout (in milliseconds) for the exchange call. Only some transport might implement it. (e.g. U2F)\n     */ Transport.prototype.setExchangeTimeout = function(exchangeTimeout) {\n        this.exchangeTimeout = exchangeTimeout;\n    };\n    /**\n     * Define the delay before emitting \"unresponsive\" on an exchange that does not respond\n     */ Transport.prototype.setExchangeUnresponsiveTimeout = function(unresponsiveTimeout) {\n        this.unresponsiveTimeout = unresponsiveTimeout;\n    };\n    /**\n     * create() allows to open the first descriptor available or\n     * throw if there is none or if timeout is reached.\n     * This is a light helper, alternative to using listen() and open() (that you may need for any more advanced usecase)\n     * @example\n    TransportFoo.create().then(transport => ...)\n     */ Transport.create = function(openTimeout, listenTimeout) {\n        var _this = this;\n        if (openTimeout === void 0) {\n            openTimeout = 3000;\n        }\n        return new Promise(function(resolve, reject) {\n            var found = false;\n            var sub = _this.listen({\n                next: function(e) {\n                    found = true;\n                    if (sub) sub.unsubscribe();\n                    if (listenTimeoutId) clearTimeout(listenTimeoutId);\n                    _this.open(e.descriptor, openTimeout).then(resolve, reject);\n                },\n                error: function(e) {\n                    if (listenTimeoutId) clearTimeout(listenTimeoutId);\n                    reject(e);\n                },\n                complete: function() {\n                    if (listenTimeoutId) clearTimeout(listenTimeoutId);\n                    if (!found) {\n                        reject(new _ledgerhq_errors__WEBPACK_IMPORTED_MODULE_1__.TransportError(_this.ErrorMessage_NoDeviceFound, \"NoDeviceFound\"));\n                    }\n                }\n            });\n            var listenTimeoutId = listenTimeout ? setTimeout(function() {\n                sub.unsubscribe();\n                reject(new _ledgerhq_errors__WEBPACK_IMPORTED_MODULE_1__.TransportError(_this.ErrorMessage_ListenTimeout, \"ListenTimeout\"));\n            }, listenTimeout) : null;\n        });\n    };\n    Transport.prototype.decorateAppAPIMethods = function(self, methods, scrambleKey) {\n        var e_1, _a;\n        try {\n            for(var methods_1 = __values(methods), methods_1_1 = methods_1.next(); !methods_1_1.done; methods_1_1 = methods_1.next()){\n                var methodName = methods_1_1.value;\n                self[methodName] = this.decorateAppAPIMethod(methodName, self[methodName], self, scrambleKey);\n            }\n        } catch (e_1_1) {\n            e_1 = {\n                error: e_1_1\n            };\n        } finally{\n            try {\n                if (methods_1_1 && !methods_1_1.done && (_a = methods_1[\"return\"])) _a.call(methods_1);\n            } finally{\n                if (e_1) throw e_1.error;\n            }\n        }\n    };\n    Transport.prototype.decorateAppAPIMethod = function(methodName, f, ctx, scrambleKey) {\n        var _this = this;\n        return function() {\n            var args = [];\n            for(var _i = 0; _i < arguments.length; _i++){\n                args[_i] = arguments[_i];\n            }\n            return __awaiter(_this, void 0, void 0, function() {\n                var _appAPIlock;\n                return __generator(this, function(_a) {\n                    switch(_a.label){\n                        case 0:\n                            _appAPIlock = this._appAPIlock;\n                            if (_appAPIlock) {\n                                return [\n                                    2 /*return*/ ,\n                                    Promise.reject(new _ledgerhq_errors__WEBPACK_IMPORTED_MODULE_1__.TransportError(\"Ledger Device is busy (lock \" + _appAPIlock + \")\", \"TransportLocked\"))\n                                ];\n                            }\n                            _a.label = 1;\n                        case 1:\n                            _a.trys.push([\n                                1,\n                                ,\n                                3,\n                                4\n                            ]);\n                            this._appAPIlock = methodName;\n                            this.setScrambleKey(scrambleKey);\n                            return [\n                                4 /*yield*/ ,\n                                f.apply(ctx, args)\n                            ];\n                        case 2:\n                            return [\n                                2 /*return*/ ,\n                                _a.sent()\n                            ];\n                        case 3:\n                            this._appAPIlock = null;\n                            return [\n                                7 /*endfinally*/ \n                            ];\n                        case 4:\n                            return [\n                                2 /*return*/ \n                            ];\n                    }\n                });\n            });\n        };\n    };\n    Transport.ErrorMessage_ListenTimeout = \"No Ledger device found (timeout)\";\n    Transport.ErrorMessage_NoDeviceFound = \"No Ledger device found\";\n    return Transport;\n}();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Transport); //# sourceMappingURL=Transport.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0BsZWRnZXJocS9ody10cmFuc3BvcnQvbGliLWVzL1RyYW5zcG9ydC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBLElBQUlBLFlBQVksU0FBSyxJQUFJLFNBQUksQ0FBQ0EsU0FBUyxJQUFLLFNBQVVDLE9BQU8sRUFBRUMsVUFBVSxFQUFFQyxDQUFDLEVBQUVDLFNBQVM7SUFDbkYsU0FBU0MsTUFBTUMsS0FBSztRQUFJLE9BQU9BLGlCQUFpQkgsSUFBSUcsUUFBUSxJQUFJSCxFQUFFLFNBQVVJLE9BQU87WUFBSUEsUUFBUUQ7UUFBUTtJQUFJO0lBQzNHLE9BQU8sSUFBS0gsQ0FBQUEsS0FBTUEsQ0FBQUEsSUFBSUssT0FBTSxDQUFDLEVBQUcsU0FBVUQsT0FBTyxFQUFFRSxNQUFNO1FBQ3JELFNBQVNDLFVBQVVKLEtBQUs7WUFBSSxJQUFJO2dCQUFFSyxLQUFLUCxVQUFVUSxJQUFJLENBQUNOO1lBQVMsRUFBRSxPQUFPTyxHQUFHO2dCQUFFSixPQUFPSTtZQUFJO1FBQUU7UUFDMUYsU0FBU0MsU0FBU1IsS0FBSztZQUFJLElBQUk7Z0JBQUVLLEtBQUtQLFNBQVMsQ0FBQyxRQUFRLENBQUNFO1lBQVMsRUFBRSxPQUFPTyxHQUFHO2dCQUFFSixPQUFPSTtZQUFJO1FBQUU7UUFDN0YsU0FBU0YsS0FBS0ksTUFBTTtZQUFJQSxPQUFPQyxJQUFJLEdBQUdULFFBQVFRLE9BQU9ULEtBQUssSUFBSUQsTUFBTVUsT0FBT1QsS0FBSyxFQUFFVyxJQUFJLENBQUNQLFdBQVdJO1FBQVc7UUFDN0dILEtBQUssQ0FBQ1AsWUFBWUEsVUFBVWMsS0FBSyxDQUFDakIsU0FBU0MsY0FBYyxFQUFFLEdBQUdVLElBQUk7SUFDdEU7QUFDSjtBQUNBLElBQUlPLGNBQWMsU0FBSyxJQUFJLFNBQUksQ0FBQ0EsV0FBVyxJQUFLLFNBQVVsQixPQUFPLEVBQUVtQixJQUFJO0lBQ25FLElBQUlDLElBQUk7UUFBRUMsT0FBTztRQUFHQyxNQUFNO1lB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UTtnQ0FBSTFCLEdBQUc3RCxJQUFJOzZCQUFHO3dCQUN4QyxLQUFLOzRCQUNELElBQUksQ0FBQzJFLFdBQVcsR0FBRzs0QkFDbkIsT0FBTztnQ0FBQyxFQUFFLFlBQVk7NkJBQUc7d0JBQzdCLEtBQUs7NEJBQUcsT0FBTztnQ0FBQyxFQUFFLFFBQVE7NkJBQUc7b0JBQ2pDO2dCQUNKO1lBQ0o7UUFDSjtJQUNKO0lBQ0FoQyxVQUFVK0QsMEJBQTBCLEdBQUc7SUFDdkMvRCxVQUFVOEQsMEJBQTBCLEdBQUc7SUFDdkMsT0FBTzlEO0FBQ1g7QUFDQSxpRUFBZUEsU0FBU0EsRUFBQyxDQUN6QixxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BsZWRnZXJocS9ody10cmFuc3BvcnQvbGliLWVzL1RyYW5zcG9ydC5qcz84YWQ1Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xudmFyIF9fZ2VuZXJhdG9yID0gKHRoaXMgJiYgdGhpcy5fX2dlbmVyYXRvcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIGJvZHkpIHtcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xuICAgIH1cbn07XG52YXIgX19yZWFkID0gKHRoaXMgJiYgdGhpcy5fX3JlYWQpIHx8IGZ1bmN0aW9uIChvLCBuKSB7XG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xuICAgIGlmICghbSkgcmV0dXJuIG87XG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XG4gICAgdHJ5IHtcbiAgICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxuICAgIGZpbmFsbHkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XG4gICAgfVxuICAgIHJldHVybiBhcjtcbn07XG52YXIgX19zcHJlYWRBcnJheSA9ICh0aGlzICYmIHRoaXMuX19zcHJlYWRBcnJheSkgfHwgZnVuY3Rpb24gKHRvLCBmcm9tLCBwYWNrKSB7XG4gICAgaWYgKHBhY2sgfHwgYXJndW1lbnRzLmxlbmd0aCA9PT0gMikgZm9yICh2YXIgaSA9IDAsIGwgPSBmcm9tLmxlbmd0aCwgYXI7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgaWYgKGFyIHx8ICEoaSBpbiBmcm9tKSkge1xuICAgICAgICAgICAgaWYgKCFhcikgYXIgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tLCAwLCBpKTtcbiAgICAgICAgICAgIGFyW2ldID0gZnJvbVtpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdG8uY29uY2F0KGFyIHx8IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20pKTtcbn07XG52YXIgX192YWx1ZXMgPSAodGhpcyAmJiB0aGlzLl9fdmFsdWVzKSB8fCBmdW5jdGlvbihvKSB7XG4gICAgdmFyIHMgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgU3ltYm9sLml0ZXJhdG9yLCBtID0gcyAmJiBvW3NdLCBpID0gMDtcbiAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvKTtcbiAgICBpZiAobyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHJldHVybiB7XG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChvICYmIGkgPj0gby5sZW5ndGgpIG8gPSB2b2lkIDA7XG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocyA/IFwiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIiA6IFwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcbn07XG5pbXBvcnQgRXZlbnRFbWl0dGVyIGZyb20gXCJldmVudHNcIjtcbmltcG9ydCB7IFRyYW5zcG9ydFJhY2VDb25kaXRpb24sIFRyYW5zcG9ydEVycm9yLCBTdGF0dXNDb2RlcywgZ2V0QWx0U3RhdHVzTWVzc2FnZSwgVHJhbnNwb3J0U3RhdHVzRXJyb3IsIH0gZnJvbSBcIkBsZWRnZXJocS9lcnJvcnNcIjtcbmV4cG9ydCB7IFRyYW5zcG9ydEVycm9yLCBUcmFuc3BvcnRTdGF0dXNFcnJvciwgU3RhdHVzQ29kZXMsIGdldEFsdFN0YXR1c01lc3NhZ2UsIH07XG4vKipcbiAqIFRyYW5zcG9ydCBkZWZpbmVzIHRoZSBnZW5lcmljIGludGVyZmFjZSB0byBzaGFyZSBiZXR3ZWVuIG5vZGUvdTJmIGltcGxcbiAqIEEgKipEZXNjcmlwdG9yKiogaXMgYSBwYXJhbWV0cmljIHR5cGUgdGhhdCBpcyB1cCB0byBiZSBkZXRlcm1pbmVkIGZvciB0aGUgaW1wbGVtZW50YXRpb24uXG4gKiBpdCBjYW4gYmUgZm9yIGluc3RhbmNlIGFuIElELCBhbiBmaWxlIHBhdGgsIGEgVVJMLC4uLlxuICovXG52YXIgVHJhbnNwb3J0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFRyYW5zcG9ydCgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5leGNoYW5nZVRpbWVvdXQgPSAzMDAwMDtcbiAgICAgICAgdGhpcy51bnJlc3BvbnNpdmVUaW1lb3V0ID0gMTUwMDA7XG4gICAgICAgIHRoaXMuZGV2aWNlTW9kZWwgPSBudWxsO1xuICAgICAgICB0aGlzLl9ldmVudHMgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiB3cmFwcGVyIG9uIHRvcCBvZiBleGNoYW5nZSB0byBzaW1wbGlmeSB3b3JrIG9mIHRoZSBpbXBsZW1lbnRhdGlvbi5cbiAgICAgICAgICogQHBhcmFtIGNsYVxuICAgICAgICAgKiBAcGFyYW0gaW5zXG4gICAgICAgICAqIEBwYXJhbSBwMVxuICAgICAgICAgKiBAcGFyYW0gcDJcbiAgICAgICAgICogQHBhcmFtIGRhdGFcbiAgICAgICAgICogQHBhcmFtIHN0YXR1c0xpc3QgaXMgYSBsaXN0IG9mIGFjY2VwdGVkIHN0YXR1cyBjb2RlIChzaG9ydHMpLiBbMHg5MDAwXSBieSBkZWZhdWx0XG4gICAgICAgICAqIEByZXR1cm4gYSBQcm9taXNlIG9mIHJlc3BvbnNlIGJ1ZmZlclxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zZW5kID0gZnVuY3Rpb24gKGNsYSwgaW5zLCBwMSwgcDIsIGRhdGEsIHN0YXR1c0xpc3QpIHtcbiAgICAgICAgICAgIGlmIChkYXRhID09PSB2b2lkIDApIHsgZGF0YSA9IEJ1ZmZlci5hbGxvYygwKTsgfVxuICAgICAgICAgICAgaWYgKHN0YXR1c0xpc3QgPT09IHZvaWQgMCkgeyBzdGF0dXNMaXN0ID0gW1N0YXR1c0NvZGVzLk9LXTsgfVxuICAgICAgICAgICAgcmV0dXJuIF9fYXdhaXRlcihfdGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVzcG9uc2UsIHN3O1xuICAgICAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLmxlbmd0aCA+PSAyNTYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFRyYW5zcG9ydEVycm9yKFwiZGF0YS5sZW5ndGggZXhjZWVkIDI1NiBieXRlcyBsaW1pdC4gR290OiBcIiArIGRhdGEubGVuZ3RoLCBcIkRhdGFMZW5ndGhUb29CaWdcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuZXhjaGFuZ2UoQnVmZmVyLmNvbmNhdChbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBCdWZmZXIuZnJvbShbY2xhLCBpbnMsIHAxLCBwMl0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQnVmZmVyLmZyb20oW2RhdGEubGVuZ3RoXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSldO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3ID0gcmVzcG9uc2UucmVhZFVJbnQxNkJFKHJlc3BvbnNlLmxlbmd0aCAtIDIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc3RhdHVzTGlzdC5zb21lKGZ1bmN0aW9uIChzKSB7IHJldHVybiBzID09PSBzdzsgfSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFRyYW5zcG9ydFN0YXR1c0Vycm9yKHN3KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHJlc3BvbnNlXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZXhjaGFuZ2VBdG9taWNJbXBsID0gZnVuY3Rpb24gKGYpIHsgcmV0dXJuIF9fYXdhaXRlcihfdGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciByZXNvbHZlQnVzeSwgYnVzeVByb21pc2UsIHVucmVzcG9uc2l2ZVJlYWNoZWQsIHRpbWVvdXQsIHJlcztcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5leGNoYW5nZUJ1c3lQcm9taXNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFRyYW5zcG9ydFJhY2VDb25kaXRpb24oXCJBbiBhY3Rpb24gd2FzIGFscmVhZHkgcGVuZGluZyBvbiB0aGUgTGVkZ2VyIGRldmljZS4gUGxlYXNlIGRlbnkgb3IgcmVjb25uZWN0LlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1c3lQcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlQnVzeSA9IHI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZXhjaGFuZ2VCdXN5UHJvbWlzZSA9IGJ1c3lQcm9taXNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdW5yZXNwb25zaXZlUmVhY2hlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVucmVzcG9uc2l2ZVJlYWNoZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmVtaXQoXCJ1bnJlc3BvbnNpdmVcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCB0aGlzLnVucmVzcG9uc2l2ZVRpbWVvdXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAxO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS50cnlzLnB1c2goWzEsICwgMywgNF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgZigpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHVucmVzcG9uc2l2ZVJlYWNoZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoXCJyZXNwb25zaXZlXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHJlc107XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNvbHZlQnVzeSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlQnVzeSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5leGNoYW5nZUJ1c3lQcm9taXNlID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNyAvKmVuZGZpbmFsbHkqL107XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTsgfTtcbiAgICAgICAgdGhpcy5fYXBwQVBJbG9jayA9IG51bGw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIGxvdyBsZXZlbCBhcGkgdG8gY29tbXVuaWNhdGUgd2l0aCB0aGUgZGV2aWNlXG4gICAgICogVGhpcyBtZXRob2QgaXMgZm9yIGltcGxlbWVudGF0aW9ucyB0byBpbXBsZW1lbnQgYnV0IHNob3VsZCBub3QgYmUgZGlyZWN0bHkgY2FsbGVkLlxuICAgICAqIEluc3RlYWQsIHRoZSByZWNvbW1hbmRlZCB3YXkgaXMgdG8gdXNlIHNlbmQoKSBtZXRob2RcbiAgICAgKiBAcGFyYW0gYXBkdSB0aGUgZGF0YSB0byBzZW5kXG4gICAgICogQHJldHVybiBhIFByb21pc2Ugb2YgcmVzcG9uc2UgZGF0YVxuICAgICAqL1xuICAgIFRyYW5zcG9ydC5wcm90b3R5cGUuZXhjaGFuZ2UgPSBmdW5jdGlvbiAoX2FwZHUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZXhjaGFuZ2Ugbm90IGltcGxlbWVudGVkXCIpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogc2V0IHRoZSBcInNjcmFtYmxlIGtleVwiIGZvciB0aGUgbmV4dCBleGNoYW5nZXMgd2l0aCB0aGUgZGV2aWNlLlxuICAgICAqIEVhY2ggQXBwIGNhbiBoYXZlIGEgZGlmZmVyZW50IHNjcmFtYmxlIGtleSBhbmQgdGhleSBpbnRlcm5hbGx5IHdpbGwgc2V0IGl0IGF0IGluc3RhbmNpYXRpb24uXG4gICAgICogQHBhcmFtIGtleSB0aGUgc2NyYW1ibGUga2V5XG4gICAgICovXG4gICAgVHJhbnNwb3J0LnByb3RvdHlwZS5zZXRTY3JhbWJsZUtleSA9IGZ1bmN0aW9uIChfa2V5KSB7IH07XG4gICAgLyoqXG4gICAgICogY2xvc2UgdGhlIGV4Y2hhbmdlIHdpdGggdGhlIGRldmljZS5cbiAgICAgKiBAcmV0dXJuIGEgUHJvbWlzZSB0aGF0IGVuZHMgd2hlbiB0aGUgdHJhbnNwb3J0IGlzIGNsb3NlZC5cbiAgICAgKi9cbiAgICBUcmFuc3BvcnQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBMaXN0ZW4gdG8gYW4gZXZlbnQgb24gYW4gaW5zdGFuY2Ugb2YgdHJhbnNwb3J0LlxuICAgICAqIFRyYW5zcG9ydCBpbXBsZW1lbnRhdGlvbiBjYW4gaGF2ZSBzcGVjaWZpYyBldmVudHMuIEhlcmUgaXMgdGhlIGNvbW1vbiBldmVudHM6XG4gICAgICogKiBgXCJkaXNjb25uZWN0XCJgIDogdHJpZ2dlcmVkIGlmIFRyYW5zcG9ydCBpcyBkaXNjb25uZWN0ZWRcbiAgICAgKi9cbiAgICBUcmFuc3BvcnQucHJvdG90eXBlLm9uID0gZnVuY3Rpb24gKGV2ZW50TmFtZSwgY2IpIHtcbiAgICAgICAgdGhpcy5fZXZlbnRzLm9uKGV2ZW50TmFtZSwgY2IpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogU3RvcCBsaXN0ZW5pbmcgdG8gYW4gZXZlbnQgb24gYW4gaW5zdGFuY2Ugb2YgdHJhbnNwb3J0LlxuICAgICAqL1xuICAgIFRyYW5zcG9ydC5wcm90b3R5cGUub2ZmID0gZnVuY3Rpb24gKGV2ZW50TmFtZSwgY2IpIHtcbiAgICAgICAgdGhpcy5fZXZlbnRzLnJlbW92ZUxpc3RlbmVyKGV2ZW50TmFtZSwgY2IpO1xuICAgIH07XG4gICAgVHJhbnNwb3J0LnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2kgLSAxXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgKF9hID0gdGhpcy5fZXZlbnRzKS5lbWl0LmFwcGx5KF9hLCBfX3NwcmVhZEFycmF5KFtldmVudF0sIF9fcmVhZChhcmdzKSwgZmFsc2UpKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEVuYWJsZSBvciBub3QgbG9ncyBvZiB0aGUgYmluYXJ5IGV4Y2hhbmdlXG4gICAgICovXG4gICAgVHJhbnNwb3J0LnByb3RvdHlwZS5zZXREZWJ1Z01vZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcInNldERlYnVnTW9kZSBpcyBkZXByZWNhdGVkLiB1c2UgQGxlZGdlcmhxL2xvZ3MgaW5zdGVhZC4gTm8gbG9ncyBhcmUgZW1pdHRlZCBpbiB0aGlzIGFueW1vcmUuXCIpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogU2V0IGEgdGltZW91dCAoaW4gbWlsbGlzZWNvbmRzKSBmb3IgdGhlIGV4Y2hhbmdlIGNhbGwuIE9ubHkgc29tZSB0cmFuc3BvcnQgbWlnaHQgaW1wbGVtZW50IGl0LiAoZS5nLiBVMkYpXG4gICAgICovXG4gICAgVHJhbnNwb3J0LnByb3RvdHlwZS5zZXRFeGNoYW5nZVRpbWVvdXQgPSBmdW5jdGlvbiAoZXhjaGFuZ2VUaW1lb3V0KSB7XG4gICAgICAgIHRoaXMuZXhjaGFuZ2VUaW1lb3V0ID0gZXhjaGFuZ2VUaW1lb3V0O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogRGVmaW5lIHRoZSBkZWxheSBiZWZvcmUgZW1pdHRpbmcgXCJ1bnJlc3BvbnNpdmVcIiBvbiBhbiBleGNoYW5nZSB0aGF0IGRvZXMgbm90IHJlc3BvbmRcbiAgICAgKi9cbiAgICBUcmFuc3BvcnQucHJvdG90eXBlLnNldEV4Y2hhbmdlVW5yZXNwb25zaXZlVGltZW91dCA9IGZ1bmN0aW9uICh1bnJlc3BvbnNpdmVUaW1lb3V0KSB7XG4gICAgICAgIHRoaXMudW5yZXNwb25zaXZlVGltZW91dCA9IHVucmVzcG9uc2l2ZVRpbWVvdXQ7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBjcmVhdGUoKSBhbGxvd3MgdG8gb3BlbiB0aGUgZmlyc3QgZGVzY3JpcHRvciBhdmFpbGFibGUgb3JcbiAgICAgKiB0aHJvdyBpZiB0aGVyZSBpcyBub25lIG9yIGlmIHRpbWVvdXQgaXMgcmVhY2hlZC5cbiAgICAgKiBUaGlzIGlzIGEgbGlnaHQgaGVscGVyLCBhbHRlcm5hdGl2ZSB0byB1c2luZyBsaXN0ZW4oKSBhbmQgb3BlbigpICh0aGF0IHlvdSBtYXkgbmVlZCBmb3IgYW55IG1vcmUgYWR2YW5jZWQgdXNlY2FzZSlcbiAgICAgKiBAZXhhbXBsZVxuICAgIFRyYW5zcG9ydEZvby5jcmVhdGUoKS50aGVuKHRyYW5zcG9ydCA9PiAuLi4pXG4gICAgICovXG4gICAgVHJhbnNwb3J0LmNyZWF0ZSA9IGZ1bmN0aW9uIChvcGVuVGltZW91dCwgbGlzdGVuVGltZW91dCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAob3BlblRpbWVvdXQgPT09IHZvaWQgMCkgeyBvcGVuVGltZW91dCA9IDMwMDA7IH1cbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIHZhciBmb3VuZCA9IGZhbHNlO1xuICAgICAgICAgICAgdmFyIHN1YiA9IF90aGlzLmxpc3Rlbih7XG4gICAgICAgICAgICAgICAgbmV4dDogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZm91bmQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3ViKVxuICAgICAgICAgICAgICAgICAgICAgICAgc3ViLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChsaXN0ZW5UaW1lb3V0SWQpXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQobGlzdGVuVGltZW91dElkKTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMub3BlbihlLmRlc2NyaXB0b3IsIG9wZW5UaW1lb3V0KS50aGVuKHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxpc3RlblRpbWVvdXRJZClcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChsaXN0ZW5UaW1lb3V0SWQpO1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjb21wbGV0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAobGlzdGVuVGltZW91dElkKVxuICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGxpc3RlblRpbWVvdXRJZCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghZm91bmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChuZXcgVHJhbnNwb3J0RXJyb3IoX3RoaXMuRXJyb3JNZXNzYWdlX05vRGV2aWNlRm91bmQsIFwiTm9EZXZpY2VGb3VuZFwiKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHZhciBsaXN0ZW5UaW1lb3V0SWQgPSBsaXN0ZW5UaW1lb3V0XG4gICAgICAgICAgICAgICAgPyBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgc3ViLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChuZXcgVHJhbnNwb3J0RXJyb3IoX3RoaXMuRXJyb3JNZXNzYWdlX0xpc3RlblRpbWVvdXQsIFwiTGlzdGVuVGltZW91dFwiKSk7XG4gICAgICAgICAgICAgICAgfSwgbGlzdGVuVGltZW91dClcbiAgICAgICAgICAgICAgICA6IG51bGw7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgVHJhbnNwb3J0LnByb3RvdHlwZS5kZWNvcmF0ZUFwcEFQSU1ldGhvZHMgPSBmdW5jdGlvbiAoc2VsZiwgbWV0aG9kcywgc2NyYW1ibGVLZXkpIHtcbiAgICAgICAgdmFyIGVfMSwgX2E7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBmb3IgKHZhciBtZXRob2RzXzEgPSBfX3ZhbHVlcyhtZXRob2RzKSwgbWV0aG9kc18xXzEgPSBtZXRob2RzXzEubmV4dCgpOyAhbWV0aG9kc18xXzEuZG9uZTsgbWV0aG9kc18xXzEgPSBtZXRob2RzXzEubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgdmFyIG1ldGhvZE5hbWUgPSBtZXRob2RzXzFfMS52YWx1ZTtcbiAgICAgICAgICAgICAgICBzZWxmW21ldGhvZE5hbWVdID0gdGhpcy5kZWNvcmF0ZUFwcEFQSU1ldGhvZChtZXRob2ROYW1lLCBzZWxmW21ldGhvZE5hbWVdLCBzZWxmLCBzY3JhbWJsZUtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVfMV8xKSB7IGVfMSA9IHsgZXJyb3I6IGVfMV8xIH07IH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmIChtZXRob2RzXzFfMSAmJiAhbWV0aG9kc18xXzEuZG9uZSAmJiAoX2EgPSBtZXRob2RzXzFbXCJyZXR1cm5cIl0pKSBfYS5jYWxsKG1ldGhvZHNfMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMSkgdGhyb3cgZV8xLmVycm9yOyB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRyYW5zcG9ydC5wcm90b3R5cGUuZGVjb3JhdGVBcHBBUElNZXRob2QgPSBmdW5jdGlvbiAobWV0aG9kTmFtZSwgZiwgY3R4LCBzY3JhbWJsZUtleSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIF9fYXdhaXRlcihfdGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2FwcEFQSWxvY2s7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2FwcEFQSWxvY2sgPSB0aGlzLl9hcHBBUElsb2NrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfYXBwQVBJbG9jaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgUHJvbWlzZS5yZWplY3QobmV3IFRyYW5zcG9ydEVycm9yKFwiTGVkZ2VyIERldmljZSBpcyBidXN5IChsb2NrIFwiICsgX2FwcEFQSWxvY2sgKyBcIilcIiwgXCJUcmFuc3BvcnRMb2NrZWRcIikpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9hLnRyeXMucHVzaChbMSwgLCAzLCA0XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYXBwQVBJbG9jayA9IG1ldGhvZE5hbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTY3JhbWJsZUtleShzY3JhbWJsZUtleSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgZi5hcHBseShjdHgsIGFyZ3MpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjogcmV0dXJuIFsyIC8qcmV0dXJuKi8sIF9hLnNlbnQoKV07XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYXBwQVBJbG9jayA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs3IC8qZW5kZmluYWxseSovXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIFRyYW5zcG9ydC5FcnJvck1lc3NhZ2VfTGlzdGVuVGltZW91dCA9IFwiTm8gTGVkZ2VyIGRldmljZSBmb3VuZCAodGltZW91dClcIjtcbiAgICBUcmFuc3BvcnQuRXJyb3JNZXNzYWdlX05vRGV2aWNlRm91bmQgPSBcIk5vIExlZGdlciBkZXZpY2UgZm91bmRcIjtcbiAgICByZXR1cm4gVHJhbnNwb3J0O1xufSgpKTtcbmV4cG9ydCBkZWZhdWx0IFRyYW5zcG9ydDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVRyYW5zcG9ydC5qcy5tYXAiXSwibmFtZXMiOlsiX19hd2FpdGVyIiwidGhpc0FyZyIsIl9hcmd1bWVudHMiLCJQIiwiZ2VuZXJhdG9yIiwiYWRvcHQiLCJ2YWx1ZSIsInJlc29sdmUiLCJQcm9taXNlIiwicmVqZWN0IiwiZnVsZmlsbGVkIiwic3RlcCIsIm5leHQiLCJlIiwicmVqZWN0ZWQiLCJyZXN1bHQiLCJkb25lIiwidGhlbiIsImFwcGx5IiwiX19nZW5lcmF0b3IiLCJib2R5IiwiXyIsImxhYmVsIiwic2VudCIsInQiLCJ0cnlzIiwib3BzIiwiZiIsInkiLCJnIiwidmVyYiIsIlN5bWJvbCIsIml0ZXJhdG9yIiwibiIsInYiLCJvcCIsIlR5cGVFcnJvciIsImNhbGwiLCJwb3AiLCJsZW5ndGgiLCJwdXNoIiwiX19yZWFkIiwibyIsIm0iLCJpIiwiciIsImFyIiwiZXJyb3IiLCJfX3NwcmVhZEFycmF5IiwidG8iLCJmcm9tIiwicGFjayIsImFyZ3VtZW50cyIsImwiLCJBcnJheSIsInByb3RvdHlwZSIsInNsaWNlIiwiY29uY2F0IiwiX192YWx1ZXMiLCJzIiwiRXZlbnRFbWl0dGVyIiwiVHJhbnNwb3J0UmFjZUNvbmRpdGlvbiIsIlRyYW5zcG9ydEVycm9yIiwiU3RhdHVzQ29kZXMiLCJnZXRBbHRTdGF0dXNNZXNzYWdlIiwiVHJhbnNwb3J0U3RhdHVzRXJyb3IiLCJUcmFuc3BvcnQiLCJfdGhpcyIsImV4Y2hhbmdlVGltZW91dCIsInVucmVzcG9uc2l2ZVRpbWVvdXQiLCJkZXZpY2VNb2RlbCIsIl9ldmVudHMiLCJzZW5kIiwiY2xhIiwiaW5zIiwicDEiLCJwMiIsImRhdGEiLCJzdGF0dXNMaXN0IiwiQnVmZmVyIiwiYWxsb2MiLCJPSyIsInJlc3BvbnNlIiwic3ciLCJfYSIsImV4Y2hhbmdlIiwicmVhZFVJbnQxNkJFIiwic29tZSIsImV4Y2hhbmdlQXRvbWljSW1wbCIsInJlc29sdmVCdXN5IiwiYnVzeVByb21pc2UiLCJ1bnJlc3BvbnNpdmVSZWFjaGVkIiwidGltZW91dCIsInJlcyIsImV4Y2hhbmdlQnVzeVByb21pc2UiLCJzZXRUaW1lb3V0IiwiZW1pdCIsImNsZWFyVGltZW91dCIsIl9hcHBBUElsb2NrIiwiX2FwZHUiLCJFcnJvciIsInNldFNjcmFtYmxlS2V5IiwiX2tleSIsImNsb3NlIiwib24iLCJldmVudE5hbWUiLCJjYiIsIm9mZiIsInJlbW92ZUxpc3RlbmVyIiwiZXZlbnQiLCJhcmdzIiwiX2kiLCJzZXREZWJ1Z01vZGUiLCJjb25zb2xlIiwid2FybiIsInNldEV4Y2hhbmdlVGltZW91dCIsInNldEV4Y2hhbmdlVW5yZXNwb25zaXZlVGltZW91dCIsImNyZWF0ZSIsIm9wZW5UaW1lb3V0IiwibGlzdGVuVGltZW91dCIsImZvdW5kIiwic3ViIiwibGlzdGVuIiwidW5zdWJzY3JpYmUiLCJsaXN0ZW5UaW1lb3V0SWQiLCJvcGVuIiwiZGVzY3JpcHRvciIsImNvbXBsZXRlIiwiRXJyb3JNZXNzYWdlX05vRGV2aWNlRm91bmQiLCJFcnJvck1lc3NhZ2VfTGlzdGVuVGltZW91dCIsImRlY29yYXRlQXBwQVBJTWV0aG9kcyIsInNlbGYiLCJtZXRob2RzIiwic2NyYW1ibGVLZXkiLCJlXzEiLCJtZXRob2RzXzEiLCJtZXRob2RzXzFfMSIsIm1ldGhvZE5hbWUiLCJkZWNvcmF0ZUFwcEFQSU1ldGhvZCIsImVfMV8xIiwiY3R4Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@ledgerhq/hw-transport/lib-es/Transport.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@ledgerhq/logs/lib-es/index.js":
/*!******************************************************!*\
  !*** ../node_modules/@ledgerhq/logs/lib-es/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LocalTracer: () => (/* binding */ LocalTracer),\n/* harmony export */   listen: () => (/* binding */ listen),\n/* harmony export */   log: () => (/* binding */ log),\n/* harmony export */   trace: () => (/* binding */ trace)\n/* harmony export */ });\nlet id = 0;\nconst subscribers = [];\n/**\n * Logs something\n *\n * @param type a namespaced identifier of the log (it is not a level like \"debug\", \"error\" but more like \"apdu-in\", \"apdu-out\", etc...)\n * @param message a clear message of the log associated to the type\n */ const log = (type, message, data)=>{\n    const obj = {\n        type,\n        id: String(++id),\n        date: new Date()\n    };\n    if (message) obj.message = message;\n    if (data) obj.data = data;\n    dispatch(obj);\n};\n/**\n * A simple tracer function, only expanding the existing log function\n *\n * Its goal is to capture more context than a log function.\n * This is simple for now, but can be improved later.\n *\n * @param context Anything representing the context where the log occurred\n */ const trace = ({ type, message, data, context })=>{\n    const obj = {\n        type,\n        id: String(++id),\n        date: new Date()\n    };\n    if (message) obj.message = message;\n    if (data) obj.data = data;\n    if (context) obj.context = context;\n    dispatch(obj);\n};\n/**\n * A simple tracer class, that can be used to avoid repetition when using the `trace` function\n *\n * Its goal is to capture more context than a log function.\n * This is simple for now, but can be improved later.\n *\n * @param type A given type (not level) for the current local tracer (\"hw\", \"withDevice\", etc.)\n * @param context Anything representing the context where the log occurred\n */ class LocalTracer {\n    constructor(type, context){\n        this.type = type;\n        this.context = context;\n    }\n    trace(message, data) {\n        trace({\n            type: this.type,\n            message,\n            data,\n            context: this.context\n        });\n    }\n    getContext() {\n        return this.context;\n    }\n    setContext(context) {\n        this.context = context;\n    }\n    updateContext(contextToAdd) {\n        this.context = Object.assign(Object.assign({}, this.context), contextToAdd);\n    }\n    getType() {\n        return this.type;\n    }\n    setType(type) {\n        this.type = type;\n    }\n    /**\n     * Create a new instance of the LocalTracer with an updated `type`\n     *\n     * It does not mutate the calling instance, but returns a new LocalTracer,\n     * following a simple builder pattern.\n     */ withType(type) {\n        return new LocalTracer(type, this.context);\n    }\n    /**\n     * Create a new instance of the LocalTracer with a new `context`\n     *\n     * It does not mutate the calling instance, but returns a new LocalTracer,\n     * following a simple builder pattern.\n     *\n     * @param context A TraceContext, that can undefined to reset the context\n     */ withContext(context) {\n        return new LocalTracer(this.type, context);\n    }\n    /**\n     * Create a new instance of the LocalTracer with an updated `context`,\n     * on which an additional context is merged with the existing one.\n     *\n     * It does not mutate the calling instance, but returns a new LocalTracer,\n     * following a simple builder pattern.\n     */ withUpdatedContext(contextToAdd) {\n        return new LocalTracer(this.type, Object.assign(Object.assign({}, this.context), contextToAdd));\n    }\n}\n/**\n * Adds a subscribers to the emitted logs.\n *\n * @param cb that is called for each future log() with the Log object\n * @return a function that can be called to unsubscribe the listener\n */ const listen = (cb)=>{\n    subscribers.push(cb);\n    return ()=>{\n        const i = subscribers.indexOf(cb);\n        if (i !== -1) {\n            // equivalent of subscribers.splice(i, 1) // https://twitter.com/Rich_Harris/status/1125850391155965952\n            subscribers[i] = subscribers[subscribers.length - 1];\n            subscribers.pop();\n        }\n    };\n};\nfunction dispatch(log) {\n    for(let i = 0; i < subscribers.length; i++){\n        try {\n            subscribers[i](log);\n        } catch (e) {\n            console.error(e);\n        }\n    }\n}\nif (false) {} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@ledgerhq/logs/lib-es/index.js\n");

/***/ })

};
;