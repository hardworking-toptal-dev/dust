"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/thread-stream";
exports.ids = ["vendor-chunks/thread-stream"];
exports.modules = {

/***/ "(ssr)/../node_modules/thread-stream/index.js":
/*!**********************************************!*\
  !*** ../node_modules/thread-stream/index.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { EventEmitter } = __webpack_require__(/*! events */ \"events\");\nconst { Worker } = __webpack_require__(/*! worker_threads */ \"worker_threads\");\nconst { join } = __webpack_require__(/*! path */ \"path\");\nconst { pathToFileURL } = __webpack_require__(/*! url */ \"url\");\nconst { wait } = __webpack_require__(/*! ./lib/wait */ \"(ssr)/../node_modules/thread-stream/lib/wait.js\");\nconst { WRITE_INDEX, READ_INDEX } = __webpack_require__(/*! ./lib/indexes */ \"(ssr)/../node_modules/thread-stream/lib/indexes.js\");\nconst buffer = __webpack_require__(/*! buffer */ \"buffer\");\nconst assert = __webpack_require__(/*! assert */ \"assert\");\nconst kImpl = Symbol(\"kImpl\");\n// V8 limit for string size\nconst MAX_STRING = buffer.constants.MAX_STRING_LENGTH;\nclass FakeWeakRef {\n    constructor(value){\n        this._value = value;\n    }\n    deref() {\n        return this._value;\n    }\n}\nconst FinalizationRegistry = global.FinalizationRegistry || class FakeFinalizationRegistry {\n    register() {}\n    unregister() {}\n};\nconst WeakRef = global.WeakRef || FakeWeakRef;\nconst registry = new FinalizationRegistry((worker)=>{\n    if (worker.exited) {\n        return;\n    }\n    worker.terminate();\n});\nfunction createWorker(stream, opts) {\n    const { filename, workerData } = opts;\n    const bundlerOverrides = \"__bundlerPathsOverrides\" in globalThis ? globalThis.__bundlerPathsOverrides : {};\n    const toExecute = bundlerOverrides[\"thread-stream-worker\"] || join(__dirname, \"lib\", \"worker.js\");\n    const worker = new Worker(toExecute, {\n        ...opts.workerOpts,\n        workerData: {\n            filename: filename.indexOf(\"file://\") === 0 ? filename : pathToFileURL(filename).href,\n            dataBuf: stream[kImpl].dataBuf,\n            stateBuf: stream[kImpl].stateBuf,\n            workerData\n        }\n    });\n    // We keep a strong reference for now,\n    // we need to start writing first\n    worker.stream = new FakeWeakRef(stream);\n    worker.on(\"message\", onWorkerMessage);\n    worker.on(\"exit\", onWorkerExit);\n    registry.register(stream, worker);\n    return worker;\n}\nfunction drain(stream) {\n    assert(!stream[kImpl].sync);\n    if (stream[kImpl].needDrain) {\n        stream[kImpl].needDrain = false;\n        stream.emit(\"drain\");\n    }\n}\nfunction nextFlush(stream) {\n    const writeIndex = Atomics.load(stream[kImpl].state, WRITE_INDEX);\n    let leftover = stream[kImpl].data.length - writeIndex;\n    if (leftover > 0) {\n        if (stream[kImpl].buf.length === 0) {\n            stream[kImpl].flushing = false;\n            if (stream[kImpl].ending) {\n                end(stream);\n            } else if (stream[kImpl].needDrain) {\n                process.nextTick(drain, stream);\n            }\n            return;\n        }\n        let toWrite = stream[kImpl].buf.slice(0, leftover);\n        let toWriteBytes = Buffer.byteLength(toWrite);\n        if (toWriteBytes <= leftover) {\n            stream[kImpl].buf = stream[kImpl].buf.slice(leftover);\n            // process._rawDebug('writing ' + toWrite.length)\n            write(stream, toWrite, nextFlush.bind(null, stream));\n        } else {\n            // multi-byte utf-8\n            stream.flush(()=>{\n                // err is already handled in flush()\n                if (stream.destroyed) {\n                    return;\n                }\n                Atomics.store(stream[kImpl].state, READ_INDEX, 0);\n                Atomics.store(stream[kImpl].state, WRITE_INDEX, 0);\n                // Find a toWrite length that fits the buffer\n                // it must exists as the buffer is at least 4 bytes length\n                // and the max utf-8 length for a char is 4 bytes.\n                while(toWriteBytes > stream[kImpl].data.length){\n                    leftover = leftover / 2;\n                    toWrite = stream[kImpl].buf.slice(0, leftover);\n                    toWriteBytes = Buffer.byteLength(toWrite);\n                }\n                stream[kImpl].buf = stream[kImpl].buf.slice(leftover);\n                write(stream, toWrite, nextFlush.bind(null, stream));\n            });\n        }\n    } else if (leftover === 0) {\n        if (writeIndex === 0 && stream[kImpl].buf.length === 0) {\n            // we had a flushSync in the meanwhile\n            return;\n        }\n        stream.flush(()=>{\n            Atomics.store(stream[kImpl].state, READ_INDEX, 0);\n            Atomics.store(stream[kImpl].state, WRITE_INDEX, 0);\n            nextFlush(stream);\n        });\n    } else {\n        // This should never happen\n        throw new Error(\"overwritten\");\n    }\n}\nfunction onWorkerMessage(msg) {\n    const stream = this.stream.deref();\n    if (stream === undefined) {\n        this.exited = true;\n        // Terminate the worker.\n        this.terminate();\n        return;\n    }\n    switch(msg.code){\n        case \"READY\":\n            // Replace the FakeWeakRef with a\n            // proper one.\n            this.stream = new WeakRef(stream);\n            stream.flush(()=>{\n                stream[kImpl].ready = true;\n                stream.emit(\"ready\");\n            });\n            break;\n        case \"ERROR\":\n            destroy(stream, msg.err);\n            break;\n        default:\n            throw new Error(\"this should not happen: \" + msg.code);\n    }\n}\nfunction onWorkerExit(code) {\n    const stream = this.stream.deref();\n    if (stream === undefined) {\n        // Nothing to do, the worker already exit\n        return;\n    }\n    registry.unregister(stream);\n    stream.worker.exited = true;\n    stream.worker.off(\"exit\", onWorkerExit);\n    destroy(stream, code !== 0 ? new Error(\"The worker thread exited\") : null);\n}\nclass ThreadStream extends EventEmitter {\n    constructor(opts = {}){\n        super();\n        if (opts.bufferSize < 4) {\n            throw new Error(\"bufferSize must at least fit a 4-byte utf-8 char\");\n        }\n        this[kImpl] = {};\n        this[kImpl].stateBuf = new SharedArrayBuffer(128);\n        this[kImpl].state = new Int32Array(this[kImpl].stateBuf);\n        this[kImpl].dataBuf = new SharedArrayBuffer(opts.bufferSize || 4 * 1024 * 1024);\n        this[kImpl].data = Buffer.from(this[kImpl].dataBuf);\n        this[kImpl].sync = opts.sync || false;\n        this[kImpl].ending = false;\n        this[kImpl].ended = false;\n        this[kImpl].needDrain = false;\n        this[kImpl].destroyed = false;\n        this[kImpl].flushing = false;\n        this[kImpl].ready = false;\n        this[kImpl].finished = false;\n        this[kImpl].errored = null;\n        this[kImpl].closed = false;\n        this[kImpl].buf = \"\";\n        // TODO (fix): Make private?\n        this.worker = createWorker(this, opts) // TODO (fix): make private\n        ;\n    }\n    write(data) {\n        if (this[kImpl].destroyed) {\n            throw new Error(\"the worker has exited\");\n        }\n        if (this[kImpl].ending) {\n            throw new Error(\"the worker is ending\");\n        }\n        if (this[kImpl].flushing && this[kImpl].buf.length + data.length >= MAX_STRING) {\n            try {\n                writeSync(this);\n                this[kImpl].flushing = true;\n            } catch (err) {\n                destroy(this, err);\n                return false;\n            }\n        }\n        this[kImpl].buf += data;\n        if (this[kImpl].sync) {\n            try {\n                writeSync(this);\n                return true;\n            } catch (err) {\n                destroy(this, err);\n                return false;\n            }\n        }\n        if (!this[kImpl].flushing) {\n            this[kImpl].flushing = true;\n            setImmediate(nextFlush, this);\n        }\n        this[kImpl].needDrain = this[kImpl].data.length - this[kImpl].buf.length - Atomics.load(this[kImpl].state, WRITE_INDEX) <= 0;\n        return !this[kImpl].needDrain;\n    }\n    end() {\n        if (this[kImpl].destroyed) {\n            return;\n        }\n        this[kImpl].ending = true;\n        end(this);\n    }\n    flush(cb) {\n        if (this[kImpl].destroyed) {\n            if (typeof cb === \"function\") {\n                process.nextTick(cb, new Error(\"the worker has exited\"));\n            }\n            return;\n        }\n        // TODO write all .buf\n        const writeIndex = Atomics.load(this[kImpl].state, WRITE_INDEX);\n        // process._rawDebug(`(flush) readIndex (${Atomics.load(this.state, READ_INDEX)}) writeIndex (${Atomics.load(this.state, WRITE_INDEX)})`)\n        wait(this[kImpl].state, READ_INDEX, writeIndex, Infinity, (err, res)=>{\n            if (err) {\n                destroy(this, err);\n                process.nextTick(cb, err);\n                return;\n            }\n            if (res === \"not-equal\") {\n                // TODO handle deadlock\n                this.flush(cb);\n                return;\n            }\n            process.nextTick(cb);\n        });\n    }\n    flushSync() {\n        if (this[kImpl].destroyed) {\n            return;\n        }\n        writeSync(this);\n        flushSync(this);\n    }\n    unref() {\n        this.worker.unref();\n    }\n    ref() {\n        this.worker.ref();\n    }\n    get ready() {\n        return this[kImpl].ready;\n    }\n    get destroyed() {\n        return this[kImpl].destroyed;\n    }\n    get closed() {\n        return this[kImpl].closed;\n    }\n    get writable() {\n        return !this[kImpl].destroyed && !this[kImpl].ending;\n    }\n    get writableEnded() {\n        return this[kImpl].ending;\n    }\n    get writableFinished() {\n        return this[kImpl].finished;\n    }\n    get writableNeedDrain() {\n        return this[kImpl].needDrain;\n    }\n    get writableObjectMode() {\n        return false;\n    }\n    get writableErrored() {\n        return this[kImpl].errored;\n    }\n}\nfunction destroy(stream, err) {\n    if (stream[kImpl].destroyed) {\n        return;\n    }\n    stream[kImpl].destroyed = true;\n    if (err) {\n        stream[kImpl].errored = err;\n        stream.emit(\"error\", err);\n    }\n    if (!stream.worker.exited) {\n        stream.worker.terminate().catch(()=>{}).then(()=>{\n            stream[kImpl].closed = true;\n            stream.emit(\"close\");\n        });\n    } else {\n        setImmediate(()=>{\n            stream[kImpl].closed = true;\n            stream.emit(\"close\");\n        });\n    }\n}\nfunction write(stream, data, cb) {\n    // data is smaller than the shared buffer length\n    const current = Atomics.load(stream[kImpl].state, WRITE_INDEX);\n    const length = Buffer.byteLength(data);\n    stream[kImpl].data.write(data, current);\n    Atomics.store(stream[kImpl].state, WRITE_INDEX, current + length);\n    Atomics.notify(stream[kImpl].state, WRITE_INDEX);\n    cb();\n    return true;\n}\nfunction end(stream) {\n    if (stream[kImpl].ended || !stream[kImpl].ending || stream[kImpl].flushing) {\n        return;\n    }\n    stream[kImpl].ended = true;\n    try {\n        stream.flushSync();\n        let readIndex = Atomics.load(stream[kImpl].state, READ_INDEX);\n        // process._rawDebug('writing index')\n        Atomics.store(stream[kImpl].state, WRITE_INDEX, -1);\n        // process._rawDebug(`(end) readIndex (${Atomics.load(stream.state, READ_INDEX)}) writeIndex (${Atomics.load(stream.state, WRITE_INDEX)})`)\n        Atomics.notify(stream[kImpl].state, WRITE_INDEX);\n        // Wait for the process to complete\n        let spins = 0;\n        while(readIndex !== -1){\n            // process._rawDebug(`read = ${read}`)\n            Atomics.wait(stream[kImpl].state, READ_INDEX, readIndex, 1000);\n            readIndex = Atomics.load(stream[kImpl].state, READ_INDEX);\n            if (readIndex === -2) {\n                throw new Error(\"end() failed\");\n            }\n            if (++spins === 10) {\n                throw new Error(\"end() took too long (10s)\");\n            }\n        }\n        process.nextTick(()=>{\n            stream[kImpl].finished = true;\n            stream.emit(\"finish\");\n        });\n    } catch (err) {\n        destroy(stream, err);\n    }\n// process._rawDebug('end finished...')\n}\nfunction writeSync(stream) {\n    const cb = ()=>{\n        if (stream[kImpl].ending) {\n            end(stream);\n        } else if (stream[kImpl].needDrain) {\n            process.nextTick(drain, stream);\n        }\n    };\n    stream[kImpl].flushing = false;\n    while(stream[kImpl].buf.length !== 0){\n        const writeIndex = Atomics.load(stream[kImpl].state, WRITE_INDEX);\n        let leftover = stream[kImpl].data.length - writeIndex;\n        if (leftover === 0) {\n            flushSync(stream);\n            Atomics.store(stream[kImpl].state, READ_INDEX, 0);\n            Atomics.store(stream[kImpl].state, WRITE_INDEX, 0);\n            continue;\n        } else if (leftover < 0) {\n            // stream should never happen\n            throw new Error(\"overwritten\");\n        }\n        let toWrite = stream[kImpl].buf.slice(0, leftover);\n        let toWriteBytes = Buffer.byteLength(toWrite);\n        if (toWriteBytes <= leftover) {\n            stream[kImpl].buf = stream[kImpl].buf.slice(leftover);\n            // process._rawDebug('writing ' + toWrite.length)\n            write(stream, toWrite, cb);\n        } else {\n            // multi-byte utf-8\n            flushSync(stream);\n            Atomics.store(stream[kImpl].state, READ_INDEX, 0);\n            Atomics.store(stream[kImpl].state, WRITE_INDEX, 0);\n            // Find a toWrite length that fits the buffer\n            // it must exists as the buffer is at least 4 bytes length\n            // and the max utf-8 length for a char is 4 bytes.\n            while(toWriteBytes > stream[kImpl].buf.length){\n                leftover = leftover / 2;\n                toWrite = stream[kImpl].buf.slice(0, leftover);\n                toWriteBytes = Buffer.byteLength(toWrite);\n            }\n            stream[kImpl].buf = stream[kImpl].buf.slice(leftover);\n            write(stream, toWrite, cb);\n        }\n    }\n}\nfunction flushSync(stream) {\n    if (stream[kImpl].flushing) {\n        throw new Error(\"unable to flush while flushing\");\n    }\n    // process._rawDebug('flushSync started')\n    const writeIndex = Atomics.load(stream[kImpl].state, WRITE_INDEX);\n    let spins = 0;\n    // TODO handle deadlock\n    while(true){\n        const readIndex = Atomics.load(stream[kImpl].state, READ_INDEX);\n        if (readIndex === -2) {\n            throw new Error(\"_flushSync failed\");\n        }\n        // process._rawDebug(`(flushSync) readIndex (${readIndex}) writeIndex (${writeIndex})`)\n        if (readIndex !== writeIndex) {\n            // TODO stream timeouts for some reason.\n            Atomics.wait(stream[kImpl].state, READ_INDEX, readIndex, 1000);\n        } else {\n            break;\n        }\n        if (++spins === 10) {\n            throw new Error(\"_flushSync took too long (10s)\");\n        }\n    }\n// process._rawDebug('flushSync finished')\n}\nmodule.exports = ThreadStream;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL3RocmVhZC1zdHJlYW0vaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNLEVBQUVBLFlBQVksRUFBRSxHQUFHQyxtQkFBT0EsQ0FBQztBQUNqQyxNQUFNLEVBQUVDLE1BQU0sRUFBRSxHQUFHRCxtQkFBT0EsQ0FBQztBQUMzQixNQUFNLEVBQUVFLElBQUksRUFBRSxHQUFHRixtQkFBT0EsQ0FBQztBQUN6QixNQUFNLEVBQUVHLGFBQWEsRUFBRSxHQUFHSCxtQkFBT0EsQ0FBQztBQUNsQyxNQUFNLEVBQUVJLElBQUksRUFBRSxHQUFHSixtQkFBT0EsQ0FBQztBQUN6QixNQUFNLEVBQ0pLLFdBQVcsRUFDWEMsVUFBVSxFQUNYLEdBQUdOLG1CQUFPQSxDQUFDO0FBQ1osTUFBTU8sU0FBU1AsbUJBQU9BLENBQUM7QUFDdkIsTUFBTVEsU0FBU1IsbUJBQU9BLENBQUM7QUFFdkIsTUFBTVMsUUFBUUMsT0FBTztBQUVyQiwyQkFBMkI7QUFDM0IsTUFBTUMsYUFBYUosT0FBT0ssU0FBUyxDQUFDQyxpQkFBaUI7QUFFckQsTUFBTUM7SUFDSkMsWUFBYUMsS0FBSyxDQUFFO1FBQ2xCLElBQUksQ0FBQ0MsTUFBTSxHQUFHRDtJQUNoQjtJQUVBRSxRQUFTO1FBQ1AsT0FBTyxJQUFJLENBQUNELE1BQU07SUFDcEI7QUFDRjtBQUVBLE1BQU1FLHVCQUF1QkMsT0FBT0Qsb0JBQW9CLElBQUksTUFBTUU7SUFDaEVDLFdBQVksQ0FBQztJQUNiQyxhQUFjLENBQUM7QUFDakI7QUFFQSxNQUFNQyxVQUFVSixPQUFPSSxPQUFPLElBQUlWO0FBRWxDLE1BQU1XLFdBQVcsSUFBSU4scUJBQXFCLENBQUNPO0lBQ3pDLElBQUlBLE9BQU9DLE1BQU0sRUFBRTtRQUNqQjtJQUNGO0lBQ0FELE9BQU9FLFNBQVM7QUFDbEI7QUFFQSxTQUFTQyxhQUFjQyxNQUFNLEVBQUVDLElBQUk7SUFDakMsTUFBTSxFQUFFQyxRQUFRLEVBQUVDLFVBQVUsRUFB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Q2MsTUFBTXhDLFFBQVFtQyxTQUFTNkI7UUFDekI7SUFDRjtBQUNGO0FBRUEsU0FBU0csVUFBV25FLE1BQU07SUFDeEIsSUFBSUEsTUFBTSxDQUFDckIsTUFBTSxDQUFDbUQsUUFBUSxFQUFFO1FBQzFCLE1BQU0sSUFBSWUsTUFBTTtJQUNsQjtJQUVBLHlDQUF5QztJQUV6QyxNQUFNdkIsYUFBYUMsUUFBUUMsSUFBSSxDQUFDeEIsTUFBTSxDQUFDckIsTUFBTSxDQUFDOEMsS0FBSyxFQUFFbEQ7SUFFckQsSUFBSTBHLFFBQVE7SUFFWix1QkFBdUI7SUFDdkIsTUFBTyxLQUFNO1FBQ1gsTUFBTUQsWUFBWXpELFFBQVFDLElBQUksQ0FBQ3hCLE1BQU0sQ0FBQ3JCLE1BQU0sQ0FBQzhDLEtBQUssRUFBRWpEO1FBRXBELElBQUl3RyxjQUFjLENBQUMsR0FBRztZQUNwQixNQUFNLElBQUluQyxNQUFNO1FBQ2xCO1FBRUEsdUZBQXVGO1FBQ3ZGLElBQUltQyxjQUFjMUQsWUFBWTtZQUM1Qix3Q0FBd0M7WUFDeENDLFFBQVFqRCxJQUFJLENBQUMwQixNQUFNLENBQUNyQixNQUFNLENBQUM4QyxLQUFLLEVBQUVqRCxZQUFZd0csV0FBVztRQUMzRCxPQUFPO1lBQ0w7UUFDRjtRQUVBLElBQUksRUFBRUMsVUFBVSxJQUFJO1lBQ2xCLE1BQU0sSUFBSXBDLE1BQU07UUFDbEI7SUFDRjtBQUNBLDBDQUEwQztBQUM1QztBQUVBcUMsT0FBT0MsT0FBTyxHQUFHOUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3RocmVhZC1zdHJlYW0vaW5kZXguanM/ZDE4OSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3QgeyBFdmVudEVtaXR0ZXIgfSA9IHJlcXVpcmUoJ2V2ZW50cycpXG5jb25zdCB7IFdvcmtlciB9ID0gcmVxdWlyZSgnd29ya2VyX3RocmVhZHMnKVxuY29uc3QgeyBqb2luIH0gPSByZXF1aXJlKCdwYXRoJylcbmNvbnN0IHsgcGF0aFRvRmlsZVVSTCB9ID0gcmVxdWlyZSgndXJsJylcbmNvbnN0IHsgd2FpdCB9ID0gcmVxdWlyZSgnLi9saWIvd2FpdCcpXG5jb25zdCB7XG4gIFdSSVRFX0lOREVYLFxuICBSRUFEX0lOREVYXG59ID0gcmVxdWlyZSgnLi9saWIvaW5kZXhlcycpXG5jb25zdCBidWZmZXIgPSByZXF1aXJlKCdidWZmZXInKVxuY29uc3QgYXNzZXJ0ID0gcmVxdWlyZSgnYXNzZXJ0JylcblxuY29uc3Qga0ltcGwgPSBTeW1ib2woJ2tJbXBsJylcblxuLy8gVjggbGltaXQgZm9yIHN0cmluZyBzaXplXG5jb25zdCBNQVhfU1RSSU5HID0gYnVmZmVyLmNvbnN0YW50cy5NQVhfU1RSSU5HX0xFTkdUSFxuXG5jbGFzcyBGYWtlV2Vha1JlZiB7XG4gIGNvbnN0cnVjdG9yICh2YWx1ZSkge1xuICAgIHRoaXMuX3ZhbHVlID0gdmFsdWVcbiAgfVxuXG4gIGRlcmVmICgpIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsdWVcbiAgfVxufVxuXG5jb25zdCBGaW5hbGl6YXRpb25SZWdpc3RyeSA9IGdsb2JhbC5GaW5hbGl6YXRpb25SZWdpc3RyeSB8fCBjbGFzcyBGYWtlRmluYWxpemF0aW9uUmVnaXN0cnkge1xuICByZWdpc3RlciAoKSB7fVxuICB1bnJlZ2lzdGVyICgpIHt9XG59XG5cbmNvbnN0IFdlYWtSZWYgPSBnbG9iYWwuV2Vha1JlZiB8fCBGYWtlV2Vha1JlZlxuXG5jb25zdCByZWdpc3RyeSA9IG5ldyBGaW5hbGl6YXRpb25SZWdpc3RyeSgod29ya2VyKSA9PiB7XG4gIGlmICh3b3JrZXIuZXhpdGVkKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgd29ya2VyLnRlcm1pbmF0ZSgpXG59KVxuXG5mdW5jdGlvbiBjcmVhdGVXb3JrZXIgKHN0cmVhbSwgb3B0cykge1xuICBjb25zdCB7IGZpbGVuYW1lLCB3b3JrZXJEYXRhIH0gPSBvcHRzXG5cbiAgY29uc3QgYnVuZGxlck92ZXJyaWRlcyA9ICdfX2J1bmRsZXJQYXRoc092ZXJyaWRlcycgaW4gZ2xvYmFsVGhpcyA/IGdsb2JhbFRoaXMuX19idW5kbGVyUGF0aHNPdmVycmlkZXMgOiB7fVxuICBjb25zdCB0b0V4ZWN1dGUgPSBidW5kbGVyT3ZlcnJpZGVzWyd0aHJlYWQtc3RyZWFtLXdvcmtlciddIHx8IGpvaW4oX19kaXJuYW1lLCAnbGliJywgJ3dvcmtlci5qcycpXG5cbiAgY29uc3Qgd29ya2VyID0gbmV3IFdvcmtlcih0b0V4ZWN1dGUsIHtcbiAgICAuLi5vcHRzLndvcmtlck9wdHMsXG4gICAgd29ya2VyRGF0YToge1xuICAgICAgZmlsZW5hbWU6IGZpbGVuYW1lLmluZGV4T2YoJ2ZpbGU6Ly8nKSA9PT0gMFxuICAgICAgICA/IGZpbGVuYW1lXG4gICAgICAgIDogcGF0aFRvRmlsZVVSTChmaWxlbmFtZSkuaHJlZixcbiAgICAgIGRhdGFCdWY6IHN0cmVhbVtrSW1wbF0uZGF0YUJ1ZixcbiAgICAgIHN0YXRlQnVmOiBzdHJlYW1ba0ltcGxdLnN0YXRlQnVmLFxuICAgICAgd29ya2VyRGF0YVxuICAgIH1cbiAgfSlcblxuICAvLyBXZSBrZWVwIGEgc3Ryb25nIHJlZmVyZW5jZSBmb3Igbm93LFxuICAvLyB3ZSBuZWVkIHRvIHN0YXJ0IHdyaXRpbmcgZmlyc3RcbiAgd29ya2VyLnN0cmVhbSA9IG5ldyBGYWtlV2Vha1JlZihzdHJlYW0pXG5cbiAgd29ya2VyLm9uKCdtZXNzYWdlJywgb25Xb3JrZXJNZXNzYWdlKVxuICB3b3JrZXIub24oJ2V4aXQnLCBvbldvcmtlckV4aXQpXG4gIHJlZ2lzdHJ5LnJlZ2lzdGVyKHN0cmVhbSwgd29ya2VyKVxuXG4gIHJldHVybiB3b3JrZXJcbn1cblxuZnVuY3Rpb24gZHJhaW4gKHN0cmVhbSkge1xuICBhc3NlcnQoIXN0cmVhbVtrSW1wbF0uc3luYylcbiAgaWYgKHN0cmVhbVtrSW1wbF0ubmVlZERyYWluKSB7XG4gICAgc3RyZWFtW2tJbXBsXS5uZWVkRHJhaW4gPSBmYWxzZVxuICAgIHN0cmVhbS5lbWl0KCdkcmFpbicpXG4gIH1cbn1cblxuZnVuY3Rpb24gbmV4dEZsdXNoIChzdHJlYW0pIHtcbiAgY29uc3Qgd3JpdGVJbmRleCA9IEF0b21pY3MubG9hZChzdHJlYW1ba0ltcGxdLnN0YXRlLCBXUklURV9JTkRFWClcbiAgbGV0IGxlZnRvdmVyID0gc3RyZWFtW2tJbXBsXS5kYXRhLmxlbmd0aCAtIHdyaXRlSW5kZXhcblxuICBpZiAobGVmdG92ZXIgPiAwKSB7XG4gICAgaWYgKHN0cmVhbVtrSW1wbF0uYnVmLmxlbmd0aCA9PT0gMCkge1xuICAgICAgc3RyZWFtW2tJbXBsXS5mbHVzaGluZyA9IGZhbHNlXG5cbiAgICAgIGlmIChzdHJlYW1ba0ltcGxdLmVuZGluZykge1xuICAgICAgICBlbmQoc3RyZWFtKVxuICAgICAgfSBlbHNlIGlmIChzdHJlYW1ba0ltcGxdLm5lZWREcmFpbikge1xuICAgICAgICBwcm9jZXNzLm5leHRUaWNrKGRyYWluLCBzdHJlYW0pXG4gICAgICB9XG5cbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGxldCB0b1dyaXRlID0gc3RyZWFtW2tJbXBsXS5idWYuc2xpY2UoMCwgbGVmdG92ZXIpXG4gICAgbGV0IHRvV3JpdGVCeXRlcyA9IEJ1ZmZlci5ieXRlTGVuZ3RoKHRvV3JpdGUpXG4gICAgaWYgKHRvV3JpdGVCeXRlcyA8PSBsZWZ0b3Zlcikge1xuICAgICAgc3RyZWFtW2tJbXBsXS5idWYgPSBzdHJlYW1ba0ltcGxdLmJ1Zi5zbGljZShsZWZ0b3ZlcilcbiAgICAgIC8vIHByb2Nlc3MuX3Jhd0RlYnVnKCd3cml0aW5nICcgKyB0b1dyaXRlLmxlbmd0aClcbiAgICAgIHdyaXRlKHN0cmVhbSwgdG9Xcml0ZSwgbmV4dEZsdXNoLmJpbmQobnVsbCwgc3RyZWFtKSlcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gbXVsdGktYnl0ZSB1dGYtOFxuICAgICAgc3RyZWFtLmZsdXNoKCgpID0+IHtcbiAgICAgICAgLy8gZXJyIGlzIGFscmVhZHkgaGFuZGxlZCBpbiBmbHVzaCgpXG4gICAgICAgIGlmIChzdHJlYW0uZGVzdHJveWVkKSB7XG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cblxuICAgICAgICBBdG9taWNzLnN0b3JlKHN0cmVhbVtrSW1wbF0uc3RhdGUsIFJFQURfSU5ERVgsIDApXG4gICAgICAgIEF0b21pY3Muc3RvcmUoc3RyZWFtW2tJbXBsXS5zdGF0ZSwgV1JJVEVfSU5ERVgsIDApXG5cbiAgICAgICAgLy8gRmluZCBhIHRvV3JpdGUgbGVuZ3RoIHRoYXQgZml0cyB0aGUgYnVmZmVyXG4gICAgICAgIC8vIGl0IG11c3QgZXhpc3RzIGFzIHRoZSBidWZmZXIgaXMgYXQgbGVhc3QgNCBieXRlcyBsZW5ndGhcbiAgICAgICAgLy8gYW5kIHRoZSBtYXggdXRmLTggbGVuZ3RoIGZvciBhIGNoYXIgaXMgNCBieXRlcy5cbiAgICAgICAgd2hpbGUgKHRvV3JpdGVCeXRlcyA+IHN0cmVhbVtrSW1wbF0uZGF0YS5sZW5ndGgpIHtcbiAgICAgICAgICBsZWZ0b3ZlciA9IGxlZnRvdmVyIC8gMlxuICAgICAgICAgIHRvV3JpdGUgPSBzdHJlYW1ba0ltcGxdLmJ1Zi5zbGljZSgwLCBsZWZ0b3ZlcilcbiAgICAgICAgICB0b1dyaXRlQnl0ZXMgPSBCdWZmZXIuYnl0ZUxlbmd0aCh0b1dyaXRlKVxuICAgICAgICB9XG4gICAgICAgIHN0cmVhbVtrSW1wbF0uYnVmID0gc3RyZWFtW2tJbXBsXS5idWYuc2xpY2UobGVmdG92ZXIpXG4gICAgICAgIHdyaXRlKHN0cmVhbSwgdG9Xcml0ZSwgbmV4dEZsdXNoLmJpbmQobnVsbCwgc3RyZWFtKSlcbiAgICAgIH0pXG4gICAgfVxuICB9IGVsc2UgaWYgKGxlZnRvdmVyID09PSAwKSB7XG4gICAgaWYgKHdyaXRlSW5kZXggPT09IDAgJiYgc3RyZWFtW2tJbXBsXS5idWYubGVuZ3RoID09PSAwKSB7XG4gICAgICAvLyB3ZSBoYWQgYSBmbHVzaFN5bmMgaW4gdGhlIG1lYW53aGlsZVxuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHN0cmVhbS5mbHVzaCgoKSA9PiB7XG4gICAgICBBdG9taWNzLnN0b3JlKHN0cmVhbVtrSW1wbF0uc3RhdGUsIFJFQURfSU5ERVgsIDApXG4gICAgICBBdG9taWNzLnN0b3JlKHN0cmVhbVtrSW1wbF0uc3RhdGUsIFdSSVRFX0lOREVYLCAwKVxuICAgICAgbmV4dEZsdXNoKHN0cmVhbSlcbiAgICB9KVxuICB9IGVsc2Uge1xuICAgIC8vIFRoaXMgc2hvdWxkIG5ldmVyIGhhcHBlblxuICAgIHRocm93IG5ldyBFcnJvcignb3ZlcndyaXR0ZW4nKVxuICB9XG59XG5cbmZ1bmN0aW9uIG9uV29ya2VyTWVzc2FnZSAobXNnKSB7XG4gIGNvbnN0IHN0cmVhbSA9IHRoaXMuc3RyZWFtLmRlcmVmKClcbiAgaWYgKHN0cmVhbSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpcy5leGl0ZWQgPSB0cnVlXG4gICAgLy8gVGVybWluYXRlIHRoZSB3b3JrZXIuXG4gICAgdGhpcy50ZXJtaW5hdGUoKVxuICAgIHJldHVyblxuICB9XG5cbiAgc3dpdGNoIChtc2cuY29kZSkge1xuICAgIGNhc2UgJ1JFQURZJzpcbiAgICAgIC8vIFJlcGxhY2UgdGhlIEZha2VXZWFrUmVmIHdpdGggYVxuICAgICAgLy8gcHJvcGVyIG9uZS5cbiAgICAgIHRoaXMuc3RyZWFtID0gbmV3IFdlYWtSZWYoc3RyZWFtKVxuXG4gICAgICBzdHJlYW0uZmx1c2goKCkgPT4ge1xuICAgICAgICBzdHJlYW1ba0ltcGxdLnJlYWR5ID0gdHJ1ZVxuICAgICAgICBzdHJlYW0uZW1pdCgncmVhZHknKVxuICAgICAgfSlcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnRVJST1InOlxuICAgICAgZGVzdHJveShzdHJlYW0sIG1zZy5lcnIpXG4gICAgICBicmVha1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3RoaXMgc2hvdWxkIG5vdCBoYXBwZW46ICcgKyBtc2cuY29kZSlcbiAgfVxufVxuXG5mdW5jdGlvbiBvbldvcmtlckV4aXQgKGNvZGUpIHtcbiAgY29uc3Qgc3RyZWFtID0gdGhpcy5zdHJlYW0uZGVyZWYoKVxuICBpZiAoc3RyZWFtID09PSB1bmRlZmluZWQpIHtcbiAgICAvLyBOb3RoaW5nIHRvIGRvLCB0aGUgd29ya2VyIGFscmVhZHkgZXhpdFxuICAgIHJldHVyblxuICB9XG4gIHJlZ2lzdHJ5LnVucmVnaXN0ZXIoc3RyZWFtKVxuICBzdHJlYW0ud29ya2VyLmV4aXRlZCA9IHRydWVcbiAgc3RyZWFtLndvcmtlci5vZmYoJ2V4aXQnLCBvbldvcmtlckV4aXQpXG4gIGRlc3Ryb3koc3RyZWFtLCBjb2RlICE9PSAwID8gbmV3IEVycm9yKCdUaGUgd29ya2VyIHRocmVhZCBleGl0ZWQnKSA6IG51bGwpXG59XG5cbmNsYXNzIFRocmVhZFN0cmVhbSBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gIGNvbnN0cnVjdG9yIChvcHRzID0ge30pIHtcbiAgICBzdXBlcigpXG5cbiAgICBpZiAob3B0cy5idWZmZXJTaXplIDwgNCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdidWZmZXJTaXplIG11c3QgYXQgbGVhc3QgZml0IGEgNC1ieXRlIHV0Zi04IGNoYXInKVxuICAgIH1cblxuICAgIHRoaXNba0ltcGxdID0ge31cbiAgICB0aGlzW2tJbXBsXS5zdGF0ZUJ1ZiA9IG5ldyBTaGFyZWRBcnJheUJ1ZmZlcigxMjgpXG4gICAgdGhpc1trSW1wbF0uc3RhdGUgPSBuZXcgSW50MzJBcnJheSh0aGlzW2tJbXBsXS5zdGF0ZUJ1ZilcbiAgICB0aGlzW2tJbXBsXS5kYXRhQnVmID0gbmV3IFNoYXJlZEFycmF5QnVmZmVyKG9wdHMuYnVmZmVyU2l6ZSB8fCA0ICogMTAyNCAqIDEwMjQpXG4gICAgdGhpc1trSW1wbF0uZGF0YSA9IEJ1ZmZlci5mcm9tKHRoaXNba0ltcGxdLmRhdGFCdWYpXG4gICAgdGhpc1trSW1wbF0uc3luYyA9IG9wdHMuc3luYyB8fCBmYWxzZVxuICAgIHRoaXNba0ltcGxdLmVuZGluZyA9IGZhbHNlXG4gICAgdGhpc1trSW1wbF0uZW5kZWQgPSBmYWxzZVxuICAgIHRoaXNba0ltcGxdLm5lZWREcmFpbiA9IGZhbHNlXG4gICAgdGhpc1trSW1wbF0uZGVzdHJveWVkID0gZmFsc2VcbiAgICB0aGlzW2tJbXBsXS5mbHVzaGluZyA9IGZhbHNlXG4gICAgdGhpc1trSW1wbF0ucmVhZHkgPSBmYWxzZVxuICAgIHRoaXNba0ltcGxdLmZpbmlzaGVkID0gZmFsc2VcbiAgICB0aGlzW2tJbXBsXS5lcnJvcmVkID0gbnVsbFxuICAgIHRoaXNba0ltcGxdLmNsb3NlZCA9IGZhbHNlXG4gICAgdGhpc1trSW1wbF0uYnVmID0gJydcblxuICAgIC8vIFRPRE8gKGZpeCk6IE1ha2UgcHJpdmF0ZT9cbiAgICB0aGlzLndvcmtlciA9IGNyZWF0ZVdvcmtlcih0aGlzLCBvcHRzKSAvLyBUT0RPIChmaXgpOiBtYWtlIHByaXZhdGVcbiAgfVxuXG4gIHdyaXRlIChkYXRhKSB7XG4gICAgaWYgKHRoaXNba0ltcGxdLmRlc3Ryb3llZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCd0aGUgd29ya2VyIGhhcyBleGl0ZWQnKVxuICAgIH1cblxuICAgIGlmICh0aGlzW2tJbXBsXS5lbmRpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcigndGhlIHdvcmtlciBpcyBlbmRpbmcnKVxuICAgIH1cblxuICAgIGlmICh0aGlzW2tJbXBsXS5mbHVzaGluZyAmJiB0aGlzW2tJbXBsXS5idWYubGVuZ3RoICsgZGF0YS5sZW5ndGggPj0gTUFYX1NUUklORykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgd3JpdGVTeW5jKHRoaXMpXG4gICAgICAgIHRoaXNba0ltcGxdLmZsdXNoaW5nID0gdHJ1ZVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGRlc3Ryb3kodGhpcywgZXJyKVxuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzW2tJbXBsXS5idWYgKz0gZGF0YVxuXG4gICAgaWYgKHRoaXNba0ltcGxdLnN5bmMpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHdyaXRlU3luYyh0aGlzKVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGRlc3Ryb3kodGhpcywgZXJyKVxuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXRoaXNba0ltcGxdLmZsdXNoaW5nKSB7XG4gICAgICB0aGlzW2tJbXBsXS5mbHVzaGluZyA9IHRydWVcbiAgICAgIHNldEltbWVkaWF0ZShuZXh0Rmx1c2gsIHRoaXMpXG4gICAgfVxuXG4gICAgdGhpc1trSW1wbF0ubmVlZERyYWluID0gdGhpc1trSW1wbF0uZGF0YS5sZW5ndGggLSB0aGlzW2tJbXBsXS5idWYubGVuZ3RoIC0gQXRvbWljcy5sb2FkKHRoaXNba0ltcGxdLnN0YXRlLCBXUklURV9JTkRFWCkgPD0gMFxuICAgIHJldHVybiAhdGhpc1trSW1wbF0ubmVlZERyYWluXG4gIH1cblxuICBlbmQgKCkge1xuICAgIGlmICh0aGlzW2tJbXBsXS5kZXN0cm95ZWQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHRoaXNba0ltcGxdLmVuZGluZyA9IHRydWVcbiAgICBlbmQodGhpcylcbiAgfVxuXG4gIGZsdXNoIChjYikge1xuICAgIGlmICh0aGlzW2tJbXBsXS5kZXN0cm95ZWQpIHtcbiAgICAgIGlmICh0eXBlb2YgY2IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcHJvY2Vzcy5uZXh0VGljayhjYiwgbmV3IEVycm9yKCd0aGUgd29ya2VyIGhhcyBleGl0ZWQnKSlcbiAgICAgIH1cbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIFRPRE8gd3JpdGUgYWxsIC5idWZcbiAgICBjb25zdCB3cml0ZUluZGV4ID0gQXRvbWljcy5sb2FkKHRoaXNba0ltcGxdLnN0YXRlLCBXUklURV9JTkRFWClcbiAgICAvLyBwcm9jZXNzLl9yYXdEZWJ1ZyhgKGZsdXNoKSByZWFkSW5kZXggKCR7QXRvbWljcy5sb2FkKHRoaXMuc3RhdGUsIFJFQURfSU5ERVgpfSkgd3JpdGVJbmRleCAoJHtBdG9taWNzLmxvYWQodGhpcy5zdGF0ZSwgV1JJVEVfSU5ERVgpfSlgKVxuICAgIHdhaXQodGhpc1trSW1wbF0uc3RhdGUsIFJFQURfSU5ERVgsIHdyaXRlSW5kZXgsIEluZmluaXR5LCAoZXJyLCByZXMpID0+IHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgZGVzdHJveSh0aGlzLCBlcnIpXG4gICAgICAgIHByb2Nlc3MubmV4dFRpY2soY2IsIGVycilcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBpZiAocmVzID09PSAnbm90LWVxdWFsJykge1xuICAgICAgICAvLyBUT0RPIGhhbmRsZSBkZWFkbG9ja1xuICAgICAgICB0aGlzLmZsdXNoKGNiKVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIHByb2Nlc3MubmV4dFRpY2soY2IpXG4gICAgfSlcbiAgfVxuXG4gIGZsdXNoU3luYyAoKSB7XG4gICAgaWYgKHRoaXNba0ltcGxdLmRlc3Ryb3llZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgd3JpdGVTeW5jKHRoaXMpXG4gICAgZmx1c2hTeW5jKHRoaXMpXG4gIH1cblxuICB1bnJlZiAoKSB7XG4gICAgdGhpcy53b3JrZXIudW5yZWYoKVxuICB9XG5cbiAgcmVmICgpIHtcbiAgICB0aGlzLndvcmtlci5yZWYoKVxuICB9XG5cbiAgZ2V0IHJlYWR5ICgpIHtcbiAgICByZXR1cm4gdGhpc1trSW1wbF0ucmVhZHlcbiAgfVxuXG4gIGdldCBkZXN0cm95ZWQgKCkge1xuICAgIHJldHVybiB0aGlzW2tJbXBsXS5kZXN0cm95ZWRcbiAgfVxuXG4gIGdldCBjbG9zZWQgKCkge1xuICAgIHJldHVybiB0aGlzW2tJbXBsXS5jbG9zZWRcbiAgfVxuXG4gIGdldCB3cml0YWJsZSAoKSB7XG4gICAgcmV0dXJuICF0aGlzW2tJbXBsXS5kZXN0cm95ZWQgJiYgIXRoaXNba0ltcGxdLmVuZGluZ1xuICB9XG5cbiAgZ2V0IHdyaXRhYmxlRW5kZWQgKCkge1xuICAgIHJldHVybiB0aGlzW2tJbXBsXS5lbmRpbmdcbiAgfVxuXG4gIGdldCB3cml0YWJsZUZpbmlzaGVkICgpIHtcbiAgICByZXR1cm4gdGhpc1trSW1wbF0uZmluaXNoZWRcbiAgfVxuXG4gIGdldCB3cml0YWJsZU5lZWREcmFpbiAoKSB7XG4gICAgcmV0dXJuIHRoaXNba0ltcGxdLm5lZWREcmFpblxuICB9XG5cbiAgZ2V0IHdyaXRhYmxlT2JqZWN0TW9kZSAoKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICBnZXQgd3JpdGFibGVFcnJvcmVkICgpIHtcbiAgICByZXR1cm4gdGhpc1trSW1wbF0uZXJyb3JlZFxuICB9XG59XG5cbmZ1bmN0aW9uIGRlc3Ryb3kgKHN0cmVhbSwgZXJyKSB7XG4gIGlmIChzdHJlYW1ba0ltcGxdLmRlc3Ryb3llZCkge1xuICAgIHJldHVyblxuICB9XG4gIHN0cmVhbVtrSW1wbF0uZGVzdHJveWVkID0gdHJ1ZVxuXG4gIGlmIChlcnIpIHtcbiAgICBzdHJlYW1ba0ltcGxdLmVycm9yZWQgPSBlcnJcbiAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcnIpXG4gIH1cblxuICBpZiAoIXN0cmVhbS53b3JrZXIuZXhpdGVkKSB7XG4gICAgc3RyZWFtLndvcmtlci50ZXJtaW5hdGUoKVxuICAgICAgLmNhdGNoKCgpID0+IHt9KVxuICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICBzdHJlYW1ba0ltcGxdLmNsb3NlZCA9IHRydWVcbiAgICAgICAgc3RyZWFtLmVtaXQoJ2Nsb3NlJylcbiAgICAgIH0pXG4gIH0gZWxzZSB7XG4gICAgc2V0SW1tZWRpYXRlKCgpID0+IHtcbiAgICAgIHN0cmVhbVtrSW1wbF0uY2xvc2VkID0gdHJ1ZVxuICAgICAgc3RyZWFtLmVtaXQoJ2Nsb3NlJylcbiAgICB9KVxuICB9XG59XG5cbmZ1bmN0aW9uIHdyaXRlIChzdHJlYW0sIGRhdGEsIGNiKSB7XG4gIC8vIGRhdGEgaXMgc21hbGxlciB0aGFuIHRoZSBzaGFyZWQgYnVmZmVyIGxlbmd0aFxuICBjb25zdCBjdXJyZW50ID0gQXRvbWljcy5sb2FkKHN0cmVhbVtrSW1wbF0uc3RhdGUsIFdSSVRFX0lOREVYKVxuICBjb25zdCBsZW5ndGggPSBCdWZmZXIuYnl0ZUxlbmd0aChkYXRhKVxuICBzdHJlYW1ba0ltcGxdLmRhdGEud3JpdGUoZGF0YSwgY3VycmVudClcbiAgQXRvbWljcy5zdG9yZShzdHJlYW1ba0ltcGxdLnN0YXRlLCBXUklURV9JTkRFWCwgY3VycmVudCArIGxlbmd0aClcbiAgQXRvbWljcy5ub3RpZnkoc3RyZWFtW2tJbXBsXS5zdGF0ZSwgV1JJVEVfSU5ERVgpXG4gIGNiKClcbiAgcmV0dXJuIHRydWVcbn1cblxuZnVuY3Rpb24gZW5kIChzdHJlYW0pIHtcbiAgaWYgKHN0cmVhbVtrSW1wbF0uZW5kZWQgfHwgIXN0cmVhbVtrSW1wbF0uZW5kaW5nIHx8IHN0cmVhbVtrSW1wbF0uZmx1c2hpbmcpIHtcbiAgICByZXR1cm5cbiAgfVxuICBzdHJlYW1ba0ltcGxdLmVuZGVkID0gdHJ1ZVxuXG4gIHRyeSB7XG4gICAgc3RyZWFtLmZsdXNoU3luYygpXG5cbiAgICBsZXQgcmVhZEluZGV4ID0gQXRvbWljcy5sb2FkKHN0cmVhbVtrSW1wbF0uc3RhdGUsIFJFQURfSU5ERVgpXG5cbiAgICAvLyBwcm9jZXNzLl9yYXdEZWJ1Zygnd3JpdGluZyBpbmRleCcpXG4gICAgQXRvbWljcy5zdG9yZShzdHJlYW1ba0ltcGxdLnN0YXRlLCBXUklURV9JTkRFWCwgLTEpXG4gICAgLy8gcHJvY2Vzcy5fcmF3RGVidWcoYChlbmQpIHJlYWRJbmRleCAoJHtBdG9taWNzLmxvYWQoc3RyZWFtLnN0YXRlLCBSRUFEX0lOREVYKX0pIHdyaXRlSW5kZXggKCR7QXRvbWljcy5sb2FkKHN0cmVhbS5zdGF0ZSwgV1JJVEVfSU5ERVgpfSlgKVxuICAgIEF0b21pY3Mubm90aWZ5KHN0cmVhbVtrSW1wbF0uc3RhdGUsIFdSSVRFX0lOREVYKVxuXG4gICAgLy8gV2FpdCBmb3IgdGhlIHByb2Nlc3MgdG8gY29tcGxldGVcbiAgICBsZXQgc3BpbnMgPSAwXG4gICAgd2hpbGUgKHJlYWRJbmRleCAhPT0gLTEpIHtcbiAgICAgIC8vIHByb2Nlc3MuX3Jhd0RlYnVnKGByZWFkID0gJHtyZWFkfWApXG4gICAgICBBdG9taWNzLndhaXQoc3RyZWFtW2tJbXBsXS5zdGF0ZSwgUkVBRF9JTkRFWCwgcmVhZEluZGV4LCAxMDAwKVxuICAgICAgcmVhZEluZGV4ID0gQXRvbWljcy5sb2FkKHN0cmVhbVtrSW1wbF0uc3RhdGUsIFJFQURfSU5ERVgpXG5cbiAgICAgIGlmIChyZWFkSW5kZXggPT09IC0yKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignZW5kKCkgZmFpbGVkJylcbiAgICAgIH1cblxuICAgICAgaWYgKCsrc3BpbnMgPT09IDEwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignZW5kKCkgdG9vayB0b28gbG9uZyAoMTBzKScpXG4gICAgICB9XG4gICAgfVxuXG4gICAgcHJvY2Vzcy5uZXh0VGljaygoKSA9PiB7XG4gICAgICBzdHJlYW1ba0ltcGxdLmZpbmlzaGVkID0gdHJ1ZVxuICAgICAgc3RyZWFtLmVtaXQoJ2ZpbmlzaCcpXG4gICAgfSlcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgZGVzdHJveShzdHJlYW0sIGVycilcbiAgfVxuICAvLyBwcm9jZXNzLl9yYXdEZWJ1ZygnZW5kIGZpbmlzaGVkLi4uJylcbn1cblxuZnVuY3Rpb24gd3JpdGVTeW5jIChzdHJlYW0pIHtcbiAgY29uc3QgY2IgPSAoKSA9PiB7XG4gICAgaWYgKHN0cmVhbVtrSW1wbF0uZW5kaW5nKSB7XG4gICAgICBlbmQoc3RyZWFtKVxuICAgIH0gZWxzZSBpZiAoc3RyZWFtW2tJbXBsXS5uZWVkRHJhaW4pIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soZHJhaW4sIHN0cmVhbSlcbiAgICB9XG4gIH1cbiAgc3RyZWFtW2tJbXBsXS5mbHVzaGluZyA9IGZhbHNlXG5cbiAgd2hpbGUgKHN0cmVhbVtrSW1wbF0uYnVmLmxlbmd0aCAhPT0gMCkge1xuICAgIGNvbnN0IHdyaXRlSW5kZXggPSBBdG9taWNzLmxvYWQoc3RyZWFtW2tJbXBsXS5zdGF0ZSwgV1JJVEVfSU5ERVgpXG4gICAgbGV0IGxlZnRvdmVyID0gc3RyZWFtW2tJbXBsXS5kYXRhLmxlbmd0aCAtIHdyaXRlSW5kZXhcbiAgICBpZiAobGVmdG92ZXIgPT09IDApIHtcbiAgICAgIGZsdXNoU3luYyhzdHJlYW0pXG4gICAgICBBdG9taWNzLnN0b3JlKHN0cmVhbVtrSW1wbF0uc3RhdGUsIFJFQURfSU5ERVgsIDApXG4gICAgICBBdG9taWNzLnN0b3JlKHN0cmVhbVtrSW1wbF0uc3RhdGUsIFdSSVRFX0lOREVYLCAwKVxuICAgICAgY29udGludWVcbiAgICB9IGVsc2UgaWYgKGxlZnRvdmVyIDwgMCkge1xuICAgICAgLy8gc3RyZWFtIHNob3VsZCBuZXZlciBoYXBwZW5cbiAgICAgIHRocm93IG5ldyBFcnJvcignb3ZlcndyaXR0ZW4nKVxuICAgIH1cblxuICAgIGxldCB0b1dyaXRlID0gc3RyZWFtW2tJbXBsXS5idWYuc2xpY2UoMCwgbGVmdG92ZXIpXG4gICAgbGV0IHRvV3JpdGVCeXRlcyA9IEJ1ZmZlci5ieXRlTGVuZ3RoKHRvV3JpdGUpXG4gICAgaWYgKHRvV3JpdGVCeXRlcyA8PSBsZWZ0b3Zlcikge1xuICAgICAgc3RyZWFtW2tJbXBsXS5idWYgPSBzdHJlYW1ba0ltcGxdLmJ1Zi5zbGljZShsZWZ0b3ZlcilcbiAgICAgIC8vIHByb2Nlc3MuX3Jhd0RlYnVnKCd3cml0aW5nICcgKyB0b1dyaXRlLmxlbmd0aClcbiAgICAgIHdyaXRlKHN0cmVhbSwgdG9Xcml0ZSwgY2IpXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIG11bHRpLWJ5dGUgdXRmLThcbiAgICAgIGZsdXNoU3luYyhzdHJlYW0pXG4gICAgICBBdG9taWNzLnN0b3JlKHN0cmVhbVtrSW1wbF0uc3RhdGUsIFJFQURfSU5ERVgsIDApXG4gICAgICBBdG9taWNzLnN0b3JlKHN0cmVhbVtrSW1wbF0uc3RhdGUsIFdSSVRFX0lOREVYLCAwKVxuXG4gICAgICAvLyBGaW5kIGEgdG9Xcml0ZSBsZW5ndGggdGhhdCBmaXRzIHRoZSBidWZmZXJcbiAgICAgIC8vIGl0IG11c3QgZXhpc3RzIGFzIHRoZSBidWZmZXIgaXMgYXQgbGVhc3QgNCBieXRlcyBsZW5ndGhcbiAgICAgIC8vIGFuZCB0aGUgbWF4IHV0Zi04IGxlbmd0aCBmb3IgYSBjaGFyIGlzIDQgYnl0ZXMuXG4gICAgICB3aGlsZSAodG9Xcml0ZUJ5dGVzID4gc3RyZWFtW2tJbXBsXS5idWYubGVuZ3RoKSB7XG4gICAgICAgIGxlZnRvdmVyID0gbGVmdG92ZXIgLyAyXG4gICAgICAgIHRvV3JpdGUgPSBzdHJlYW1ba0ltcGxdLmJ1Zi5zbGljZSgwLCBsZWZ0b3ZlcilcbiAgICAgICAgdG9Xcml0ZUJ5dGVzID0gQnVmZmVyLmJ5dGVMZW5ndGgodG9Xcml0ZSlcbiAgICAgIH1cbiAgICAgIHN0cmVhbVtrSW1wbF0uYnVmID0gc3RyZWFtW2tJbXBsXS5idWYuc2xpY2UobGVmdG92ZXIpXG4gICAgICB3cml0ZShzdHJlYW0sIHRvV3JpdGUsIGNiKVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBmbHVzaFN5bmMgKHN0cmVhbSkge1xuICBpZiAoc3RyZWFtW2tJbXBsXS5mbHVzaGluZykge1xuICAgIHRocm93IG5ldyBFcnJvcigndW5hYmxlIHRvIGZsdXNoIHdoaWxlIGZsdXNoaW5nJylcbiAgfVxuXG4gIC8vIHByb2Nlc3MuX3Jhd0RlYnVnKCdmbHVzaFN5bmMgc3RhcnRlZCcpXG5cbiAgY29uc3Qgd3JpdGVJbmRleCA9IEF0b21pY3MubG9hZChzdHJlYW1ba0ltcGxdLnN0YXRlLCBXUklURV9JTkRFWClcblxuICBsZXQgc3BpbnMgPSAwXG5cbiAgLy8gVE9ETyBoYW5kbGUgZGVhZGxvY2tcbiAgd2hpbGUgKHRydWUpIHtcbiAgICBjb25zdCByZWFkSW5kZXggPSBBdG9taWNzLmxvYWQoc3RyZWFtW2tJbXBsXS5zdGF0ZSwgUkVBRF9JTkRFWClcblxuICAgIGlmIChyZWFkSW5kZXggPT09IC0yKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ19mbHVzaFN5bmMgZmFpbGVkJylcbiAgICB9XG5cbiAgICAvLyBwcm9jZXNzLl9yYXdEZWJ1ZyhgKGZsdXNoU3luYykgcmVhZEluZGV4ICgke3JlYWRJbmRleH0pIHdyaXRlSW5kZXggKCR7d3JpdGVJbmRleH0pYClcbiAgICBpZiAocmVhZEluZGV4ICE9PSB3cml0ZUluZGV4KSB7XG4gICAgICAvLyBUT0RPIHN0cmVhbSB0aW1lb3V0cyBmb3Igc29tZSByZWFzb24uXG4gICAgICBBdG9taWNzLndhaXQoc3RyZWFtW2tJbXBsXS5zdGF0ZSwgUkVBRF9JTkRFWCwgcmVhZEluZGV4LCAxMDAwKVxuICAgIH0gZWxzZSB7XG4gICAgICBicmVha1xuICAgIH1cblxuICAgIGlmICgrK3NwaW5zID09PSAxMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdfZmx1c2hTeW5jIHRvb2sgdG9vIGxvbmcgKDEwcyknKVxuICAgIH1cbiAgfVxuICAvLyBwcm9jZXNzLl9yYXdEZWJ1ZygnZmx1c2hTeW5jIGZpbmlzaGVkJylcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBUaHJlYWRTdHJlYW1cbiJdLCJuYW1lcyI6WyJFdmVudEVtaXR0ZXIiLCJyZXF1aXJlIiwiV29ya2VyIiwiam9pbiIsInBhdGhUb0ZpbGVVUkwiLCJ3YWl0IiwiV1JJVEVfSU5ERVgiLCJSRUFEX0lOREVYIiwiYnVmZmVyIiwiYXNzZXJ0Iiwia0ltcGwiLCJTeW1ib2wiLCJNQVhfU1RSSU5HIiwiY29uc3RhbnRzIiwiTUFYX1NUUklOR19MRU5HVEgiLCJGYWtlV2Vha1JlZiIsImNvbnN0cnVjdG9yIiwidmFsdWUiLCJfdmFsdWUiLCJkZXJlZiIsIkZpbmFsaXphdGlvblJlZ2lzdHJ5IiwiZ2xvYmFsIiwiRmFrZUZpbmFsaXphdGlvblJlZ2lzdHJ5IiwicmVnaXN0ZXIiLCJ1bnJlZ2lzdGVyIiwiV2Vha1JlZiIsInJlZ2lzdHJ5Iiwid29ya2VyIiwiZXhpdGVkIiwidGVybWluYXRlIiwiY3JlYXRlV29ya2VyIiwic3RyZWFtIiwib3B0cyIsImZpbGVuYW1lIiwid29ya2VyRGF0YSIsImJ1bmRsZXJPdmVycmlkZXMiLCJnbG9iYWxUaGlzIiwiX19idW5kbGVyUGF0aHNPdmVycmlkZXMiLCJ0b0V4ZWN1dGUiLCJfX2Rpcm5hbWUiLCJ3b3JrZXJPcHRzIiwiaW5kZXhPZiIsImhyZWYiLCJkYXRhQnVmIiwic3RhdGVCdWYiLCJvbiIsIm9uV29ya2VyTWVzc2FnZSIsIm9uV29ya2VyRXhpdCIsImRyYWluIiwic3luYyIsIm5lZWREcmFpbiIsImVtaXQiLCJuZXh0Rmx1c2giLCJ3cml0ZUluZGV4IiwiQXRvbWljcyIsImxvYWQiLCJzdGF0ZSIsImxlZnRvdmVyIiwiZGF0YSIsImxlbmd0aCIsImJ1ZiIsImZsdXNoaW5nIiwiZW5kaW5nIiwiZW5kIiwicHJvY2VzcyIsIm5leHRUaWNrIiwidG9Xcml0ZSIsInNsaWNlIiwidG9Xcml0ZUJ5dGVzIiwiQnVmZmVyIiwiYnl0ZUxlbmd0aCIsIndyaXRlIiwiYmluZCIsImZsdXNoIiwiZGVzdHJveWVkIiwic3RvcmUiLCJFcnJvciIsIm1zZyIsInVuZGVmaW5lZCIsImNvZGUiLCJyZWFkeSIsImRlc3Ryb3kiLCJlcnIiLCJvZmYiLCJUaHJlYWRTdHJlYW0iLCJidWZmZXJTaXplIiwiU2hhcmVkQXJyYXlCdWZmZXIiLCJJbnQzMkFycmF5IiwiZnJvbSIsImVuZGVkIiwiZmluaXNoZWQiLCJlcnJvcmVkIiwiY2xvc2VkIiwid3JpdGVTeW5jIiwic2V0SW1tZWRpYXRlIiwiY2IiLCJJbmZpbml0eSIsInJlcyIsImZsdXNoU3luYyIsInVucmVmIiwicmVmIiwid3JpdGFibGUiLCJ3cml0YWJsZUVuZGVkIiwid3JpdGFibGVGaW5pc2hlZCIsIndyaXRhYmxlTmVlZERyYWluIiwid3JpdGFibGVPYmplY3RNb2RlIiwid3JpdGFibGVFcnJvcmVkIiwiY2F0Y2giLCJ0aGVuIiwiY3VycmVudCIsIm5vdGlmeSIsInJlYWRJbmRleCIsInNwaW5zIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/thread-stream/index.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/thread-stream/lib/indexes.js":
/*!****************************************************!*\
  !*** ../node_modules/thread-stream/lib/indexes.js ***!
  \****************************************************/
/***/ ((module) => {

eval("\nconst WRITE_INDEX = 4;\nconst READ_INDEX = 8;\nmodule.exports = {\n    WRITE_INDEX,\n    READ_INDEX\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL3RocmVhZC1zdHJlYW0vbGliL2luZGV4ZXMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNQSxjQUFjO0FBQ3BCLE1BQU1DLGFBQWE7QUFFbkJDLE9BQU9DLE9BQU8sR0FBRztJQUNmSDtJQUNBQztBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy90aHJlYWQtc3RyZWFtL2xpYi9pbmRleGVzLmpzP2RmZmMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IFdSSVRFX0lOREVYID0gNFxuY29uc3QgUkVBRF9JTkRFWCA9IDhcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIFdSSVRFX0lOREVYLFxuICBSRUFEX0lOREVYXG59XG4iXSwibmFtZXMiOlsiV1JJVEVfSU5ERVgiLCJSRUFEX0lOREVYIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/thread-stream/lib/indexes.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/thread-stream/lib/wait.js":
/*!*************************************************!*\
  !*** ../node_modules/thread-stream/lib/wait.js ***!
  \*************************************************/
/***/ ((module) => {

eval("\nconst MAX_TIMEOUT = 1000;\nfunction wait(state, index, expected, timeout, done) {\n    const max = Date.now() + timeout;\n    let current = Atomics.load(state, index);\n    if (current === expected) {\n        done(null, \"ok\");\n        return;\n    }\n    let prior = current;\n    const check = (backoff)=>{\n        if (Date.now() > max) {\n            done(null, \"timed-out\");\n        } else {\n            setTimeout(()=>{\n                prior = current;\n                current = Atomics.load(state, index);\n                if (current === prior) {\n                    check(backoff >= MAX_TIMEOUT ? MAX_TIMEOUT : backoff * 2);\n                } else {\n                    if (current === expected) done(null, \"ok\");\n                    else done(null, \"not-equal\");\n                }\n            }, backoff);\n        }\n    };\n    check(1);\n}\n// let waitDiffCount = 0\nfunction waitDiff(state, index, expected, timeout, done) {\n    // const id = waitDiffCount++\n    // process._rawDebug(`>>> waitDiff ${id}`)\n    const max = Date.now() + timeout;\n    let current = Atomics.load(state, index);\n    if (current !== expected) {\n        done(null, \"ok\");\n        return;\n    }\n    const check = (backoff)=>{\n        // process._rawDebug(`${id} ${index} current ${current} expected ${expected}`)\n        // process._rawDebug('' + backoff)\n        if (Date.now() > max) {\n            done(null, \"timed-out\");\n        } else {\n            setTimeout(()=>{\n                current = Atomics.load(state, index);\n                if (current !== expected) {\n                    done(null, \"ok\");\n                } else {\n                    check(backoff >= MAX_TIMEOUT ? MAX_TIMEOUT : backoff * 2);\n                }\n            }, backoff);\n        }\n    };\n    check(1);\n}\nmodule.exports = {\n    wait,\n    waitDiff\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL3RocmVhZC1zdHJlYW0vbGliL3dhaXQuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNQSxjQUFjO0FBRXBCLFNBQVNDLEtBQU1DLEtBQUssRUFBRUMsS0FBSyxFQUFFQyxRQUFRLEVBQUVDLE9BQU8sRUFBRUMsSUFBSTtJQUNsRCxNQUFNQyxNQUFNQyxLQUFLQyxHQUFHLEtBQUtKO0lBQ3pCLElBQUlLLFVBQVVDLFFBQVFDLElBQUksQ0FBQ1YsT0FBT0M7SUFDbEMsSUFBSU8sWUFBWU4sVUFBVTtRQUN4QkUsS0FBSyxNQUFNO1FBQ1g7SUFDRjtJQUNBLElBQUlPLFFBQVFIO0lBQ1osTUFBTUksUUFBUSxDQUFDQztRQUNiLElBQUlQLEtBQUtDLEdBQUcsS0FBS0YsS0FBSztZQUNwQkQsS0FBSyxNQUFNO1FBQ2IsT0FBTztZQUNMVSxXQUFXO2dCQUNUSCxRQUFRSDtnQkFDUkEsVUFBVUMsUUFBUUMsSUFBSSxDQUFDVixPQUFPQztnQkFDOUIsSUFBSU8sWUFBWUcsT0FBTztvQkFDckJDLE1BQU1DLFdBQVdmLGNBQWNBLGNBQWNlLFVBQVU7Z0JBQ3pELE9BQU87b0JBQ0wsSUFBSUwsWUFBWU4sVUFBVUUsS0FBSyxNQUFNO3lCQUNoQ0EsS0FBSyxNQUFNO2dCQUNsQjtZQUNGLEdBQUdTO1FBQ0w7SUFDRjtJQUNBRCxNQUFNO0FBQ1I7QUFFQSx3QkFBd0I7QUFDeEIsU0FBU0csU0FBVWYsS0FBSyxFQUFFQyxLQUFLLEVBQUVDLFFBQVEsRUFBRUMsT0FBTyxFQUFFQyxJQUFJO0lBQ3RELDZCQUE2QjtJQUM3QiwwQ0FBMEM7SUFDMUMsTUFBTUMsTUFBTUMsS0FBS0MsR0FBRyxLQUFLSjtJQUN6QixJQUFJSyxVQUFVQyxRQUFRQyxJQUFJLENBQUNWLE9BQU9DO0lBQ2xDLElBQUlPLFlBQVlOLFVBQVU7UUFDeEJFLEtBQUssTUFBTTtRQUNYO0lBQ0Y7SUFDQSxNQUFNUSxRQUFRLENBQUNDO1FBQ2IsOEVBQThFO1FBQzlFLGtDQUFrQztRQUNsQyxJQUFJUCxLQUFLQyxHQUFHLEtBQUtGLEtBQUs7WUFDcEJELEtBQUssTUFBTTtRQUNiLE9BQU87WUFDTFUsV0FBVztnQkFDVE4sVUFBVUMsUUFBUUMsSUFBSSxDQUFDVixPQUFPQztnQkFDOUIsSUFBSU8sWUFBWU4sVUFBVTtvQkFDeEJFLEtBQUssTUFBTTtnQkFDYixPQUFPO29CQUNMUSxNQUFNQyxXQUFXZixjQUFjQSxjQUFjZSxVQUFVO2dCQUN6RDtZQUNGLEdBQUdBO1FBQ0w7SUFDRjtJQUNBRCxNQUFNO0FBQ1I7QUFFQUksT0FBT0MsT0FBTyxHQUFHO0lBQUVsQjtJQUFNZ0I7QUFBUyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvdGhyZWFkLXN0cmVhbS9saWIvd2FpdC5qcz81MzAzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5jb25zdCBNQVhfVElNRU9VVCA9IDEwMDBcblxuZnVuY3Rpb24gd2FpdCAoc3RhdGUsIGluZGV4LCBleHBlY3RlZCwgdGltZW91dCwgZG9uZSkge1xuICBjb25zdCBtYXggPSBEYXRlLm5vdygpICsgdGltZW91dFxuICBsZXQgY3VycmVudCA9IEF0b21pY3MubG9hZChzdGF0ZSwgaW5kZXgpXG4gIGlmIChjdXJyZW50ID09PSBleHBlY3RlZCkge1xuICAgIGRvbmUobnVsbCwgJ29rJylcbiAgICByZXR1cm5cbiAgfVxuICBsZXQgcHJpb3IgPSBjdXJyZW50XG4gIGNvbnN0IGNoZWNrID0gKGJhY2tvZmYpID0+IHtcbiAgICBpZiAoRGF0ZS5ub3coKSA+IG1heCkge1xuICAgICAgZG9uZShudWxsLCAndGltZWQtb3V0JylcbiAgICB9IGVsc2Uge1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHByaW9yID0gY3VycmVudFxuICAgICAgICBjdXJyZW50ID0gQXRvbWljcy5sb2FkKHN0YXRlLCBpbmRleClcbiAgICAgICAgaWYgKGN1cnJlbnQgPT09IHByaW9yKSB7XG4gICAgICAgICAgY2hlY2soYmFja29mZiA+PSBNQVhfVElNRU9VVCA/IE1BWF9USU1FT1VUIDogYmFja29mZiAqIDIpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGN1cnJlbnQgPT09IGV4cGVjdGVkKSBkb25lKG51bGwsICdvaycpXG4gICAgICAgICAgZWxzZSBkb25lKG51bGwsICdub3QtZXF1YWwnKVxuICAgICAgICB9XG4gICAgICB9LCBiYWNrb2ZmKVxuICAgIH1cbiAgfVxuICBjaGVjaygxKVxufVxuXG4vLyBsZXQgd2FpdERpZmZDb3VudCA9IDBcbmZ1bmN0aW9uIHdhaXREaWZmIChzdGF0ZSwgaW5kZXgsIGV4cGVjdGVkLCB0aW1lb3V0LCBkb25lKSB7XG4gIC8vIGNvbnN0IGlkID0gd2FpdERpZmZDb3VudCsrXG4gIC8vIHByb2Nlc3MuX3Jhd0RlYnVnKGA+Pj4gd2FpdERpZmYgJHtpZH1gKVxuICBjb25zdCBtYXggPSBEYXRlLm5vdygpICsgdGltZW91dFxuICBsZXQgY3VycmVudCA9IEF0b21pY3MubG9hZChzdGF0ZSwgaW5kZXgpXG4gIGlmIChjdXJyZW50ICE9PSBleHBlY3RlZCkge1xuICAgIGRvbmUobnVsbCwgJ29rJylcbiAgICByZXR1cm5cbiAgfVxuICBjb25zdCBjaGVjayA9IChiYWNrb2ZmKSA9PiB7XG4gICAgLy8gcHJvY2Vzcy5fcmF3RGVidWcoYCR7aWR9ICR7aW5kZXh9IGN1cnJlbnQgJHtjdXJyZW50fSBleHBlY3RlZCAke2V4cGVjdGVkfWApXG4gICAgLy8gcHJvY2Vzcy5fcmF3RGVidWcoJycgKyBiYWNrb2ZmKVxuICAgIGlmIChEYXRlLm5vdygpID4gbWF4KSB7XG4gICAgICBkb25lKG51bGwsICd0aW1lZC1vdXQnKVxuICAgIH0gZWxzZSB7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgY3VycmVudCA9IEF0b21pY3MubG9hZChzdGF0ZSwgaW5kZXgpXG4gICAgICAgIGlmIChjdXJyZW50ICE9PSBleHBlY3RlZCkge1xuICAgICAgICAgIGRvbmUobnVsbCwgJ29rJylcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjaGVjayhiYWNrb2ZmID49IE1BWF9USU1FT1VUID8gTUFYX1RJTUVPVVQgOiBiYWNrb2ZmICogMilcbiAgICAgICAgfVxuICAgICAgfSwgYmFja29mZilcbiAgICB9XG4gIH1cbiAgY2hlY2soMSlcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7IHdhaXQsIHdhaXREaWZmIH1cbiJdLCJuYW1lcyI6WyJNQVhfVElNRU9VVCIsIndhaXQiLCJzdGF0ZSIsImluZGV4IiwiZXhwZWN0ZWQiLCJ0aW1lb3V0IiwiZG9uZSIsIm1heCIsIkRhdGUiLCJub3ciLCJjdXJyZW50IiwiQXRvbWljcyIsImxvYWQiLCJwcmlvciIsImNoZWNrIiwiYmFja29mZiIsInNldFRpbWVvdXQiLCJ3YWl0RGlmZiIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/thread-stream/lib/wait.js\n");

/***/ })

};
;